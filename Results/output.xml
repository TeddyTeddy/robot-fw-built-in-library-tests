<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 3.1.2 (Python 3.7.4 on linux)" generated="20200131 11:52:48.656" rpa="false">
<suite id="s1" name="Built-In-Library-Test &amp; Utilize-Global-Variable">
<suite id="s1-s1" name="Built-In-Library-Test" source="/home/hakan/Python/Robot/robot-fw-built-in-library-tests/Tests/built-in-library-test.robot">
<kw name="Suite Setup" type="setup">
<kw name="Set Log Level" library="BuiltIn">
<doc>Sets the log threshold to the specified level and returns the old level.</doc>
<arguments>
<arg>TRACE</arg>
</arguments>
<msg timestamp="20200131 11:52:48.801" level="INFO">Log level changed from INFO to TRACE.</msg>
<msg timestamp="20200131 11:52:48.801" level="TRACE">Return: 'INFO'</msg>
<status status="PASS" starttime="20200131 11:52:48.801" endtime="20200131 11:52:48.801"></status>
</kw>
<kw name="Pass Execution" library="BuiltIn">
<doc>Skips rest of the current test, setup, or teardown with PASS status.</doc>
<arguments>
<arg>Suite Setup passed</arg>
</arguments>
<msg timestamp="20200131 11:52:48.801" level="TRACE">Arguments: [ 'Suite Setup passed' ]</msg>
<msg timestamp="20200131 11:52:48.801" level="INFO">Execution passed with message:
Suite Setup passed</msg>
<status status="PASS" starttime="20200131 11:52:48.801" endtime="20200131 11:52:48.801"></status>
</kw>
<status status="PASS" starttime="20200131 11:52:48.800" endtime="20200131 11:52:48.801"></status>
</kw>
<test id="s1-s1-t1" name="Use &quot;Call Method&quot; : Calling A Particular Object Method From Python">
<kw name="Call Method" library="BuiltIn">
<doc>Calls the named method of the given object with the provided arguments.</doc>
<arguments>
<arg>${utility_object}</arg>
<arg>method</arg>
<arg>pos_arg1</arg>
<arg>pos_arg2</arg>
<arg>key1=value1</arg>
<arg>key2=value2</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20200131 11:52:48.802" level="TRACE">Arguments: [ &lt;Utils.Util object at 0x7fd4ff6bfe90&gt; | 'method' | 'pos_arg1' | 'pos_arg2' | key1='value1' | key2='value2' ]</msg>
<msg timestamp="20200131 11:52:48.802" level="DEBUG">args: ('pos_arg1', 'pos_arg2')</msg>
<msg timestamp="20200131 11:52:48.802" level="DEBUG">kwargs: {'key1': 'value1', 'key2': 'value2'}</msg>
<msg timestamp="20200131 11:52:48.802" level="TRACE">Return: "positional args: ('pos_arg1', 'pos_arg2') keyworded args: {'key1': 'value1', 'key2': 'value2'}"</msg>
<msg timestamp="20200131 11:52:48.802" level="INFO">${result} = positional args: ('pos_arg1', 'pos_arg2') keyworded args: {'key1': 'value1', 'key2': 'value2'}</msg>
<status status="PASS" starttime="20200131 11:52:48.802" endtime="20200131 11:52:48.802"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>positional args: ('pos_arg1', 'pos_arg2') keyworded args: {'key1': 'value1', 'key2': 'value2'}</arg>
<arg>${result}</arg>
</arguments>
<msg timestamp="20200131 11:52:48.803" level="TRACE">Arguments: [ "positional args: ('pos_arg1', 'pos_arg2') keyworded args: {'key1': 'value1', 'key2': 'value2'}" | "positional args: ('pos_arg1', 'pos_arg2') keyworded args: {'key1': 'value1', 'key2': 'value2'}" ]</msg>
<msg timestamp="20200131 11:52:48.803" level="DEBUG">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20200131 11:52:48.803" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:52:48.803" endtime="20200131 11:52:48.803"></status>
</kw>
<status status="PASS" starttime="20200131 11:52:48.801" endtime="20200131 11:52:48.803" critical="yes"></status>
</test>
<test id="s1-s1-t2" name="Use &quot;Catenate&quot;">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>Hello</arg>
<arg>World</arg>
</arguments>
<assign>
<var>${str1}</var>
</assign>
<msg timestamp="20200131 11:52:48.804" level="TRACE">Arguments: [ 'Hello' | 'World' ]</msg>
<msg timestamp="20200131 11:52:48.804" level="TRACE">Return: 'Hello World'</msg>
<msg timestamp="20200131 11:52:48.804" level="INFO">${str1} = Hello World</msg>
<status status="PASS" starttime="20200131 11:52:48.804" endtime="20200131 11:52:48.804"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${str1}</arg>
<arg>Hello World</arg>
</arguments>
<msg timestamp="20200131 11:52:48.805" level="TRACE">Arguments: [ 'Hello World' | 'Hello World' ]</msg>
<msg timestamp="20200131 11:52:48.805" level="DEBUG">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20200131 11:52:48.805" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:52:48.805" endtime="20200131 11:52:48.806"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=---</arg>
<arg>Hello</arg>
<arg>World</arg>
</arguments>
<assign>
<var>${str1}</var>
</assign>
<msg timestamp="20200131 11:52:48.808" level="TRACE">Arguments: [ 'SEPARATOR=---' | 'Hello' | 'World' ]</msg>
<msg timestamp="20200131 11:52:48.808" level="TRACE">Return: 'Hello---World'</msg>
<msg timestamp="20200131 11:52:48.808" level="INFO">${str1} = Hello---World</msg>
<status status="PASS" starttime="20200131 11:52:48.808" endtime="20200131 11:52:48.808"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${str1}</arg>
<arg>Hello---World</arg>
</arguments>
<msg timestamp="20200131 11:52:48.808" level="TRACE">Arguments: [ 'Hello---World' | 'Hello---World' ]</msg>
<msg timestamp="20200131 11:52:48.808" level="DEBUG">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20200131 11:52:48.808" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:52:48.808" endtime="20200131 11:52:48.808"></status>
</kw>
<status status="PASS" starttime="20200131 11:52:48.804" endtime="20200131 11:52:48.809" critical="yes"></status>
</test>
<test id="s1-s1-t3" name="Use &quot;Continue For Loop&quot; and &quot;Run Keyword If&quot;">
<kw name="${var} IN [ @{LIST} ]" type="for">
<kw name="${var} = Value1" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${var}' == 'CONTINUE'</arg>
<arg>Continue For Loop</arg>
</arguments>
<msg timestamp="20200131 11:52:48.810" level="TRACE">Arguments: [ "'Value1' == 'CONTINUE'" | 'Continue For Loop' ]</msg>
<msg timestamp="20200131 11:52:48.810" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:52:48.810" endtime="20200131 11:52:48.810"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${var}</arg>
</arguments>
<msg timestamp="20200131 11:52:48.810" level="TRACE">Arguments: [ 'Value1' ]</msg>
<msg timestamp="20200131 11:52:48.810" level="INFO">Value1</msg>
<msg timestamp="20200131 11:52:48.810" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:52:48.810" endtime="20200131 11:52:48.810"></status>
</kw>
<status status="PASS" starttime="20200131 11:52:48.810" endtime="20200131 11:52:48.810"></status>
</kw>
<kw name="${var} = Value2" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${var}' == 'CONTINUE'</arg>
<arg>Continue For Loop</arg>
</arguments>
<msg timestamp="20200131 11:52:48.810" level="TRACE">Arguments: [ "'Value2' == 'CONTINUE'" | 'Continue For Loop' ]</msg>
<msg timestamp="20200131 11:52:48.810" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:52:48.810" endtime="20200131 11:52:48.810"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${var}</arg>
</arguments>
<msg timestamp="20200131 11:52:48.811" level="TRACE">Arguments: [ 'Value2' ]</msg>
<msg timestamp="20200131 11:52:48.814" level="INFO">Value2</msg>
<msg timestamp="20200131 11:52:48.814" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:52:48.810" endtime="20200131 11:52:48.814"></status>
</kw>
<status status="PASS" starttime="20200131 11:52:48.810" endtime="20200131 11:52:48.814"></status>
</kw>
<kw name="${var} = CONTINUE" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${var}' == 'CONTINUE'</arg>
<arg>Continue For Loop</arg>
</arguments>
<msg timestamp="20200131 11:52:48.814" level="TRACE">Arguments: [ "'CONTINUE' == 'CONTINUE'" | 'Continue For Loop' ]</msg>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20200131 11:52:48.815" level="TRACE">Arguments: [  ]</msg>
<msg timestamp="20200131 11:52:48.815" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" starttime="20200131 11:52:48.815" endtime="20200131 11:52:48.815"></status>
</kw>
<status status="PASS" starttime="20200131 11:52:48.814" endtime="20200131 11:52:48.815"></status>
</kw>
<status status="PASS" starttime="20200131 11:52:48.814" endtime="20200131 11:52:48.815"></status>
</kw>
<kw name="${var} = Value3" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${var}' == 'CONTINUE'</arg>
<arg>Continue For Loop</arg>
</arguments>
<msg timestamp="20200131 11:52:48.815" level="TRACE">Arguments: [ "'Value3' == 'CONTINUE'" | 'Continue For Loop' ]</msg>
<msg timestamp="20200131 11:52:48.815" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:52:48.815" endtime="20200131 11:52:48.815"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${var}</arg>
</arguments>
<msg timestamp="20200131 11:52:48.815" level="TRACE">Arguments: [ 'Value3' ]</msg>
<msg timestamp="20200131 11:52:48.815" level="INFO">Value3</msg>
<msg timestamp="20200131 11:52:48.815" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:52:48.815" endtime="20200131 11:52:48.815"></status>
</kw>
<status status="PASS" starttime="20200131 11:52:48.815" endtime="20200131 11:52:48.815"></status>
</kw>
<status status="PASS" starttime="20200131 11:52:48.809" endtime="20200131 11:52:48.815"></status>
</kw>
<status status="PASS" starttime="20200131 11:52:48.809" endtime="20200131 11:52:48.818" critical="yes"></status>
</test>
<test id="s1-s1-t4" name="Use &quot;Continue For Loop If&quot;">
<kw name="${var} IN [ @{LIST} ]" type="for">
<kw name="${var} = Value1" type="foritem">
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${var}' == 'CONTINUE'</arg>
</arguments>
<msg timestamp="20200131 11:52:48.819" level="TRACE">Arguments: [ "'Value1' == 'CONTINUE'" ]</msg>
<msg timestamp="20200131 11:52:48.819" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:52:48.818" endtime="20200131 11:52:48.819"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${var}</arg>
</arguments>
<msg timestamp="20200131 11:52:48.819" level="TRACE">Arguments: [ 'Value1' ]</msg>
<msg timestamp="20200131 11:52:48.819" level="INFO">Value1</msg>
<msg timestamp="20200131 11:52:48.819" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:52:48.819" endtime="20200131 11:52:48.819"></status>
</kw>
<status status="PASS" starttime="20200131 11:52:48.818" endtime="20200131 11:52:48.819"></status>
</kw>
<kw name="${var} = Value2" type="foritem">
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${var}' == 'CONTINUE'</arg>
</arguments>
<msg timestamp="20200131 11:52:48.819" level="TRACE">Arguments: [ "'Value2' == 'CONTINUE'" ]</msg>
<msg timestamp="20200131 11:52:48.819" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:52:48.819" endtime="20200131 11:52:48.819"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${var}</arg>
</arguments>
<msg timestamp="20200131 11:52:48.820" level="TRACE">Arguments: [ 'Value2' ]</msg>
<msg timestamp="20200131 11:52:48.820" level="INFO">Value2</msg>
<msg timestamp="20200131 11:52:48.820" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:52:48.819" endtime="20200131 11:52:48.820"></status>
</kw>
<status status="PASS" starttime="20200131 11:52:48.819" endtime="20200131 11:52:48.820"></status>
</kw>
<kw name="${var} = CONTINUE" type="foritem">
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${var}' == 'CONTINUE'</arg>
</arguments>
<msg timestamp="20200131 11:52:48.820" level="TRACE">Arguments: [ "'CONTINUE' == 'CONTINUE'" ]</msg>
<msg timestamp="20200131 11:52:48.820" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" starttime="20200131 11:52:48.820" endtime="20200131 11:52:48.820"></status>
</kw>
<status status="PASS" starttime="20200131 11:52:48.820" endtime="20200131 11:52:48.820"></status>
</kw>
<kw name="${var} = Value3" type="foritem">
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${var}' == 'CONTINUE'</arg>
</arguments>
<msg timestamp="20200131 11:52:48.820" level="TRACE">Arguments: [ "'Value3' == 'CONTINUE'" ]</msg>
<msg timestamp="20200131 11:52:48.820" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:52:48.820" endtime="20200131 11:52:48.820"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${var}</arg>
</arguments>
<msg timestamp="20200131 11:52:48.821" level="TRACE">Arguments: [ 'Value3' ]</msg>
<msg timestamp="20200131 11:52:48.821" level="INFO">Value3</msg>
<msg timestamp="20200131 11:52:48.821" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:52:48.820" endtime="20200131 11:52:48.821"></status>
</kw>
<status status="PASS" starttime="20200131 11:52:48.820" endtime="20200131 11:52:48.821"></status>
</kw>
<status status="PASS" starttime="20200131 11:52:48.818" endtime="20200131 11:52:48.821"></status>
</kw>
<status status="PASS" starttime="20200131 11:52:48.818" endtime="20200131 11:52:48.825" critical="yes"></status>
</test>
<test id="s1-s1-t5" name="Use &quot;Convert To Binary&quot;">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>10</arg>
</arguments>
<assign>
<var>${variable}</var>
</assign>
<msg timestamp="20200131 11:52:48.826" level="TRACE">Arguments: [ '10' ]</msg>
<msg timestamp="20200131 11:52:48.826" level="TRACE">Return: '10'</msg>
<msg timestamp="20200131 11:52:48.826" level="INFO">${variable} = 10</msg>
<status status="PASS" starttime="20200131 11:52:48.826" endtime="20200131 11:52:48.826"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${variable}</arg>
<arg>10</arg>
</arguments>
<msg timestamp="20200131 11:52:48.827" level="TRACE">Arguments: [ '10' | '10' ]</msg>
<msg timestamp="20200131 11:52:48.827" level="DEBUG">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20200131 11:52:48.827" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:52:48.826" endtime="20200131 11:52:48.827"></status>
</kw>
<kw name="Convert To Binary" library="BuiltIn">
<doc>Converts the given item to a binary string.</doc>
<arguments>
<arg>${variable}</arg>
<arg>base=10</arg>
</arguments>
<assign>
<var>${binary_string}</var>
</assign>
<msg timestamp="20200131 11:52:48.827" level="TRACE">Arguments: [ '10' | base='10' ]</msg>
<msg timestamp="20200131 11:52:48.827" level="DEBUG">Argument types are:
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20200131 11:52:48.827" level="TRACE">Return: '1010'</msg>
<msg timestamp="20200131 11:52:48.827" level="INFO">${binary_string} = 1010</msg>
<status status="PASS" starttime="20200131 11:52:48.827" endtime="20200131 11:52:48.827"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${binary_string}</arg>
<arg>1010</arg>
</arguments>
<msg timestamp="20200131 11:52:48.827" level="TRACE">Arguments: [ '1010' | '1010' ]</msg>
<msg timestamp="20200131 11:52:48.827" level="DEBUG">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20200131 11:52:48.827" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:52:48.827" endtime="20200131 11:52:48.827"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>F</arg>
</arguments>
<assign>
<var>${variable}</var>
</assign>
<msg timestamp="20200131 11:52:48.830" level="TRACE">Arguments: [ 'F' ]</msg>
<msg timestamp="20200131 11:52:48.830" level="TRACE">Return: 'F'</msg>
<msg timestamp="20200131 11:52:48.830" level="INFO">${variable} = F</msg>
<status status="PASS" starttime="20200131 11:52:48.830" endtime="20200131 11:52:48.830"></status>
</kw>
<kw name="Convert To Binary" library="BuiltIn">
<doc>Converts the given item to a binary string.</doc>
<arguments>
<arg>${variable}</arg>
<arg>base=16</arg>
<arg>prefix=0x</arg>
<arg>length=8</arg>
</arguments>
<assign>
<var>${binary_string}</var>
</assign>
<msg timestamp="20200131 11:52:48.830" level="TRACE">Arguments: [ 'F' | base='16' | prefix='0x' | length='8' ]</msg>
<msg timestamp="20200131 11:52:48.830" level="DEBUG">Argument types are:
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20200131 11:52:48.830" level="TRACE">Return: '0x00001111'</msg>
<msg timestamp="20200131 11:52:48.830" level="INFO">${binary_string} = 0x00001111</msg>
<status status="PASS" starttime="20200131 11:52:48.830" endtime="20200131 11:52:48.830"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${binary_string}</arg>
<arg>0x00001111</arg>
</arguments>
<msg timestamp="20200131 11:52:48.831" level="TRACE">Arguments: [ '0x00001111' | '0x00001111' ]</msg>
<msg timestamp="20200131 11:52:48.831" level="DEBUG">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20200131 11:52:48.831" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:52:48.830" endtime="20200131 11:52:48.831"></status>
</kw>
<kw name="Convert To Binary" library="BuiltIn">
<doc>Converts the given item to a binary string.</doc>
<arguments>
<arg>-2</arg>
<arg>prefix=B</arg>
<arg>length=4</arg>
</arguments>
<assign>
<var>${binary_string}</var>
</assign>
<msg timestamp="20200131 11:52:48.831" level="TRACE">Arguments: [ '-2' | prefix='B' | length='4' ]</msg>
<msg timestamp="20200131 11:52:48.831" level="DEBUG">Argument types are:
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20200131 11:52:48.831" level="TRACE">Return: '-B0010'</msg>
<msg timestamp="20200131 11:52:48.831" level="INFO">${binary_string} = -B0010</msg>
<status status="PASS" starttime="20200131 11:52:48.831" endtime="20200131 11:52:48.831"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${binary_string}</arg>
<arg>-B0010</arg>
</arguments>
<msg timestamp="20200131 11:52:48.831" level="TRACE">Arguments: [ '-B0010' | '-B0010' ]</msg>
<msg timestamp="20200131 11:52:48.831" level="DEBUG">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20200131 11:52:48.831" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:52:48.831" endtime="20200131 11:52:48.831"></status>
</kw>
<doc>"Convert To Binary" keyword accepts a STRING as its first argument.
The string first argument is first passed to "Convert To Integer"
keyword and the result is then converted to a binary number represented as a string
If you passed an INTEGER as its first argument, the test will fail</doc>
<status status="PASS" starttime="20200131 11:52:48.826" endtime="20200131 11:52:48.832" critical="yes"></status>
</test>
<test id="s1-s1-t6" name="Use &quot;Convert To Boolean&quot;">
<kw name="Convert To Boolean" library="BuiltIn">
<doc>Converts the given item to Boolean true or false.</doc>
<arguments>
<arg>True</arg>
</arguments>
<assign>
<var>${bool}</var>
</assign>
<msg timestamp="20200131 11:52:48.835" level="TRACE">Arguments: [ 'True' ]</msg>
<msg timestamp="20200131 11:52:48.835" level="DEBUG">Argument types are:
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20200131 11:52:48.835" level="TRACE">Return: True</msg>
<msg timestamp="20200131 11:52:48.835" level="INFO">${bool} = True</msg>
<status status="PASS" starttime="20200131 11:52:48.835" endtime="20200131 11:52:48.835"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${bool}</arg>
<arg>${True}</arg>
</arguments>
<msg timestamp="20200131 11:52:48.835" level="TRACE">Arguments: [ True | True ]</msg>
<msg timestamp="20200131 11:52:48.835" level="DEBUG">Argument types are:
&lt;class 'bool'&gt;
&lt;class 'bool'&gt;</msg>
<msg timestamp="20200131 11:52:48.835" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:52:48.835" endtime="20200131 11:52:48.836"></status>
</kw>
<kw name="Convert To Boolean" library="BuiltIn">
<doc>Converts the given item to Boolean true or false.</doc>
<arguments>
<arg>False</arg>
</arguments>
<assign>
<var>${bool}</var>
</assign>
<msg timestamp="20200131 11:52:48.836" level="TRACE">Arguments: [ 'False' ]</msg>
<msg timestamp="20200131 11:52:48.836" level="DEBUG">Argument types are:
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20200131 11:52:48.836" level="TRACE">Return: False</msg>
<msg timestamp="20200131 11:52:48.836" level="INFO">${bool} = False</msg>
<status status="PASS" starttime="20200131 11:52:48.836" endtime="20200131 11:52:48.836"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${bool}</arg>
<arg>${False}</arg>
</arguments>
<msg timestamp="20200131 11:52:48.837" level="TRACE">Arguments: [ False | False ]</msg>
<msg timestamp="20200131 11:52:48.837" level="DEBUG">Argument types are:
&lt;class 'bool'&gt;
&lt;class 'bool'&gt;</msg>
<msg timestamp="20200131 11:52:48.837" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:52:48.837" endtime="20200131 11:52:48.837"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<assign>
<var>${empty}</var>
</assign>
<msg timestamp="20200131 11:52:48.838" level="TRACE">Arguments: [  ]</msg>
<msg timestamp="20200131 11:52:48.838" level="TRACE">Return: {}</msg>
<msg timestamp="20200131 11:52:48.839" level="INFO">${empty} = {}</msg>
<status status="PASS" starttime="20200131 11:52:48.838" endtime="20200131 11:52:48.839"></status>
</kw>
<kw name="Convert To Boolean" library="BuiltIn">
<doc>Converts the given item to Boolean true or false.</doc>
<arguments>
<arg>${empty}</arg>
</arguments>
<assign>
<var>${bool}</var>
</assign>
<msg timestamp="20200131 11:52:48.840" level="TRACE">Arguments: [ {} ]</msg>
<msg timestamp="20200131 11:52:48.840" level="DEBUG">Argument types are:
&lt;class 'robot.utils.dotdict.DotDict'&gt;</msg>
<msg timestamp="20200131 11:52:48.840" level="TRACE">Return: False</msg>
<msg timestamp="20200131 11:52:48.840" level="INFO">${bool} = False</msg>
<status status="PASS" starttime="20200131 11:52:48.840" endtime="20200131 11:52:48.840"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${bool}</arg>
<arg>${False}</arg>
</arguments>
<msg timestamp="20200131 11:52:48.840" level="TRACE">Arguments: [ False | False ]</msg>
<msg timestamp="20200131 11:52:48.840" level="DEBUG">Argument types are:
&lt;class 'bool'&gt;
&lt;class 'bool'&gt;</msg>
<msg timestamp="20200131 11:52:48.840" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:52:48.840" endtime="20200131 11:52:48.840"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>key=value</arg>
</arguments>
<assign>
<var>${non-empty}</var>
</assign>
<msg timestamp="20200131 11:52:48.842" level="TRACE">Arguments: [ 'key=value' ]</msg>
<msg timestamp="20200131 11:52:48.842" level="TRACE">Return: {'key': 'value'}</msg>
<msg timestamp="20200131 11:52:48.842" level="INFO">${non-empty} = {'key': 'value'}</msg>
<status status="PASS" starttime="20200131 11:52:48.842" endtime="20200131 11:52:48.842"></status>
</kw>
<kw name="Convert To Boolean" library="BuiltIn">
<doc>Converts the given item to Boolean true or false.</doc>
<arguments>
<arg>${non-empty}</arg>
</arguments>
<assign>
<var>${bool}</var>
</assign>
<msg timestamp="20200131 11:52:48.842" level="TRACE">Arguments: [ {'key': 'value'} ]</msg>
<msg timestamp="20200131 11:52:48.842" level="DEBUG">Argument types are:
&lt;class 'robot.utils.dotdict.DotDict'&gt;</msg>
<msg timestamp="20200131 11:52:48.842" level="TRACE">Return: True</msg>
<msg timestamp="20200131 11:52:48.842" level="INFO">${bool} = True</msg>
<status status="PASS" starttime="20200131 11:52:48.842" endtime="20200131 11:52:48.842"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${bool}</arg>
<arg>${True}</arg>
</arguments>
<msg timestamp="20200131 11:52:48.843" level="TRACE">Arguments: [ True | True ]</msg>
<msg timestamp="20200131 11:52:48.843" level="DEBUG">Argument types are:
&lt;class 'bool'&gt;
&lt;class 'bool'&gt;</msg>
<msg timestamp="20200131 11:52:48.843" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:52:48.842" endtime="20200131 11:52:48.843"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>${empty}</var>
</assign>
<msg timestamp="20200131 11:52:48.843" level="TRACE">Arguments: [  ]</msg>
<msg timestamp="20200131 11:52:48.843" level="TRACE">Return: []</msg>
<msg timestamp="20200131 11:52:48.843" level="INFO">${empty} = []</msg>
<status status="PASS" starttime="20200131 11:52:48.843" endtime="20200131 11:52:48.843"></status>
</kw>
<kw name="Convert To Boolean" library="BuiltIn">
<doc>Converts the given item to Boolean true or false.</doc>
<arguments>
<arg>${empty}</arg>
</arguments>
<assign>
<var>${bool}</var>
</assign>
<msg timestamp="20200131 11:52:48.845" level="TRACE">Arguments: [ [] ]</msg>
<msg timestamp="20200131 11:52:48.845" level="DEBUG">Argument types are:
&lt;class 'list'&gt;</msg>
<msg timestamp="20200131 11:52:48.845" level="TRACE">Return: False</msg>
<msg timestamp="20200131 11:52:48.845" level="INFO">${bool} = False</msg>
<status status="PASS" starttime="20200131 11:52:48.844" endtime="20200131 11:52:48.845"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${bool}</arg>
<arg>${False}</arg>
</arguments>
<msg timestamp="20200131 11:52:48.845" level="TRACE">Arguments: [ False | False ]</msg>
<msg timestamp="20200131 11:52:48.845" level="DEBUG">Argument types are:
&lt;class 'bool'&gt;
&lt;class 'bool'&gt;</msg>
<msg timestamp="20200131 11:52:48.845" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:52:48.845" endtime="20200131 11:52:48.845"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>1</arg>
<arg>2</arg>
<arg>3</arg>
</arguments>
<assign>
<var>${non-empty}</var>
</assign>
<msg timestamp="20200131 11:52:48.845" level="TRACE">Arguments: [ '1' | '2' | '3' ]</msg>
<msg timestamp="20200131 11:52:48.845" level="TRACE">Return: ['1', '2', '3']</msg>
<msg timestamp="20200131 11:52:48.845" level="INFO">${non-empty} = ['1', '2', '3']</msg>
<status status="PASS" starttime="20200131 11:52:48.845" endtime="20200131 11:52:48.846"></status>
</kw>
<kw name="Convert To Boolean" library="BuiltIn">
<doc>Converts the given item to Boolean true or false.</doc>
<arguments>
<arg>${non-empty}</arg>
</arguments>
<assign>
<var>${bool}</var>
</assign>
<msg timestamp="20200131 11:52:48.846" level="TRACE">Arguments: [ ['1', '2', '3'] ]</msg>
<msg timestamp="20200131 11:52:48.846" level="DEBUG">Argument types are:
&lt;class 'list'&gt;</msg>
<msg timestamp="20200131 11:52:48.846" level="TRACE">Return: True</msg>
<msg timestamp="20200131 11:52:48.846" level="INFO">${bool} = True</msg>
<status status="PASS" starttime="20200131 11:52:48.846" endtime="20200131 11:52:48.846"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${bool}</arg>
<arg>${True}</arg>
</arguments>
<msg timestamp="20200131 11:52:48.850" level="TRACE">Arguments: [ True | True ]</msg>
<msg timestamp="20200131 11:52:48.850" level="DEBUG">Argument types are:
&lt;class 'bool'&gt;
&lt;class 'bool'&gt;</msg>
<msg timestamp="20200131 11:52:48.850" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:52:48.850" endtime="20200131 11:52:48.850"></status>
</kw>
<status status="PASS" starttime="20200131 11:52:48.832" endtime="20200131 11:52:48.850" critical="yes"></status>
</test>
<test id="s1-s1-t7" name="Use &quot;Convert To Integer&quot;">
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>10</arg>
</arguments>
<assign>
<var>${variable}</var>
</assign>
<msg timestamp="20200131 11:52:48.851" level="TRACE">Arguments: [ '10' ]</msg>
<msg timestamp="20200131 11:52:48.851" level="DEBUG">Argument types are:
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20200131 11:52:48.851" level="TRACE">Return: 10</msg>
<msg timestamp="20200131 11:52:48.851" level="INFO">${variable} = 10</msg>
<status status="PASS" starttime="20200131 11:52:48.851" endtime="20200131 11:52:48.851"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${variable}</arg>
<arg>${10}</arg>
</arguments>
<msg timestamp="20200131 11:52:48.851" level="TRACE">Arguments: [ 10 | 10 ]</msg>
<msg timestamp="20200131 11:52:48.851" level="DEBUG">Argument types are:
&lt;class 'int'&gt;
&lt;class 'int'&gt;</msg>
<msg timestamp="20200131 11:52:48.851" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:52:48.851" endtime="20200131 11:52:48.851"></status>
</kw>
<kw name="Is Integer In Python" library="Utils">
<arguments>
<arg>${variable}</arg>
</arguments>
<assign>
<var>${isInteger}</var>
</assign>
<msg timestamp="20200131 11:52:48.852" level="TRACE">Arguments: [ 10 ]</msg>
<msg timestamp="20200131 11:52:48.852" level="TRACE">Return: True</msg>
<msg timestamp="20200131 11:52:48.852" level="INFO">${isInteger} = True</msg>
<status status="PASS" starttime="20200131 11:52:48.852" endtime="20200131 11:52:48.852"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${isInteger}</arg>
<arg>${True}</arg>
</arguments>
<msg timestamp="20200131 11:52:48.852" level="TRACE">Arguments: [ True | True ]</msg>
<msg timestamp="20200131 11:52:48.852" level="DEBUG">Argument types are:
&lt;class 'bool'&gt;
&lt;class 'bool'&gt;</msg>
<msg timestamp="20200131 11:52:48.852" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:52:48.852" endtime="20200131 11:52:48.853"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>item=FF AA</arg>
<arg>base=16</arg>
</arguments>
<assign>
<var>${variable}</var>
</assign>
<msg timestamp="20200131 11:52:48.853" level="TRACE">Arguments: [ item='FF AA' | base='16' ]</msg>
<msg timestamp="20200131 11:52:48.853" level="DEBUG">Argument types are:
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20200131 11:52:48.853" level="TRACE">Return: 65450</msg>
<msg timestamp="20200131 11:52:48.853" level="INFO">${variable} = 65450</msg>
<status status="PASS" starttime="20200131 11:52:48.853" endtime="20200131 11:52:48.853"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>item=65450</arg>
</arguments>
<assign>
<var>${expected_value}</var>
</assign>
<msg timestamp="20200131 11:52:48.853" level="TRACE">Arguments: [ item='65450' ]</msg>
<msg timestamp="20200131 11:52:48.853" level="DEBUG">Argument types are:
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20200131 11:52:48.853" level="TRACE">Return: 65450</msg>
<msg timestamp="20200131 11:52:48.853" level="INFO">${expected_value} = 65450</msg>
<status status="PASS" starttime="20200131 11:52:48.853" endtime="20200131 11:52:48.853"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${variable}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20200131 11:52:48.855" level="TRACE">Arguments: [ 65450 | 65450 ]</msg>
<msg timestamp="20200131 11:52:48.855" level="DEBUG">Argument types are:
&lt;class 'int'&gt;
&lt;class 'int'&gt;</msg>
<msg timestamp="20200131 11:52:48.855" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:52:48.855" endtime="20200131 11:52:48.855"></status>
</kw>
<doc>Convert To Integer item, base=None
Converts the given STRING item in a given base to an integer in base 10
The resulting integer is indeed recognized by Python as an integer type</doc>
<status status="PASS" starttime="20200131 11:52:48.850" endtime="20200131 11:52:48.855" critical="yes"></status>
</test>
<test id="s1-s1-t8" name="Use &quot;Convert To Bytes&quot;">
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>Should Be Implemented</arg>
</arguments>
<msg timestamp="20200131 11:52:48.858" level="TRACE">Arguments: [ 'Should Be Implemented' ]</msg>
<msg timestamp="20200131 11:52:48.858" level="FAIL">Should Be Implemented</msg>
<msg timestamp="20200131 11:52:48.858" level="DEBUG">Traceback (most recent call last):
  None</msg>
<status status="FAIL" starttime="20200131 11:52:48.858" endtime="20200131 11:52:48.858"></status>
</kw>
<doc>https://robotframework.org/robotframework/latest/libraries/BuiltIn.html#Convert%20To%20Bytes
The description is unclear. To be reviewed</doc>
<tags>
<tag>not-understood</tag>
</tags>
<status status="FAIL" starttime="20200131 11:52:48.855" endtime="20200131 11:52:48.858" critical="yes">Should Be Implemented</status>
</test>
<test id="s1-s1-t9" name="Use &quot;Convert To Hex&quot;">
<kw name="Convert To Hex" library="BuiltIn">
<doc>Converts the given item to a hexadecimal string.</doc>
<arguments>
<arg>255</arg>
<arg>base=10</arg>
<arg>prefix=0x</arg>
</arguments>
<assign>
<var>${hex_value}</var>
</assign>
<msg timestamp="20200131 11:52:48.859" level="TRACE">Arguments: [ '255' | base='10' | prefix='0x' ]</msg>
<msg timestamp="20200131 11:52:48.859" level="DEBUG">Argument types are:
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20200131 11:52:48.859" level="TRACE">Return: '0xFF'</msg>
<msg timestamp="20200131 11:52:48.860" level="INFO">${hex_value} = 0xFF</msg>
<status status="PASS" starttime="20200131 11:52:48.859" endtime="20200131 11:52:48.860"></status>
</kw>
<kw name="Is String In Python" library="Utils">
<arguments>
<arg>${hex_value}</arg>
</arguments>
<assign>
<var>${isString}</var>
</assign>
<msg timestamp="20200131 11:52:48.861" level="TRACE">Arguments: [ '0xFF' ]</msg>
<msg timestamp="20200131 11:52:48.862" level="TRACE">Return: True</msg>
<msg timestamp="20200131 11:52:48.862" level="INFO">${isString} = True</msg>
<status status="PASS" starttime="20200131 11:52:48.861" endtime="20200131 11:52:48.862"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${isString}</arg>
</arguments>
<msg timestamp="20200131 11:52:48.862" level="TRACE">Arguments: [ True ]</msg>
<msg timestamp="20200131 11:52:48.862" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:52:48.862" endtime="20200131 11:52:48.862"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${hex_value}==${0xFF}</arg>
</arguments>
<msg timestamp="20200131 11:52:48.862" level="TRACE">Arguments: [ '0xFF==255' ]</msg>
<msg timestamp="20200131 11:52:48.862" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:52:48.862" endtime="20200131 11:52:48.862"></status>
</kw>
<kw name="Convert To Hex" library="BuiltIn">
<doc>Converts the given item to a hexadecimal string.</doc>
<arguments>
<arg>-10</arg>
<arg>prefix=0x</arg>
<arg>length=2</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20200131 11:52:48.862" level="TRACE">Arguments: [ '-10' | prefix='0x' | length='2' ]</msg>
<msg timestamp="20200131 11:52:48.862" level="DEBUG">Argument types are:
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20200131 11:52:48.862" level="TRACE">Return: '-0x0A'</msg>
<msg timestamp="20200131 11:52:48.863" level="INFO">${result} = -0x0A</msg>
<status status="PASS" starttime="20200131 11:52:48.862" endtime="20200131 11:52:48.863"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${result}==-${0x0A}</arg>
</arguments>
<msg timestamp="20200131 11:52:48.863" level="TRACE">Arguments: [ '-0x0A==-10' ]</msg>
<msg timestamp="20200131 11:52:48.863" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:52:48.863" endtime="20200131 11:52:48.863"></status>
</kw>
<kw name="Convert To Hex" library="BuiltIn">
<doc>Converts the given item to a hexadecimal string.</doc>
<arguments>
<arg>255</arg>
<arg>prefix=X</arg>
<arg>lowercase=yes</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20200131 11:52:48.864" level="TRACE">Arguments: [ '255' | prefix='X' | lowercase=True ]</msg>
<msg timestamp="20200131 11:52:48.865" level="DEBUG">Argument types are:
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20200131 11:52:48.865" level="TRACE">Return: 'Xff'</msg>
<msg timestamp="20200131 11:52:48.865" level="INFO">${result} = Xff</msg>
<status status="PASS" starttime="20200131 11:52:48.864" endtime="20200131 11:52:48.865"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>$result=='Xff'</arg>
</arguments>
<msg timestamp="20200131 11:52:48.865" level="TRACE">Arguments: [ "$result=='Xff'" ]</msg>
<msg timestamp="20200131 11:52:48.868" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:52:48.865" endtime="20200131 11:52:48.868"></status>
</kw>
<doc>Convert To Hex item, base=None, prefix=None, length=None, lowercase=False
Converts the given item to a hexadecimal string.
The item, with an optional base, is first converted to an integer using "Convert To Integer" internally.
After that it is converted to a hexadecimal number (base 16) represented as a string such as FF0A.
The outcome of "Convert To Hex" is a (hexadecimal) string, which is recognized as string in Python</doc>
<status status="PASS" starttime="20200131 11:52:48.858" endtime="20200131 11:52:48.873" critical="yes"></status>
</test>
<test id="s1-s1-t10" name="Use &quot;Convert To Integer (in base 10)&quot;">
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>100</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20200131 11:52:48.874" level="TRACE">Arguments: [ '100' ]</msg>
<msg timestamp="20200131 11:52:48.874" level="DEBUG">Argument types are:
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20200131 11:52:48.874" level="TRACE">Return: 100</msg>
<msg timestamp="20200131 11:52:48.874" level="INFO">${result} = 100</msg>
<status status="PASS" starttime="20200131 11:52:48.874" endtime="20200131 11:52:48.874"></status>
</kw>
<kw name="Is Integer In Python" library="Utils">
<arguments>
<arg>${result}</arg>
</arguments>
<assign>
<var>${isInt}</var>
</assign>
<msg timestamp="20200131 11:52:48.877" level="TRACE">Arguments: [ 100 ]</msg>
<msg timestamp="20200131 11:52:48.877" level="TRACE">Return: True</msg>
<msg timestamp="20200131 11:52:48.877" level="INFO">${isInt} = True</msg>
<status status="PASS" starttime="20200131 11:52:48.876" endtime="20200131 11:52:48.877"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${isInt}</arg>
<arg>${True}</arg>
</arguments>
<msg timestamp="20200131 11:52:48.877" level="TRACE">Arguments: [ True | True ]</msg>
<msg timestamp="20200131 11:52:48.877" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:52:48.877" endtime="20200131 11:52:48.877"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>FF AA</arg>
<arg>base=16</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20200131 11:52:48.877" level="TRACE">Arguments: [ 'FF AA' | base='16' ]</msg>
<msg timestamp="20200131 11:52:48.877" level="DEBUG">Argument types are:
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20200131 11:52:48.877" level="TRACE">Return: 65450</msg>
<msg timestamp="20200131 11:52:48.877" level="INFO">${result} = 65450</msg>
<status status="PASS" starttime="20200131 11:52:48.877" endtime="20200131 11:52:48.877"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>100</arg>
<arg>base=8</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20200131 11:52:48.878" level="TRACE">Arguments: [ '100' | base='8' ]</msg>
<msg timestamp="20200131 11:52:48.878" level="DEBUG">Argument types are:
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20200131 11:52:48.878" level="TRACE">Return: 64</msg>
<msg timestamp="20200131 11:52:48.878" level="INFO">${result} = 64</msg>
<status status="PASS" starttime="20200131 11:52:48.877" endtime="20200131 11:52:48.878"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>-100</arg>
<arg>base=2</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20200131 11:52:48.878" level="TRACE">Arguments: [ '-100' | base='2' ]</msg>
<msg timestamp="20200131 11:52:48.878" level="DEBUG">Argument types are:
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20200131 11:52:48.879" level="TRACE">Return: -4</msg>
<msg timestamp="20200131 11:52:48.879" level="INFO">${result} = -4</msg>
<status status="PASS" starttime="20200131 11:52:48.878" endtime="20200131 11:52:48.879"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>0b100</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20200131 11:52:48.880" level="TRACE">Arguments: [ '0b100' ]</msg>
<msg timestamp="20200131 11:52:48.880" level="DEBUG">Argument types are:
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20200131 11:52:48.880" level="TRACE">Return: 4</msg>
<msg timestamp="20200131 11:52:48.880" level="INFO">${result} = 4</msg>
<status status="PASS" starttime="20200131 11:52:48.880" endtime="20200131 11:52:48.880"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>-0x100</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20200131 11:52:48.880" level="TRACE">Arguments: [ '-0x100' ]</msg>
<msg timestamp="20200131 11:52:48.880" level="DEBUG">Argument types are:
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20200131 11:52:48.880" level="TRACE">Return: -256</msg>
<msg timestamp="20200131 11:52:48.880" level="INFO">${result} = -256</msg>
<status status="PASS" starttime="20200131 11:52:48.880" endtime="20200131 11:52:48.880"></status>
</kw>
<doc>Convert To Integer item, base=None
Converts the given item to an integer number in base 10</doc>
<status status="PASS" starttime="20200131 11:52:48.873" endtime="20200131 11:52:48.880" critical="yes"></status>
</test>
<test id="s1-s1-t11" name="Use &quot;Convert To (Floating Point) Number&quot;">
<kw name="Convert To Number" library="BuiltIn">
<doc>Converts the given item to a floating point number.</doc>
<arguments>
<arg>42.512783</arg>
</arguments>
<assign>
<var>${variable}</var>
</assign>
<msg timestamp="20200131 11:52:48.881" level="TRACE">Arguments: [ '42.512783' ]</msg>
<msg timestamp="20200131 11:52:48.881" level="DEBUG">Argument types are:
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20200131 11:52:48.881" level="TRACE">Return: 42.512783</msg>
<msg timestamp="20200131 11:52:48.881" level="INFO">${variable} = 42.512783</msg>
<status status="PASS" starttime="20200131 11:52:48.881" endtime="20200131 11:52:48.883"></status>
</kw>
<kw name="Is Float In Python" library="Utils">
<arguments>
<arg>${variable}</arg>
</arguments>
<assign>
<var>${isFloat}</var>
</assign>
<msg timestamp="20200131 11:52:48.883" level="TRACE">Arguments: [ 42.512783 ]</msg>
<msg timestamp="20200131 11:52:48.883" level="TRACE">Return: True</msg>
<msg timestamp="20200131 11:52:48.883" level="INFO">${isFloat} = True</msg>
<status status="PASS" starttime="20200131 11:52:48.883" endtime="20200131 11:52:48.883"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${isFloat}</arg>
<arg>${True}</arg>
</arguments>
<msg timestamp="20200131 11:52:48.883" level="TRACE">Arguments: [ True | True ]</msg>
<msg timestamp="20200131 11:52:48.883" level="DEBUG">Argument types are:
&lt;class 'bool'&gt;
&lt;class 'bool'&gt;</msg>
<msg timestamp="20200131 11:52:48.884" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:52:48.883" endtime="20200131 11:52:48.884"></status>
</kw>
<kw name="Convert To Number" library="BuiltIn">
<doc>Converts the given item to a floating point number.</doc>
<arguments>
<arg>42.512783</arg>
<arg>precision=4</arg>
</arguments>
<assign>
<var>${variable}</var>
</assign>
<msg timestamp="20200131 11:52:48.884" level="TRACE">Arguments: [ '42.512783' | precision='4' ]</msg>
<msg timestamp="20200131 11:52:48.884" level="DEBUG">Argument types are:
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20200131 11:52:48.884" level="TRACE">Return: 42.5128</msg>
<msg timestamp="20200131 11:52:48.884" level="INFO">${variable} = 42.5128</msg>
<status status="PASS" starttime="20200131 11:52:48.884" endtime="20200131 11:52:48.884"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${variable}</arg>
<arg>${42.5128}</arg>
</arguments>
<msg timestamp="20200131 11:52:48.884" level="TRACE">Arguments: [ 42.5128 | 42.5128 ]</msg>
<msg timestamp="20200131 11:52:48.884" level="DEBUG">Argument types are:
&lt;class 'float'&gt;
&lt;class 'float'&gt;</msg>
<msg timestamp="20200131 11:52:48.884" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:52:48.884" endtime="20200131 11:52:48.884"></status>
</kw>
<kw name="Convert To Number" library="BuiltIn">
<doc>Converts the given item to a floating point number.</doc>
<arguments>
<arg>42.512783</arg>
<arg>precision=0</arg>
</arguments>
<assign>
<var>${variable}</var>
</assign>
<msg timestamp="20200131 11:52:48.886" level="TRACE">Arguments: [ '42.512783' | precision='0' ]</msg>
<msg timestamp="20200131 11:52:48.886" level="DEBUG">Argument types are:
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20200131 11:52:48.886" level="TRACE">Return: 43.0</msg>
<msg timestamp="20200131 11:52:48.886" level="INFO">${variable} = 43.0</msg>
<status status="PASS" starttime="20200131 11:52:48.886" endtime="20200131 11:52:48.886"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${variable}</arg>
<arg>${43}</arg>
</arguments>
<msg timestamp="20200131 11:52:48.886" level="TRACE">Arguments: [ 43.0 | 43 ]</msg>
<msg timestamp="20200131 11:52:48.886" level="INFO">Argument types are:
&lt;class 'float'&gt;
&lt;class 'int'&gt;</msg>
<msg timestamp="20200131 11:52:48.886" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:52:48.886" endtime="20200131 11:52:48.886"></status>
</kw>
<kw name="Convert To Number" library="BuiltIn">
<doc>Converts the given item to a floating point number.</doc>
<arguments>
<arg>42.512783</arg>
<arg>precision=-1</arg>
</arguments>
<assign>
<var>${variable}</var>
</assign>
<msg timestamp="20200131 11:52:48.887" level="TRACE">Arguments: [ '42.512783' | precision='-1' ]</msg>
<msg timestamp="20200131 11:52:48.887" level="DEBUG">Argument types are:
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20200131 11:52:48.887" level="TRACE">Return: 40.0</msg>
<msg timestamp="20200131 11:52:48.887" level="INFO">${variable} = 40.0</msg>
<status status="PASS" starttime="20200131 11:52:48.887" endtime="20200131 11:52:48.887"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${variable}</arg>
<arg>${40.0}</arg>
</arguments>
<msg timestamp="20200131 11:52:48.887" level="TRACE">Arguments: [ 40.0 | 40.0 ]</msg>
<msg timestamp="20200131 11:52:48.887" level="DEBUG">Argument types are:
&lt;class 'float'&gt;
&lt;class 'float'&gt;</msg>
<msg timestamp="20200131 11:52:48.887" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:52:48.887" endtime="20200131 11:52:48.887"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>??? If you want to avoid possible problems with floating point numbers, you can implement custom keywords using</arg>
</arguments>
<msg timestamp="20200131 11:52:48.889" level="TRACE">Arguments: [ '??? If you want to avoid possible problems with floating point numbers, you can implement custom keywords using' ]</msg>
<msg timestamp="20200131 11:52:48.889" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:52:48.889" endtime="20200131 11:52:48.889"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Python's decimal or fractions modules.</arg>
</arguments>
<msg timestamp="20200131 11:52:48.890" level="TRACE">Arguments: [ "Python's decimal or fractions modules." ]</msg>
<msg timestamp="20200131 11:52:48.890" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:52:48.889" endtime="20200131 11:52:48.890"></status>
</kw>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>Should Be Implemented</arg>
</arguments>
<msg timestamp="20200131 11:52:48.890" level="TRACE">Arguments: [ 'Should Be Implemented' ]</msg>
<msg timestamp="20200131 11:52:48.890" level="FAIL">Should Be Implemented</msg>
<msg timestamp="20200131 11:52:48.890" level="DEBUG">Traceback (most recent call last):
  None</msg>
<status status="FAIL" starttime="20200131 11:52:48.890" endtime="20200131 11:52:48.890"></status>
</kw>
<doc>Convert To Number item, precision=None
item is a floating point string
Converts the given item to a floating point number, which is indeed recognized as float in Python</doc>
<tags>
<tag>not-understood</tag>
</tags>
<status status="FAIL" starttime="20200131 11:52:48.881" endtime="20200131 11:52:48.890" critical="yes">Should Be Implemented</status>
</test>
<test id="s1-s1-t12" name="Use &quot;Convert To Octal&quot;">
<kw name="Convert To Octal" library="BuiltIn">
<doc>Converts the given item to an octal string.</doc>
<arguments>
<arg>10</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20200131 11:52:48.891" level="TRACE">Arguments: [ '10' ]</msg>
<msg timestamp="20200131 11:52:48.891" level="DEBUG">Argument types are:
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20200131 11:52:48.891" level="TRACE">Return: '12'</msg>
<msg timestamp="20200131 11:52:48.891" level="INFO">${result} = 12</msg>
<status status="PASS" starttime="20200131 11:52:48.891" endtime="20200131 11:52:48.891"></status>
</kw>
<kw name="Is String In Python" library="Utils">
<arguments>
<arg>${result}</arg>
</arguments>
<assign>
<var>${isString}</var>
</assign>
<msg timestamp="20200131 11:52:48.892" level="TRACE">Arguments: [ '12' ]</msg>
<msg timestamp="20200131 11:52:48.892" level="TRACE">Return: True</msg>
<msg timestamp="20200131 11:52:48.892" level="INFO">${isString} = True</msg>
<status status="PASS" starttime="20200131 11:52:48.892" endtime="20200131 11:52:48.892"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${isString}</arg>
<arg>${True}</arg>
</arguments>
<msg timestamp="20200131 11:52:48.894" level="TRACE">Arguments: [ True | True ]</msg>
<msg timestamp="20200131 11:52:48.894" level="DEBUG">Argument types are:
&lt;class 'bool'&gt;
&lt;class 'bool'&gt;</msg>
<msg timestamp="20200131 11:52:48.894" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:52:48.893" endtime="20200131 11:52:48.894"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${result}</arg>
<arg>12</arg>
</arguments>
<msg timestamp="20200131 11:52:48.894" level="TRACE">Arguments: [ '12' | '12' ]</msg>
<msg timestamp="20200131 11:52:48.894" level="DEBUG">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20200131 11:52:48.894" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:52:48.894" endtime="20200131 11:52:48.894"></status>
</kw>
<kw name="Convert To Octal" library="BuiltIn">
<doc>Converts the given item to an octal string.</doc>
<arguments>
<arg>-F</arg>
<arg>base=16</arg>
<arg>prefix=0</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20200131 11:52:48.894" level="TRACE">Arguments: [ '-F' | base='16' | prefix='0' ]</msg>
<msg timestamp="20200131 11:52:48.894" level="DEBUG">Argument types are:
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20200131 11:52:48.894" level="TRACE">Return: '-017'</msg>
<msg timestamp="20200131 11:52:48.895" level="INFO">${result} = -017</msg>
<status status="PASS" starttime="20200131 11:52:48.894" endtime="20200131 11:52:48.895"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${result}</arg>
<arg>-017</arg>
</arguments>
<msg timestamp="20200131 11:52:48.897" level="TRACE">Arguments: [ '-017' | '-017' ]</msg>
<msg timestamp="20200131 11:52:48.897" level="DEBUG">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20200131 11:52:48.897" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:52:48.897" endtime="20200131 11:52:48.897"></status>
</kw>
<kw name="Convert To Octal" library="BuiltIn">
<doc>Converts the given item to an octal string.</doc>
<arguments>
<arg>16</arg>
<arg>prefix=oct</arg>
<arg>length=4</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20200131 11:52:48.897" level="TRACE">Arguments: [ '16' | prefix='oct' | length='4' ]</msg>
<msg timestamp="20200131 11:52:48.897" level="DEBUG">Argument types are:
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20200131 11:52:48.897" level="TRACE">Return: 'oct0020'</msg>
<msg timestamp="20200131 11:52:48.897" level="INFO">${result} = oct0020</msg>
<status status="PASS" starttime="20200131 11:52:48.897" endtime="20200131 11:52:48.897"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${result}</arg>
<arg>oct0020</arg>
</arguments>
<msg timestamp="20200131 11:52:48.897" level="TRACE">Arguments: [ 'oct0020' | 'oct0020' ]</msg>
<msg timestamp="20200131 11:52:48.897" level="DEBUG">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20200131 11:52:48.898" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:52:48.897" endtime="20200131 11:52:48.898"></status>
</kw>
<doc>Convert To Octal item, base=None, prefix=None, length=None
Converts the given item to an octal string</doc>
<status status="PASS" starttime="20200131 11:52:48.890" endtime="20200131 11:52:48.898" critical="yes"></status>
</test>
<test id="s1-s1-t13" name="Use &quot;Convert To String&quot;">
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>Should Be Implemented</arg>
</arguments>
<msg timestamp="20200131 11:52:48.900" level="TRACE">Arguments: [ 'Should Be Implemented' ]</msg>
<msg timestamp="20200131 11:52:48.900" level="FAIL">Should Be Implemented</msg>
<msg timestamp="20200131 11:52:48.900" level="DEBUG">Traceback (most recent call last):
  None</msg>
<status status="FAIL" starttime="20200131 11:52:48.900" endtime="20200131 11:52:48.900"></status>
</kw>
<doc>Totally unclear..</doc>
<tags>
<tag>not-understood</tag>
</tags>
<status status="FAIL" starttime="20200131 11:52:48.898" endtime="20200131 11:52:48.900" critical="yes">Should Be Implemented</status>
</test>
<test id="s1-s1-t14" name="Use &quot;Create Dictionary&quot;">
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>key=value</arg>
<arg>foo=bar</arg>
</arguments>
<assign>
<var>&amp;{dict}</var>
</assign>
<msg timestamp="20200131 11:52:48.901" level="TRACE">Arguments: [ 'key=value' | 'foo=bar' ]</msg>
<msg timestamp="20200131 11:52:48.901" level="TRACE">Return: {'foo': 'bar', 'key': 'value'}</msg>
<msg timestamp="20200131 11:52:48.901" level="INFO">&amp;{dict} = { key=value | foo=bar }</msg>
<status status="PASS" starttime="20200131 11:52:48.901" endtime="20200131 11:52:48.901"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${dict} == {'key': 'value', 'foo': 'bar'}</arg>
</arguments>
<msg timestamp="20200131 11:52:48.903" level="TRACE">Arguments: [ "{'key': 'value', 'foo': 'bar'} == {'key': 'value', 'foo': 'bar'}" ]</msg>
<msg timestamp="20200131 11:52:48.903" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:52:48.903" endtime="20200131 11:52:48.903"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>key</arg>
<arg>value</arg>
<arg>foo</arg>
<arg>bar</arg>
</arguments>
<assign>
<var>&amp;{dict2}</var>
</assign>
<msg timestamp="20200131 11:52:48.903" level="TRACE">Arguments: [ 'key' | 'value' | 'foo' | 'bar' ]</msg>
<msg timestamp="20200131 11:52:48.903" level="TRACE">Return: {'foo': 'bar', 'key': 'value'}</msg>
<msg timestamp="20200131 11:52:48.903" level="INFO">&amp;{dict2} = { key=value | foo=bar }</msg>
<status status="PASS" starttime="20200131 11:52:48.903" endtime="20200131 11:52:48.903"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${dict}</arg>
<arg>${dict2}</arg>
</arguments>
<msg timestamp="20200131 11:52:48.904" level="TRACE">Arguments: [ {'foo': 'bar', 'key': 'value'} | {'foo': 'bar', 'key': 'value'} ]</msg>
<msg timestamp="20200131 11:52:48.904" level="DEBUG">Argument types are:
&lt;class 'robot.utils.dotdict.DotDict'&gt;
&lt;class 'robot.utils.dotdict.DotDict'&gt;</msg>
<msg timestamp="20200131 11:52:48.904" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:52:48.903" endtime="20200131 11:52:48.904"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>${1}=${2}</arg>
<arg>&amp;{dict}</arg>
<arg>foo=new</arg>
</arguments>
<assign>
<var>&amp;{dict}</var>
</assign>
<msg timestamp="20200131 11:52:48.906" level="TRACE">Arguments: [ '${1}=${2}' | '&amp;{dict}' | 'foo=new' ]</msg>
<msg timestamp="20200131 11:52:48.906" level="TRACE">Return: {1: 2, 'foo': 'new', 'key': 'value'}</msg>
<msg timestamp="20200131 11:52:48.906" level="INFO">&amp;{dict} = { 1=2 | key=value | foo=new }</msg>
<status status="PASS" starttime="20200131 11:52:48.906" endtime="20200131 11:52:48.906"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${dict} == {1: 2, 'key': 'value', 'foo': 'new'}</arg>
</arguments>
<msg timestamp="20200131 11:52:48.907" level="TRACE">Arguments: [ "{1: 2, 'key': 'value', 'foo': 'new'} == {1: 2, 'key': 'value', 'foo': 'new'}" ]</msg>
<msg timestamp="20200131 11:52:48.907" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:52:48.906" endtime="20200131 11:52:48.907"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${dict.key}</arg>
<arg>value</arg>
</arguments>
<msg timestamp="20200131 11:52:48.909" level="TRACE">Arguments: [ 'value' | 'value' ]</msg>
<msg timestamp="20200131 11:52:48.909" level="DEBUG">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20200131 11:52:48.909" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:52:48.909" endtime="20200131 11:52:48.909"></status>
</kw>
<status status="PASS" starttime="20200131 11:52:48.900" endtime="20200131 11:52:48.909" critical="yes"></status>
</test>
<test id="s1-s1-t15" name="Use &quot;Create List&quot;">
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>a</arg>
<arg>b</arg>
<arg>c</arg>
</arguments>
<assign>
<var>@{list}</var>
</assign>
<msg timestamp="20200131 11:52:48.910" level="TRACE">Arguments: [ 'a' | 'b' | 'c' ]</msg>
<msg timestamp="20200131 11:52:48.910" level="TRACE">Return: ['a', 'b', 'c']</msg>
<msg timestamp="20200131 11:52:48.912" level="INFO">@{list} = [ a | b | c ]</msg>
<status status="PASS" starttime="20200131 11:52:48.909" endtime="20200131 11:52:48.912"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${list} == ['a', 'b', 'c']</arg>
</arguments>
<msg timestamp="20200131 11:52:48.912" level="TRACE">Arguments: [ "['a', 'b', 'c'] == ['a', 'b', 'c']" ]</msg>
<msg timestamp="20200131 11:52:48.912" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:52:48.912" endtime="20200131 11:52:48.912"></status>
</kw>
<kw name="Is List In Python" library="Utils">
<arguments>
<arg>${list}</arg>
</arguments>
<assign>
<var>${isList}</var>
</assign>
<msg timestamp="20200131 11:52:48.912" level="TRACE">Arguments: [ ['a', 'b', 'c'] ]</msg>
<msg timestamp="20200131 11:52:48.912" level="TRACE">Return: True</msg>
<msg timestamp="20200131 11:52:48.912" level="INFO">${isList} = True</msg>
<status status="PASS" starttime="20200131 11:52:48.912" endtime="20200131 11:52:48.912"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${isList}</arg>
</arguments>
<msg timestamp="20200131 11:52:48.913" level="TRACE">Arguments: [ True ]</msg>
<msg timestamp="20200131 11:52:48.913" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:52:48.913" endtime="20200131 11:52:48.913"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${1}</arg>
<arg>${2}</arg>
<arg>${3}</arg>
</arguments>
<assign>
<var>${list}</var>
</assign>
<msg timestamp="20200131 11:52:48.913" level="TRACE">Arguments: [ 1 | 2 | 3 ]</msg>
<msg timestamp="20200131 11:52:48.913" level="TRACE">Return: [1, 2, 3]</msg>
<msg timestamp="20200131 11:52:48.913" level="INFO">${list} = [1, 2, 3]</msg>
<status status="PASS" starttime="20200131 11:52:48.913" endtime="20200131 11:52:48.913"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>$list == [1, 2, 3]</arg>
</arguments>
<msg timestamp="20200131 11:52:48.913" level="TRACE">Arguments: [ '$list == [1, 2, 3]' ]</msg>
<msg timestamp="20200131 11:52:48.914" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:52:48.913" endtime="20200131 11:52:48.914"></status>
</kw>
<kw name="Is Integer In Python" library="Utils">
<arguments>
<arg>${list}[1]</arg>
</arguments>
<assign>
<var>${isInteger}</var>
</assign>
<msg timestamp="20200131 11:52:48.916" level="TRACE">Arguments: [ 2 ]</msg>
<msg timestamp="20200131 11:52:48.916" level="TRACE">Return: True</msg>
<msg timestamp="20200131 11:52:48.916" level="INFO">${isInteger} = True</msg>
<status status="PASS" starttime="20200131 11:52:48.916" endtime="20200131 11:52:48.916"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${isInteger}</arg>
</arguments>
<msg timestamp="20200131 11:52:48.917" level="TRACE">Arguments: [ True ]</msg>
<msg timestamp="20200131 11:52:48.917" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:52:48.917" endtime="20200131 11:52:48.917"></status>
</kw>
<status status="PASS" starttime="20200131 11:52:48.909" endtime="20200131 11:52:48.917" critical="yes"></status>
</test>
<test id="s1-s1-t16" name="Use &quot;Evaluate&quot;">
<kw name="Convert To Number" library="BuiltIn">
<doc>Converts the given item to a floating point number.</doc>
<arguments>
<arg>3.14159265359</arg>
</arguments>
<assign>
<var>${pi}</var>
</assign>
<msg timestamp="20200131 11:52:48.917" level="TRACE">Arguments: [ '3.14159265359' ]</msg>
<msg timestamp="20200131 11:52:48.917" level="DEBUG">Argument types are:
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20200131 11:52:48.917" level="TRACE">Return: 3.14159265359</msg>
<msg timestamp="20200131 11:52:48.918" level="INFO">${pi} = 3.14159265359</msg>
<status status="PASS" starttime="20200131 11:52:48.917" endtime="20200131 11:52:48.918"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>0 &lt; ${pi} &lt; 10</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20200131 11:52:48.918" level="TRACE">Arguments: [ '0 &lt; 3.14159265359 &lt; 10' ]</msg>
<msg timestamp="20200131 11:52:48.918" level="TRACE">Return: True</msg>
<msg timestamp="20200131 11:52:48.918" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20200131 11:52:48.918" endtime="20200131 11:52:48.918"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20200131 11:52:48.918" level="TRACE">Arguments: [ True ]</msg>
<msg timestamp="20200131 11:52:48.918" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:52:48.918" endtime="20200131 11:52:48.918"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>0 &lt; $pi &lt; 10</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20200131 11:52:48.922" level="TRACE">Arguments: [ '0 &lt; $pi &lt; 10' ]</msg>
<msg timestamp="20200131 11:52:48.923" level="TRACE">Return: True</msg>
<msg timestamp="20200131 11:52:48.923" level="INFO">${result} = True</msg>
<status status="PASS" starttime="20200131 11:52:48.922" endtime="20200131 11:52:48.923"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20200131 11:52:48.923" level="TRACE">Arguments: [ True ]</msg>
<msg timestamp="20200131 11:52:48.923" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:52:48.923" endtime="20200131 11:52:48.923"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>random.randint(0, 100)</arg>
<arg>modules=random, sys</arg>
</arguments>
<assign>
<var>${random_int}</var>
</assign>
<msg timestamp="20200131 11:52:48.923" level="TRACE">Arguments: [ 'random.randint(0, 100)' | modules='random, sys' ]</msg>
<msg timestamp="20200131 11:52:48.923" level="TRACE">Return: 73</msg>
<msg timestamp="20200131 11:52:48.923" level="INFO">${random_int} = 73</msg>
<status status="PASS" starttime="20200131 11:52:48.923" endtime="20200131 11:52:48.923"></status>
</kw>
<kw name="Is Integer In Python" library="Utils">
<arguments>
<arg>${random_int}</arg>
</arguments>
<assign>
<var>${isInteger}</var>
</assign>
<msg timestamp="20200131 11:52:48.924" level="TRACE">Arguments: [ 73 ]</msg>
<msg timestamp="20200131 11:52:48.924" level="TRACE">Return: True</msg>
<msg timestamp="20200131 11:52:48.924" level="INFO">${isInteger} = True</msg>
<status status="PASS" starttime="20200131 11:52:48.924" endtime="20200131 11:52:48.924"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${isInteger}</arg>
</arguments>
<msg timestamp="20200131 11:52:48.924" level="TRACE">Arguments: [ True ]</msg>
<msg timestamp="20200131 11:52:48.924" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:52:48.924" endtime="20200131 11:52:48.924"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>x=${4}</arg>
<arg>y=${2}</arg>
</arguments>
<assign>
<var>${ns}</var>
</assign>
<msg timestamp="20200131 11:52:48.924" level="TRACE">Arguments: [ 'x=${4}' | 'y=${2}' ]</msg>
<msg timestamp="20200131 11:52:48.942" level="TRACE">Return: {'x': 4, 'y': 2}</msg>
<msg timestamp="20200131 11:52:48.942" level="INFO">${ns} = {'x': 4, 'y': 2}</msg>
<status status="PASS" starttime="20200131 11:52:48.924" endtime="20200131 11:52:48.942"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>x*10 + y</arg>
<arg>namespace=${ns}</arg>
<arg>modules=random, sys</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20200131 11:52:48.945" level="TRACE">Arguments: [ 'x*10 + y' | namespace={'x': 4, 'y': 2} | modules='random, sys' ]</msg>
<msg timestamp="20200131 11:52:48.945" level="TRACE">Return: 42</msg>
<msg timestamp="20200131 11:52:48.946" level="INFO">${result} = 42</msg>
<status status="PASS" starttime="20200131 11:52:48.945" endtime="20200131 11:52:48.946"></status>
</kw>
<kw name="Is Integer In Python" library="Utils">
<arguments>
<arg>${result}</arg>
</arguments>
<assign>
<var>${isInteger}</var>
</assign>
<msg timestamp="20200131 11:52:48.946" level="TRACE">Arguments: [ 42 ]</msg>
<msg timestamp="20200131 11:52:48.946" level="TRACE">Return: True</msg>
<msg timestamp="20200131 11:52:48.946" level="INFO">${isInteger} = True</msg>
<status status="PASS" starttime="20200131 11:52:48.946" endtime="20200131 11:52:48.946"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${isInteger}</arg>
</arguments>
<msg timestamp="20200131 11:52:48.946" level="TRACE">Arguments: [ True ]</msg>
<msg timestamp="20200131 11:52:48.946" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:52:48.946" endtime="20200131 11:52:48.946"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${42}</arg>
<arg>${result}</arg>
</arguments>
<msg timestamp="20200131 11:52:48.946" level="TRACE">Arguments: [ 42 | 42 ]</msg>
<msg timestamp="20200131 11:52:48.946" level="DEBUG">Argument types are:
&lt;class 'int'&gt;
&lt;class 'int'&gt;</msg>
<msg timestamp="20200131 11:52:48.946" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:52:48.946" endtime="20200131 11:52:48.946"></status>
</kw>
<status status="PASS" starttime="20200131 11:52:48.917" endtime="20200131 11:52:48.947" critical="yes"></status>
</test>
<test id="s1-s1-t17" name="Use &quot;Exit For Loop&quot;">
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>a</arg>
<arg>b</arg>
<arg>c</arg>
<arg>EXIT</arg>
<arg>d</arg>
<arg>e</arg>
</arguments>
<assign>
<var>@{list}</var>
</assign>
<msg timestamp="20200131 11:52:48.947" level="TRACE">Arguments: [ 'a' | 'b' | 'c' | 'EXIT' | 'd' | 'e' ]</msg>
<msg timestamp="20200131 11:52:48.947" level="TRACE">Return: ['a', 'b', 'c', 'EXIT', 'd', 'e']</msg>
<msg timestamp="20200131 11:52:48.947" level="INFO">@{list} = [ a | b | c | EXIT | d | e ]</msg>
<status status="PASS" starttime="20200131 11:52:48.947" endtime="20200131 11:52:48.947"></status>
</kw>
<kw name="${item} IN [ @{list} ]" type="for">
<kw name="${item} = a" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$item == 'EXIT'</arg>
<arg>Exit For Loop</arg>
</arguments>
<msg timestamp="20200131 11:52:48.949" level="TRACE">Arguments: [ "$item == 'EXIT'" | 'Exit For Loop' ]</msg>
<msg timestamp="20200131 11:52:48.950" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:52:48.949" endtime="20200131 11:52:48.950"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${item}</arg>
</arguments>
<msg timestamp="20200131 11:52:48.950" level="TRACE">Arguments: [ 'a' ]</msg>
<msg timestamp="20200131 11:52:48.950" level="INFO">a</msg>
<msg timestamp="20200131 11:52:48.950" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:52:48.950" endtime="20200131 11:52:48.950"></status>
</kw>
<status status="PASS" starttime="20200131 11:52:48.949" endtime="20200131 11:52:48.950"></status>
</kw>
<kw name="${item} = b" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$item == 'EXIT'</arg>
<arg>Exit For Loop</arg>
</arguments>
<msg timestamp="20200131 11:52:48.950" level="TRACE">Arguments: [ "$item == 'EXIT'" | 'Exit For Loop' ]</msg>
<msg timestamp="20200131 11:52:48.953" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:52:48.950" endtime="20200131 11:52:48.953"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${item}</arg>
</arguments>
<msg timestamp="20200131 11:52:48.953" level="TRACE">Arguments: [ 'b' ]</msg>
<msg timestamp="20200131 11:52:48.953" level="INFO">b</msg>
<msg timestamp="20200131 11:52:48.953" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:52:48.953" endtime="20200131 11:52:48.953"></status>
</kw>
<status status="PASS" starttime="20200131 11:52:48.950" endtime="20200131 11:52:48.953"></status>
</kw>
<kw name="${item} = c" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$item == 'EXIT'</arg>
<arg>Exit For Loop</arg>
</arguments>
<msg timestamp="20200131 11:52:48.953" level="TRACE">Arguments: [ "$item == 'EXIT'" | 'Exit For Loop' ]</msg>
<msg timestamp="20200131 11:52:48.958" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:52:48.953" endtime="20200131 11:52:48.958"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${item}</arg>
</arguments>
<msg timestamp="20200131 11:52:48.958" level="TRACE">Arguments: [ 'c' ]</msg>
<msg timestamp="20200131 11:52:48.958" level="INFO">c</msg>
<msg timestamp="20200131 11:52:48.958" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:52:48.958" endtime="20200131 11:52:48.958"></status>
</kw>
<status status="PASS" starttime="20200131 11:52:48.953" endtime="20200131 11:52:48.958"></status>
</kw>
<kw name="${item} = EXIT" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$item == 'EXIT'</arg>
<arg>Exit For Loop</arg>
</arguments>
<msg timestamp="20200131 11:52:48.958" level="TRACE">Arguments: [ "$item == 'EXIT'" | 'Exit For Loop' ]</msg>
<kw name="Exit For Loop" library="BuiltIn">
<doc>Stops executing the enclosing for loop.</doc>
<msg timestamp="20200131 11:52:48.959" level="TRACE">Arguments: [  ]</msg>
<msg timestamp="20200131 11:52:48.959" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20200131 11:52:48.959" endtime="20200131 11:52:48.959"></status>
</kw>
<status status="PASS" starttime="20200131 11:52:48.958" endtime="20200131 11:52:48.959"></status>
</kw>
<status status="PASS" starttime="20200131 11:52:48.958" endtime="20200131 11:52:48.959"></status>
</kw>
<status status="PASS" starttime="20200131 11:52:48.949" endtime="20200131 11:52:48.959"></status>
</kw>
<status status="PASS" starttime="20200131 11:52:48.947" endtime="20200131 11:52:48.959" critical="yes"></status>
</test>
<test id="s1-s1-t18" name="Use &quot;Fail&quot;">
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>This test case must fail bcoz it uses Fail keyword</arg>
<arg>-tag-to-be-removed</arg>
</arguments>
<msg timestamp="20200131 11:52:48.960" level="TRACE">Arguments: [ 'This test case must fail bcoz it uses Fail keyword' | '-tag-to-be-removed' ]</msg>
<msg timestamp="20200131 11:52:48.960" level="INFO">Removed tag 'tag-to-be-removed'.</msg>
<msg timestamp="20200131 11:52:48.961" level="FAIL">This test case must fail bcoz it uses Fail keyword</msg>
<msg timestamp="20200131 11:52:48.961" level="DEBUG">Traceback (most recent call last):
  None</msg>
<status status="FAIL" starttime="20200131 11:52:48.960" endtime="20200131 11:52:48.961"></status>
</kw>
<doc>Fails the test with the given message and optionally alters its tags ?</doc>
<tags>
<tag>failure-expected</tag>
</tags>
<status status="FAIL" starttime="20200131 11:52:48.960" endtime="20200131 11:52:48.962" critical="no">This test case must fail bcoz it uses Fail keyword</status>
</test>
<test id="s1-s1-t19" name="Use &quot;Get Count&quot;">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>Lorem Ipsum Lorem Ipsum Lorem</arg>
</arguments>
<assign>
<var>${item1}</var>
</assign>
<msg timestamp="20200131 11:52:48.964" level="TRACE">Arguments: [ 'Lorem Ipsum Lorem Ipsum Lorem' ]</msg>
<msg timestamp="20200131 11:52:48.964" level="TRACE">Return: 'Lorem Ipsum Lorem Ipsum Lorem'</msg>
<msg timestamp="20200131 11:52:48.964" level="INFO">${item1} = Lorem Ipsum Lorem Ipsum Lorem</msg>
<status status="PASS" starttime="20200131 11:52:48.964" endtime="20200131 11:52:48.964"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>Ipsum</arg>
</arguments>
<assign>
<var>${item2}</var>
</assign>
<msg timestamp="20200131 11:52:48.964" level="TRACE">Arguments: [ 'Ipsum' ]</msg>
<msg timestamp="20200131 11:52:48.964" level="TRACE">Return: 'Ipsum'</msg>
<msg timestamp="20200131 11:52:48.964" level="INFO">${item2} = Ipsum</msg>
<status status="PASS" starttime="20200131 11:52:48.964" endtime="20200131 11:52:48.964"></status>
</kw>
<kw name="Get Count" library="BuiltIn">
<doc>Returns and logs how many times ``item2`` is found from ``item1``.</doc>
<arguments>
<arg>item1=${item1}</arg>
<arg>item2=${item2}</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg timestamp="20200131 11:52:48.964" level="TRACE">Arguments: [ item1='Lorem Ipsum Lorem Ipsum Lorem' | item2='Ipsum' ]</msg>
<msg timestamp="20200131 11:52:48.964" level="INFO">Item found from the first item 2 times</msg>
<msg timestamp="20200131 11:52:48.964" level="TRACE">Return: 2</msg>
<msg timestamp="20200131 11:52:48.964" level="INFO">${count} = 2</msg>
<status status="PASS" starttime="20200131 11:52:48.964" endtime="20200131 11:52:48.964"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${count}</arg>
<arg>${2}</arg>
</arguments>
<msg timestamp="20200131 11:52:48.966" level="TRACE">Arguments: [ 2 | 2 ]</msg>
<msg timestamp="20200131 11:52:48.966" level="DEBUG">Argument types are:
&lt;class 'int'&gt;
&lt;class 'int'&gt;</msg>
<msg timestamp="20200131 11:52:48.966" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:52:48.966" endtime="20200131 11:52:48.967"></status>
</kw>
<kw name="Get List" library="Utils">
<assign>
<var>@{list}</var>
</assign>
<msg timestamp="20200131 11:52:48.967" level="TRACE">Arguments: [  ]</msg>
<msg timestamp="20200131 11:52:48.967" level="TRACE">Return: ['a', 'b', 'a', 'c', 1, 0, 3, 1, 2, 1]</msg>
<msg timestamp="20200131 11:52:48.967" level="INFO">@{list} = [ a | b | a | c | 1 | 0 | 3 | 1 | 2 | 1 ]</msg>
<status status="PASS" starttime="20200131 11:52:48.967" endtime="20200131 11:52:48.967"></status>
</kw>
<kw name="Get Count" library="BuiltIn">
<doc>Returns and logs how many times ``item2`` is found from ``item1``.</doc>
<arguments>
<arg>item1=${list}</arg>
<arg>item2=a</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg timestamp="20200131 11:52:48.967" level="TRACE">Arguments: [ item1=['a', 'b', 'a', 'c', 1, 0, 3, 1, 2, 1] | item2='a' ]</msg>
<msg timestamp="20200131 11:52:48.967" level="INFO">Item found from the first item 2 times</msg>
<msg timestamp="20200131 11:52:48.967" level="TRACE">Return: 2</msg>
<msg timestamp="20200131 11:52:48.967" level="INFO">${count} = 2</msg>
<status status="PASS" starttime="20200131 11:52:48.967" endtime="20200131 11:52:48.967"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${count}</arg>
<arg>${2}</arg>
</arguments>
<msg timestamp="20200131 11:52:48.969" level="TRACE">Arguments: [ 2 | 2 ]</msg>
<msg timestamp="20200131 11:52:48.969" level="DEBUG">Argument types are:
&lt;class 'int'&gt;
&lt;class 'int'&gt;</msg>
<msg timestamp="20200131 11:52:48.969" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:52:48.969" endtime="20200131 11:52:48.969"></status>
</kw>
<kw name="Get Count" library="BuiltIn">
<doc>Returns and logs how many times ``item2`` is found from ``item1``.</doc>
<arguments>
<arg>item1=${list}</arg>
<arg>item2=${1}</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg timestamp="20200131 11:52:48.969" level="TRACE">Arguments: [ item1=['a', 'b', 'a', 'c', 1, 0, 3, 1, 2, 1] | item2=1 ]</msg>
<msg timestamp="20200131 11:52:48.969" level="INFO">Item found from the first item 3 times</msg>
<msg timestamp="20200131 11:52:48.969" level="TRACE">Return: 3</msg>
<msg timestamp="20200131 11:52:48.970" level="INFO">${count} = 3</msg>
<status status="PASS" starttime="20200131 11:52:48.969" endtime="20200131 11:52:48.970"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${count}</arg>
<arg>${3}</arg>
</arguments>
<msg timestamp="20200131 11:52:48.970" level="TRACE">Arguments: [ 3 | 3 ]</msg>
<msg timestamp="20200131 11:52:48.970" level="DEBUG">Argument types are:
&lt;class 'int'&gt;
&lt;class 'int'&gt;</msg>
<msg timestamp="20200131 11:52:48.970" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:52:48.970" endtime="20200131 11:52:48.970"></status>
</kw>
<kw name="Get Tuple" library="Utils">
<assign>
<var>${tuple}</var>
</assign>
<msg timestamp="20200131 11:52:48.972" level="TRACE">Arguments: [  ]</msg>
<msg timestamp="20200131 11:52:48.972" level="TRACE">Return: ('a', 'b', 'a', 'c', 1, 0, 3, 1, 2, 1)</msg>
<msg timestamp="20200131 11:52:48.972" level="INFO">${tuple} = ('a', 'b', 'a', 'c', 1, 0, 3, 1, 2, 1)</msg>
<status status="PASS" starttime="20200131 11:52:48.972" endtime="20200131 11:52:48.972"></status>
</kw>
<kw name="Get Count" library="BuiltIn">
<doc>Returns and logs how many times ``item2`` is found from ``item1``.</doc>
<arguments>
<arg>item1=${tuple}</arg>
<arg>item2=a</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg timestamp="20200131 11:52:48.972" level="TRACE">Arguments: [ item1=('a', 'b', 'a', 'c', 1, 0, 3, 1, 2, 1) | item2='a' ]</msg>
<msg timestamp="20200131 11:52:48.973" level="INFO">Item found from the first item 2 times</msg>
<msg timestamp="20200131 11:52:48.973" level="TRACE">Return: 2</msg>
<msg timestamp="20200131 11:52:48.973" level="INFO">${count} = 2</msg>
<status status="PASS" starttime="20200131 11:52:48.972" endtime="20200131 11:52:48.973"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${count}</arg>
<arg>${2}</arg>
</arguments>
<msg timestamp="20200131 11:52:48.974" level="TRACE">Arguments: [ 2 | 2 ]</msg>
<msg timestamp="20200131 11:52:48.974" level="DEBUG">Argument types are:
&lt;class 'int'&gt;
&lt;class 'int'&gt;</msg>
<msg timestamp="20200131 11:52:48.974" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:52:48.974" endtime="20200131 11:52:48.974"></status>
</kw>
<kw name="Get Count" library="BuiltIn">
<doc>Returns and logs how many times ``item2`` is found from ``item1``.</doc>
<arguments>
<arg>item1=${tuple}</arg>
<arg>item2=${1}</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg timestamp="20200131 11:52:48.978" level="TRACE">Arguments: [ item1=('a', 'b', 'a', 'c', 1, 0, 3, 1, 2, 1) | item2=1 ]</msg>
<msg timestamp="20200131 11:52:48.978" level="INFO">Item found from the first item 3 times</msg>
<msg timestamp="20200131 11:52:48.978" level="TRACE">Return: 3</msg>
<msg timestamp="20200131 11:52:48.978" level="INFO">${count} = 3</msg>
<status status="PASS" starttime="20200131 11:52:48.977" endtime="20200131 11:52:48.978"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${count}</arg>
<arg>${3}</arg>
</arguments>
<msg timestamp="20200131 11:52:48.978" level="TRACE">Arguments: [ 3 | 3 ]</msg>
<msg timestamp="20200131 11:52:48.978" level="DEBUG">Argument types are:
&lt;class 'int'&gt;
&lt;class 'int'&gt;</msg>
<msg timestamp="20200131 11:52:48.978" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:52:48.978" endtime="20200131 11:52:48.978"></status>
</kw>
<doc>Get Count item1, item2
Returns and logs how many times item2 is found from item1
This keyword works with Python strings and lists and
all objects that either have count method or can be converted to Python lists.</doc>
<status status="PASS" starttime="20200131 11:52:48.962" endtime="20200131 11:52:48.978" critical="yes"></status>
</test>
<test id="s1-s1-t20" name="Use &quot;Get Length&quot;">
<kw name="Get List" library="Utils">
<assign>
<var>@{list}</var>
</assign>
<msg timestamp="20200131 11:52:48.979" level="TRACE">Arguments: [  ]</msg>
<msg timestamp="20200131 11:52:48.979" level="TRACE">Return: ['a', 'b', 'a', 'c', 1, 0, 3, 1, 2, 1]</msg>
<msg timestamp="20200131 11:52:48.979" level="INFO">@{list} = [ a | b | a | c | 1 | 0 | 3 | 1 | 2 | 1 ]</msg>
<status status="PASS" starttime="20200131 11:52:48.979" endtime="20200131 11:52:48.979"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>item=${list}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg timestamp="20200131 11:52:48.979" level="TRACE">Arguments: [ item=['a', 'b', 'a', 'c', 1, 0, 3, 1, 2, 1] ]</msg>
<msg timestamp="20200131 11:52:48.979" level="INFO">Length is 10</msg>
<msg timestamp="20200131 11:52:48.979" level="TRACE">Return: 10</msg>
<msg timestamp="20200131 11:52:48.979" level="INFO">${length} = 10</msg>
<status status="PASS" starttime="20200131 11:52:48.979" endtime="20200131 11:52:48.979"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${length}</arg>
<arg>${10}</arg>
</arguments>
<msg timestamp="20200131 11:52:48.980" level="TRACE">Arguments: [ 10 | 10 ]</msg>
<msg timestamp="20200131 11:52:48.980" level="DEBUG">Argument types are:
&lt;class 'int'&gt;
&lt;class 'int'&gt;</msg>
<msg timestamp="20200131 11:52:48.980" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:52:48.979" endtime="20200131 11:52:48.980"></status>
</kw>
<kw name="Get String Wrapper" library="Utils">
<arguments>
<arg>I am a string of length 26</arg>
</arguments>
<assign>
<var>${string_wrapper}</var>
</assign>
<msg timestamp="20200131 11:52:48.980" level="TRACE">Arguments: [ 'I am a string of length 26' ]</msg>
<msg timestamp="20200131 11:52:48.980" level="TRACE">Return: &lt;Utils.StringUtils object at 0x7fd4ff617b50&gt;</msg>
<msg timestamp="20200131 11:52:48.980" level="INFO">${string_wrapper} = &lt;Utils.StringUtils object at 0x7fd4ff617b50&gt;</msg>
<status status="PASS" starttime="20200131 11:52:48.980" endtime="20200131 11:52:48.980"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>item=${string_wrapper}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg timestamp="20200131 11:52:48.980" level="TRACE">Arguments: [ item=&lt;Utils.StringUtils object at 0x7fd4ff617b50&gt; ]</msg>
<msg timestamp="20200131 11:52:48.980" level="INFO">Length is 26</msg>
<msg timestamp="20200131 11:52:48.980" level="TRACE">Return: 26</msg>
<msg timestamp="20200131 11:52:48.980" level="INFO">${length} = 26</msg>
<status status="PASS" starttime="20200131 11:52:48.980" endtime="20200131 11:52:48.980"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${length}</arg>
<arg>${26}</arg>
</arguments>
<msg timestamp="20200131 11:52:48.981" level="TRACE">Arguments: [ 26 | 26 ]</msg>
<msg timestamp="20200131 11:52:48.981" level="DEBUG">Argument types are:
&lt;class 'int'&gt;
&lt;class 'int'&gt;</msg>
<msg timestamp="20200131 11:52:48.981" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:52:48.980" endtime="20200131 11:52:48.981"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>item=${utility_object}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg timestamp="20200131 11:52:48.982" level="TRACE">Arguments: [ item=&lt;Utils.Util object at 0x7fd4ff6bfe90&gt; ]</msg>
<msg timestamp="20200131 11:52:48.982" level="INFO">Length is 5</msg>
<msg timestamp="20200131 11:52:48.982" level="TRACE">Return: 5</msg>
<msg timestamp="20200131 11:52:48.982" level="INFO">${length} = 5</msg>
<status status="PASS" starttime="20200131 11:52:48.982" endtime="20200131 11:52:48.982"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${length}</arg>
<arg>${5}</arg>
</arguments>
<msg timestamp="20200131 11:52:48.983" level="TRACE">Arguments: [ 5 | 5 ]</msg>
<msg timestamp="20200131 11:52:48.983" level="DEBUG">Argument types are:
&lt;class 'int'&gt;
&lt;class 'int'&gt;</msg>
<msg timestamp="20200131 11:52:48.983" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:52:48.983" endtime="20200131 11:52:48.983"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${3}</arg>
</arguments>
<assign>
<var>${integer}</var>
</assign>
<msg timestamp="20200131 11:52:48.983" level="TRACE">Arguments: [ 3 ]</msg>
<msg timestamp="20200131 11:52:48.983" level="TRACE">Return: 3</msg>
<msg timestamp="20200131 11:52:48.983" level="INFO">${integer} = 3</msg>
<status status="PASS" starttime="20200131 11:52:48.983" endtime="20200131 11:52:48.984"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>item=${integer}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg timestamp="20200131 11:52:48.984" level="TRACE">Arguments: [ item=3 ]</msg>
<msg timestamp="20200131 11:52:48.984" level="FAIL">Could not get length of '3'.</msg>
<msg timestamp="20200131 11:52:48.984" level="DEBUG">Traceback (most recent call last):
  None</msg>
<status status="FAIL" starttime="20200131 11:52:48.984" endtime="20200131 11:52:48.984"></status>
</kw>
<doc>Get Length item
Returns and logs the length of the given item as an integer</doc>
<tags>
<tag>failure-expected</tag>
</tags>
<status status="FAIL" starttime="20200131 11:52:48.978" endtime="20200131 11:52:48.984" critical="no">Could not get length of '3'.</status>
</test>
<test id="s1-s1-t21" name="Use &quot;Get Library Instance&quot; In Python">
<kw name="Get Library Instance" library="BuiltIn">
<doc>Returns the currently active instance of the specified test library.</doc>
<arguments>
<arg>all=True</arg>
</arguments>
<assign>
<var>&amp;{all robot libs}</var>
</assign>
<msg timestamp="20200131 11:52:48.986" level="TRACE">Arguments: [ all=True ]</msg>
<msg timestamp="20200131 11:52:48.986" level="TRACE">Return: {'BuiltIn': &lt;robot.libraries.BuiltIn.BuiltIn object at 0x7fd4ffaee310&gt;,
 'Easter': &lt;module 'robot.libraries.Easter' from '/home/hakan/anaconda3/lib/python3.7/site-packages/robot/libraries/Easter.py'&gt;,
 'LibraryOneHavingAConflictingKeyword': &lt;LibraryOneHavingAConflictingKeyword.LibraryOneHavingAConflictingKeyword object at 0x7fd4ffbc0ad0&gt;,
 'LibraryTwoHavingAConflictingKeyword': &lt;LibraryTwoHavingAConflictingKeyword.LibraryTwoHavingAConflictingKeyword object at 0x7fd4ffbc0990&gt;,
 'Reserved': &lt;robot.libraries.Reserved.Reserved object at 0x7fd4ffa41350&gt;,
 'SeleniumLibrary': &lt;SeleniumLibrary.SeleniumLibrary object at 0x7fd4ff9fd390&gt;,
 'Utils': &lt;module 'Utils' from '/home/hakan/Python/Robot/robot-fw-built-in-library-tests/Tests/Utils.py'&gt;}</msg>
<msg timestamp="20200131 11:52:48.987" level="INFO">&amp;{all robot libs} = { BuiltIn=&lt;robot.libraries.BuiltIn.BuiltIn object at 0x7fd4ffaee310&gt; | Reserved=&lt;robot.libraries.Reserved.Reserved object at 0x7fd4ffa41350&gt; | Easter=&lt;module 'robot.libraries.Easter' from '/home/hakan...</msg>
<status status="PASS" starttime="20200131 11:52:48.986" endtime="20200131 11:52:48.987"></status>
</kw>
<kw name="${item} IN [ @{all robot libs} ]" type="for">
<kw name="${item} = BuiltIn" type="foritem">
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${item}</arg>
<arg>${all robot libs}[${item}]</arg>
</arguments>
<msg timestamp="20200131 11:52:48.988" level="TRACE">Arguments: [ '${item}' | '${all robot libs}[${item}]' ]</msg>
<msg timestamp="20200131 11:52:48.988" level="INFO">BuiltIn</msg>
<msg timestamp="20200131 11:52:48.988" level="INFO">&lt;robot.libraries.BuiltIn.BuiltIn object at 0x7fd4ffaee310&gt;</msg>
<msg timestamp="20200131 11:52:48.988" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:52:48.987" endtime="20200131 11:52:48.988"></status>
</kw>
<status status="PASS" starttime="20200131 11:52:48.987" endtime="20200131 11:52:48.988"></status>
</kw>
<kw name="${item} = Reserved" type="foritem">
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${item}</arg>
<arg>${all robot libs}[${item}]</arg>
</arguments>
<msg timestamp="20200131 11:52:48.988" level="TRACE">Arguments: [ '${item}' | '${all robot libs}[${item}]' ]</msg>
<msg timestamp="20200131 11:52:48.988" level="INFO">Reserved</msg>
<msg timestamp="20200131 11:52:48.988" level="INFO">&lt;robot.libraries.Reserved.Reserved object at 0x7fd4ffa41350&gt;</msg>
<msg timestamp="20200131 11:52:48.988" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:52:48.988" endtime="20200131 11:52:48.988"></status>
</kw>
<status status="PASS" starttime="20200131 11:52:48.988" endtime="20200131 11:52:48.988"></status>
</kw>
<kw name="${item} = Easter" type="foritem">
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${item}</arg>
<arg>${all robot libs}[${item}]</arg>
</arguments>
<msg timestamp="20200131 11:52:48.988" level="TRACE">Arguments: [ '${item}' | '${all robot libs}[${item}]' ]</msg>
<msg timestamp="20200131 11:52:48.988" level="INFO">Easter</msg>
<msg timestamp="20200131 11:52:48.989" level="INFO">&lt;module 'robot.libraries.Easter' from '/home/hakan/anaconda3/lib/python3.7/site-packages/robot/libraries/Easter.py'&gt;</msg>
<msg timestamp="20200131 11:52:48.989" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:52:48.988" endtime="20200131 11:52:48.989"></status>
</kw>
<status status="PASS" starttime="20200131 11:52:48.988" endtime="20200131 11:52:48.989"></status>
</kw>
<kw name="${item} = SeleniumLibrary" type="foritem">
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${item}</arg>
<arg>${all robot libs}[${item}]</arg>
</arguments>
<msg timestamp="20200131 11:52:48.989" level="TRACE">Arguments: [ '${item}' | '${all robot libs}[${item}]' ]</msg>
<msg timestamp="20200131 11:52:48.989" level="INFO">SeleniumLibrary</msg>
<msg timestamp="20200131 11:52:48.989" level="INFO">&lt;SeleniumLibrary.SeleniumLibrary object at 0x7fd4ff9fd390&gt;</msg>
<msg timestamp="20200131 11:52:48.989" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:52:48.989" endtime="20200131 11:52:48.989"></status>
</kw>
<status status="PASS" starttime="20200131 11:52:48.989" endtime="20200131 11:52:48.989"></status>
</kw>
<kw name="${item} = Utils" type="foritem">
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${item}</arg>
<arg>${all robot libs}[${item}]</arg>
</arguments>
<msg timestamp="20200131 11:52:48.989" level="TRACE">Arguments: [ '${item}' | '${all robot libs}[${item}]' ]</msg>
<msg timestamp="20200131 11:52:48.989" level="INFO">Utils</msg>
<msg timestamp="20200131 11:52:48.989" level="INFO">&lt;module 'Utils' from '/home/hakan/Python/Robot/robot-fw-built-in-library-tests/Tests/Utils.py'&gt;</msg>
<msg timestamp="20200131 11:52:48.989" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:52:48.989" endtime="20200131 11:52:48.989"></status>
</kw>
<status status="PASS" starttime="20200131 11:52:48.989" endtime="20200131 11:52:48.989"></status>
</kw>
<kw name="${item} = LibraryOneHavingAConflictingKeyword" type="foritem">
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${item}</arg>
<arg>${all robot libs}[${item}]</arg>
</arguments>
<msg timestamp="20200131 11:52:48.990" level="TRACE">Arguments: [ '${item}' | '${all robot libs}[${item}]' ]</msg>
<msg timestamp="20200131 11:52:48.994" level="INFO">LibraryOneHavingAConflictingKeyword</msg>
<msg timestamp="20200131 11:52:48.994" level="INFO">&lt;LibraryOneHavingAConflictingKeyword.LibraryOneHavingAConflictingKeyword object at 0x7fd4ffbc0ad0&gt;</msg>
<msg timestamp="20200131 11:52:48.994" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:52:48.989" endtime="20200131 11:52:48.994"></status>
</kw>
<status status="PASS" starttime="20200131 11:52:48.989" endtime="20200131 11:52:48.994"></status>
</kw>
<kw name="${item} = LibraryTwoHavingAConflictingKeyword" type="foritem">
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${item}</arg>
<arg>${all robot libs}[${item}]</arg>
</arguments>
<msg timestamp="20200131 11:52:48.994" level="TRACE">Arguments: [ '${item}' | '${all robot libs}[${item}]' ]</msg>
<msg timestamp="20200131 11:52:48.994" level="INFO">LibraryTwoHavingAConflictingKeyword</msg>
<msg timestamp="20200131 11:52:48.994" level="INFO">&lt;LibraryTwoHavingAConflictingKeyword.LibraryTwoHavingAConflictingKeyword object at 0x7fd4ffbc0990&gt;</msg>
<msg timestamp="20200131 11:52:48.994" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:52:48.994" endtime="20200131 11:52:48.994"></status>
</kw>
<status status="PASS" starttime="20200131 11:52:48.994" endtime="20200131 11:52:48.994"></status>
</kw>
<status status="PASS" starttime="20200131 11:52:48.987" endtime="20200131 11:52:48.995"></status>
</kw>
<kw name="Title Should Start With" library="Utils">
<arguments>
<arg>Title does not start with me</arg>
</arguments>
<assign>
<var>${is_starting}</var>
</assign>
<msg timestamp="20200131 11:52:48.995" level="TRACE">Arguments: [ 'Title does not start with me' ]</msg>
<msg timestamp="20200131 11:52:48.995" level="INFO">Opening browser 'firefox' to base url 'https://robotframework.org/#libraries'.</msg>
<msg timestamp="20200131 11:52:48.999" level="INFO">Firefox driver log is always forced to to: /home/hakan/Python/Robot/robot-fw-built-in-library-tests/Results/geckodriver-3.log</msg>
<msg timestamp="20200131 11:52:50.012" level="DEBUG">POST http://127.0.0.1:40559/session {"capabilities": {"firstMatch": [{}], "alwaysMatch": {"browserName": "firefox", "acceptInsecureCerts": true, "moz:firefoxOptions": {"profile": "UEsDBBQAAAAIAJleP1A+3NKsfgMAAM0MAAAHAAAAdXNlci5qc6VWTW/UMBC98ytQTyCx1rbABU6lFAkJUcSq4mg59mTjrmMbe7zp/nvGyaYsbb6AWz7e89hvZt44RQjcByhfnBXBNfTGlKtZo61yDVOp9gysKAyos1fPMSR4+f5ZesoxAiGEZE/ApTBxBG2hQVGwFAzhzkThEr4rjLC7sym8F1tYtn5EETB5lhmEXE+jKlfDEblgL49Z3O3p5FoBqyM6266it9YFGFmAPqkb+6MVOJ6vmbYY3O33L9Phc1Jqcc9lFSgwjzJoj5wU56jrHPT1epiwDBnAu4BcGMPvIod7CR61s3Ew6XdiL7plmetgLFau+Wyv6NEZGCRZwMaFHZOCKHtY5XjCrAiw13ImrxFkChoPTMa+HEeAj5PTgJFZr9lSm2IyoZTO5xQzizRQqECHC1zIrCBPlNsUERSXEHBYzRNSjClHfCBp+gBhhtXpwa3IsnLYgx0JJLxnySvqVCYSumEFT0CLWk3p6I04gLo+X2++OqRcEuHNCNg11jihqDAtaRzasvlRgd1k9bXdTse6vv1yyfp2m7SjFvmadVmYsy5td1THYKnsycS6JF/MYcmSOo8cB7uyJPxIpfagAEJlZQBB0k4/6RDxkrSQI230YEOihPaZVFtoiqeMWphGhKV2CiLI6lgWc1BTxuRzc/f2PuajEGO2DiSnJBXayi/J27gMIlYzUSowhskK5O4jlCIZ/ND9mabRDImMjm1v7JVxceYoJ+gbyvgwmBQRnXdmVSsQBqvunS1ytgl+8rlVrv+R3Ucvc0F9T3+/feO22/xRdp7+F/vwzmh5YPnjJhW1bvP8v/xv7cfL3w09tAzs0TkTGTmEC8eNT15f8ugjB2sNtG1rRXPGbnlWfjhG9gjbFm5roh878kYSO7vu+XoUXhgnd0ZHnK6IE0Zb4Feu9mTthTZ5AFq9rdAcZqlLLPwp3JJ/l4fb0UY6GfxTqvajvnP51dEHVzRiMcXhlXtKhUjXtkrH6rDKvz3NxJUBu8VsCRdv3/5J65emqUX5MMY1vDhw1XnC4N48WYzHmLub104Js/DmUWoD9MRc0NQWvKvRfJmawUcMWiJ/TBsKlW+NlqywhrqAsGlfR+TKZb7TyI6y9eP0WMqDB+8pCIYiYDiwTor25Bdz2EmRnsID3LXjbHAn916T7VO2WD4y1QS5PzF+Jh3GIvymNJWmMLmLBhi/AFBLAQIUAxQAAAAIAJleP1A+3NKsfgMAAM0MAAAHAAAAAAAAAAAAAAC0gQAAAAB1c2VyLmpzUEsFBgAAAAABAAEANQAAAKMDAAAAAA=="}}}, "desiredCapabilities": {"browserName": "firefox", "acceptInsecureCerts": true, "marionette": true, "moz:firefoxOptions": {"profile": "UEsDBBQAAAAIAJleP1A+3NKsfgMAAM0MAAAHAAAAdXNlci5qc6VWTW/UMBC98ytQTyCx1rbABU6lFAkJUcSq4mg59mTjrmMbe7zp/nvGyaYsbb6AWz7e89hvZt44RQjcByhfnBXBNfTGlKtZo61yDVOp9gysKAyos1fPMSR4+f5ZesoxAiGEZE/ApTBxBG2hQVGwFAzhzkThEr4rjLC7sym8F1tYtn5EETB5lhmEXE+jKlfDEblgL49Z3O3p5FoBqyM6266it9YFGFmAPqkb+6MVOJ6vmbYY3O33L9Phc1Jqcc9lFSgwjzJoj5wU56jrHPT1epiwDBnAu4BcGMPvIod7CR61s3Ew6XdiL7plmetgLFau+Wyv6NEZGCRZwMaFHZOCKHtY5XjCrAiw13ImrxFkChoPTMa+HEeAj5PTgJFZr9lSm2IyoZTO5xQzizRQqECHC1zIrCBPlNsUERSXEHBYzRNSjClHfCBp+gBhhtXpwa3IsnLYgx0JJLxnySvqVCYSumEFT0CLWk3p6I04gLo+X2++OqRcEuHNCNg11jihqDAtaRzasvlRgd1k9bXdTse6vv1yyfp2m7SjFvmadVmYsy5td1THYKnsycS6JF/MYcmSOo8cB7uyJPxIpfagAEJlZQBB0k4/6RDxkrSQI230YEOihPaZVFtoiqeMWphGhKV2CiLI6lgWc1BTxuRzc/f2PuajEGO2DiSnJBXayi/J27gMIlYzUSowhskK5O4jlCIZ/ND9mabRDImMjm1v7JVxceYoJ+gbyvgwmBQRnXdmVSsQBqvunS1ytgl+8rlVrv+R3Ucvc0F9T3+/feO22/xRdp7+F/vwzmh5YPnjJhW1bvP8v/xv7cfL3w09tAzs0TkTGTmEC8eNT15f8ugjB2sNtG1rRXPGbnlWfjhG9gjbFm5roh878kYSO7vu+XoUXhgnd0ZHnK6IE0Zb4Feu9mTthTZ5AFq9rdAcZqlLLPwp3JJ/l4fb0UY6GfxTqvajvnP51dEHVzRiMcXhlXtKhUjXtkrH6rDKvz3NxJUBu8VsCRdv3/5J65emqUX5MMY1vDhw1XnC4N48WYzHmLub104Js/DmUWoD9MRc0NQWvKvRfJmawUcMWiJ/TBsKlW+NlqywhrqAsGlfR+TKZb7TyI6y9eP0WMqDB+8pCIYiYDiwTor25Bdz2EmRnsID3LXjbHAn916T7VO2WD4y1QS5PzF+Jh3GIvymNJWmMLmLBhi/AFBLAQIUAxQAAAAIAJleP1A+3NKsfgMAAM0MAAAHAAAAAAAAAAAAAAC0gQAAAAB1c2VyLmpzUEsFBgAAAAABAAEANQAAAKMDAAAAAA=="}}}</msg>
<msg timestamp="20200131 11:52:50.012" level="DEBUG">Starting new HTTP connection (1): 127.0.0.1:40559</msg>
<msg timestamp="20200131 11:52:53.630" level="DEBUG">http://127.0.0.1:40559 "POST /session HTTP/1.1" 200 704</msg>
<msg timestamp="20200131 11:52:53.630" level="DEBUG">Finished Request</msg>
<msg timestamp="20200131 11:52:53.630" level="DEBUG">POST http://127.0.0.1:40559/session/ff4576f4-deb4-403a-9dd4-6db1a9fdeaf3/timeouts {"script": 5000}</msg>
<msg timestamp="20200131 11:52:53.639" level="DEBUG">http://127.0.0.1:40559 "POST /session/ff4576f4-deb4-403a-9dd4-6db1a9fdeaf3/timeouts HTTP/1.1" 200 14</msg>
<msg timestamp="20200131 11:52:53.639" level="DEBUG">Finished Request</msg>
<msg timestamp="20200131 11:52:53.639" level="DEBUG">POST http://127.0.0.1:40559/session/ff4576f4-deb4-403a-9dd4-6db1a9fdeaf3/timeouts {"implicit": 0}</msg>
<msg timestamp="20200131 11:52:53.641" level="DEBUG">http://127.0.0.1:40559 "POST /session/ff4576f4-deb4-403a-9dd4-6db1a9fdeaf3/timeouts HTTP/1.1" 200 14</msg>
<msg timestamp="20200131 11:52:53.641" level="DEBUG">Finished Request</msg>
<msg timestamp="20200131 11:52:53.642" level="DEBUG">POST http://127.0.0.1:40559/session/ff4576f4-deb4-403a-9dd4-6db1a9fdeaf3/url {"url": "https://robotframework.org/#libraries"}</msg>
<msg timestamp="20200131 11:53:00.533" level="DEBUG">http://127.0.0.1:40559 "POST /session/ff4576f4-deb4-403a-9dd4-6db1a9fdeaf3/url HTTP/1.1" 200 14</msg>
<msg timestamp="20200131 11:53:00.534" level="DEBUG">Finished Request</msg>
<msg timestamp="20200131 11:53:00.534" level="DEBUG">Opened browser with session id ff4576f4-deb4-403a-9dd4-6db1a9fdeaf3.</msg>
<msg timestamp="20200131 11:53:00.534" level="DEBUG">GET http://127.0.0.1:40559/session/ff4576f4-deb4-403a-9dd4-6db1a9fdeaf3/title {}</msg>
<msg timestamp="20200131 11:53:00.536" level="DEBUG">http://127.0.0.1:40559 "GET /session/ff4576f4-deb4-403a-9dd4-6db1a9fdeaf3/title HTTP/1.1" 200 27</msg>
<msg timestamp="20200131 11:53:00.537" level="DEBUG">Finished Request</msg>
<msg timestamp="20200131 11:53:00.537" level="DEBUG">Closing browser with session id ff4576f4-deb4-403a-9dd4-6db1a9fdeaf3.</msg>
<msg timestamp="20200131 11:53:00.537" level="DEBUG">DELETE http://127.0.0.1:40559/session/ff4576f4-deb4-403a-9dd4-6db1a9fdeaf3 {}</msg>
<msg timestamp="20200131 11:53:25.330" level="DEBUG">http://127.0.0.1:40559 "DELETE /session/ff4576f4-deb4-403a-9dd4-6db1a9fdeaf3 HTTP/1.1" 200 14</msg>
<msg timestamp="20200131 11:53:25.330" level="DEBUG">Finished Request</msg>
<msg timestamp="20200131 11:53:25.332" level="TRACE">Return: False</msg>
<msg timestamp="20200131 11:53:25.332" level="INFO">${is_starting} = False</msg>
<status status="PASS" starttime="20200131 11:52:48.995" endtime="20200131 11:53:25.332"></status>
</kw>
<kw name="Should Be False">
<arguments>
<arg>${is_starting}</arg>
</arguments>
<msg timestamp="20200131 11:53:25.337" level="FAIL">No keyword with name 'Should Be False' found.</msg>
<status status="FAIL" starttime="20200131 11:53:25.337" endtime="20200131 11:53:25.337"></status>
</kw>
<doc>https://robotframework.org/robotframework/latest/libraries/BuiltIn.html#Get%20Library%20Instance</doc>
<tags>
<tag>not-understood</tag>
</tags>
<status status="FAIL" starttime="20200131 11:52:48.986" endtime="20200131 11:53:25.342" critical="yes">No keyword with name 'Should Be False' found.</status>
</test>
<test id="s1-s1-t22" name="Use &quot;Get Time&quot;">
<kw name="Get Time" library="BuiltIn">
<doc>Returns the given time in the requested format.</doc>
<assign>
<var>${time}</var>
</assign>
<msg timestamp="20200131 11:53:25.346" level="TRACE">Arguments: [  ]</msg>
<msg timestamp="20200131 11:53:25.346" level="TRACE">Return: '2020-01-31 11:53:25'</msg>
<msg timestamp="20200131 11:53:25.346" level="INFO">${time} = 2020-01-31 11:53:25</msg>
<status status="PASS" starttime="20200131 11:53:25.346" endtime="20200131 11:53:25.346"></status>
</kw>
<kw name="Get Time" library="BuiltIn">
<doc>Returns the given time in the requested format.</doc>
<arguments>
<arg>format=epoch</arg>
</arguments>
<assign>
<var>${time}</var>
</assign>
<msg timestamp="20200131 11:53:25.347" level="TRACE">Arguments: [ format='epoch' ]</msg>
<msg timestamp="20200131 11:53:25.347" level="TRACE">Return: 1580464405</msg>
<msg timestamp="20200131 11:53:25.347" level="INFO">${time} = 1580464405</msg>
<status status="PASS" starttime="20200131 11:53:25.347" endtime="20200131 11:53:25.347"></status>
</kw>
<kw name="Get Time" library="BuiltIn">
<doc>Returns the given time in the requested format.</doc>
<arguments>
<arg>min month</arg>
</arguments>
<assign>
<var>${month}</var>
<var>${min}</var>
</assign>
<msg timestamp="20200131 11:53:25.347" level="TRACE">Arguments: [ 'min month' ]</msg>
<msg timestamp="20200131 11:53:25.347" level="TRACE">Return: ['01', '53']</msg>
<msg timestamp="20200131 11:53:25.347" level="INFO">${month} = 01</msg>
<msg timestamp="20200131 11:53:25.347" level="INFO">${min} = 53</msg>
<status status="PASS" starttime="20200131 11:53:25.347" endtime="20200131 11:53:25.347"></status>
</kw>
<kw name="Get Time" library="BuiltIn">
<doc>Returns the given time in the requested format.</doc>
<arguments>
<arg>1177654467</arg>
</arguments>
<assign>
<var>${time}</var>
</assign>
<msg timestamp="20200131 11:53:25.347" level="TRACE">Arguments: [ '1177654467' ]</msg>
<msg timestamp="20200131 11:53:25.347" level="TRACE">Return: '2020-01-31 11:53:25'</msg>
<msg timestamp="20200131 11:53:25.348" level="INFO">${time} = 2020-01-31 11:53:25</msg>
<status status="PASS" starttime="20200131 11:53:25.347" endtime="20200131 11:53:25.348"></status>
</kw>
<kw name="Get Time" library="BuiltIn">
<doc>Returns the given time in the requested format.</doc>
<arguments>
<arg>sec</arg>
<arg>2007-04-27 09:14:27</arg>
</arguments>
<assign>
<var>${secs}</var>
</assign>
<msg timestamp="20200131 11:53:25.348" level="TRACE">Arguments: [ 'sec' | '2007-04-27 09:14:27' ]</msg>
<msg timestamp="20200131 11:53:25.348" level="TRACE">Return: '27'</msg>
<msg timestamp="20200131 11:53:25.348" level="INFO">${secs} = 27</msg>
<status status="PASS" starttime="20200131 11:53:25.348" endtime="20200131 11:53:25.348"></status>
</kw>
<kw name="Get Time" library="BuiltIn">
<doc>Returns the given time in the requested format.</doc>
<arguments>
<arg>year</arg>
<arg>NOW</arg>
</arguments>
<assign>
<var>${year}</var>
</assign>
<msg timestamp="20200131 11:53:25.350" level="TRACE">Arguments: [ 'year' | 'NOW' ]</msg>
<msg timestamp="20200131 11:53:25.350" level="TRACE">Return: '2020'</msg>
<msg timestamp="20200131 11:53:25.350" level="INFO">${year} = 2020</msg>
<status status="PASS" starttime="20200131 11:53:25.350" endtime="20200131 11:53:25.350"></status>
</kw>
<kw name="Get Time" library="BuiltIn">
<doc>Returns the given time in the requested format.</doc>
<arguments>
<arg>UTC</arg>
</arguments>
<assign>
<var>${time_in_UTC}</var>
</assign>
<msg timestamp="20200131 11:53:25.350" level="TRACE">Arguments: [ 'UTC' ]</msg>
<msg timestamp="20200131 11:53:25.350" level="TRACE">Return: '2020-01-31 11:53:25'</msg>
<msg timestamp="20200131 11:53:25.350" level="INFO">${time_in_UTC} = 2020-01-31 11:53:25</msg>
<status status="PASS" starttime="20200131 11:53:25.350" endtime="20200131 11:53:25.350"></status>
</kw>
<kw name="Get Time" library="BuiltIn">
<doc>Returns the given time in the requested format.</doc>
<arguments>
<arg>time_=NOW + 1h 2min 3s</arg>
</arguments>
<assign>
<var>${time}</var>
</assign>
<msg timestamp="20200131 11:53:25.350" level="TRACE">Arguments: [ time_='NOW + 1h 2min 3s' ]</msg>
<msg timestamp="20200131 11:53:25.351" level="TRACE">Return: '2020-01-31 12:55:28'</msg>
<msg timestamp="20200131 11:53:25.351" level="INFO">${time} = 2020-01-31 12:55:28</msg>
<status status="PASS" starttime="20200131 11:53:25.350" endtime="20200131 11:53:25.351"></status>
</kw>
<kw name="Get Time" library="BuiltIn">
<doc>Returns the given time in the requested format.</doc>
<arguments>
<arg>format=hour min sec</arg>
<arg>time_=UTC</arg>
</arguments>
<assign>
<var>@{utc}</var>
</assign>
<msg timestamp="20200131 11:53:25.351" level="TRACE">Arguments: [ format='hour min sec' | time_='UTC' ]</msg>
<msg timestamp="20200131 11:53:25.351" level="TRACE">Return: ['09', '53', '25']</msg>
<msg timestamp="20200131 11:53:25.351" level="INFO">@{utc} = [ 09 | 53 | 25 ]</msg>
<status status="PASS" starttime="20200131 11:53:25.351" endtime="20200131 11:53:25.351"></status>
</kw>
<kw name="Get Time" library="BuiltIn">
<doc>Returns the given time in the requested format.</doc>
<arguments>
<arg>format=seconds and year</arg>
</arguments>
<assign>
<var>${year}</var>
<var>${seconds}</var>
</assign>
<msg timestamp="20200131 11:53:25.353" level="TRACE">Arguments: [ format='seconds and year' ]</msg>
<msg timestamp="20200131 11:53:25.353" level="TRACE">Return: ['2020', '25']</msg>
<msg timestamp="20200131 11:53:25.354" level="INFO">${year} = 2020</msg>
<msg timestamp="20200131 11:53:25.354" level="INFO">${seconds} = 25</msg>
<status status="PASS" starttime="20200131 11:53:25.353" endtime="20200131 11:53:25.354"></status>
</kw>
<doc>https://robotframework.org/robotframework/latest/libraries/BuiltIn.html#Get%20Time
Get Time format=timestamp, time_=NOW
Returns the given time in the requested format.
NOTE: DateTime library contains much more flexible keywords for getting the current date and
time and for date and time handling in general.
How time is returned is determined based on the given format string as follows.
Note that all checks are case-insensitive.</doc>
<status status="PASS" starttime="20200131 11:53:25.342" endtime="20200131 11:53:25.354" critical="yes"></status>
</test>
<test id="s1-s1-t23" name="Use &quot;Get Variable Value&quot;">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${5}</arg>
</arguments>
<assign>
<var>${a}</var>
</assign>
<msg timestamp="20200131 11:53:25.355" level="TRACE">Arguments: [ 5 ]</msg>
<msg timestamp="20200131 11:53:25.355" level="TRACE">Return: 5</msg>
<msg timestamp="20200131 11:53:25.355" level="INFO">${a} = 5</msg>
<status status="PASS" starttime="20200131 11:53:25.354" endtime="20200131 11:53:25.355"></status>
</kw>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${a}</arg>
<arg>default value for x</arg>
</arguments>
<assign>
<var>${x}</var>
</assign>
<msg timestamp="20200131 11:53:25.355" level="TRACE">Arguments: [ '${a}' | 'default value for x' ]</msg>
<msg timestamp="20200131 11:53:25.355" level="TRACE">Return: 5</msg>
<msg timestamp="20200131 11:53:25.355" level="INFO">${x} = 5</msg>
<status status="PASS" starttime="20200131 11:53:25.355" endtime="20200131 11:53:25.355"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${x}</arg>
<arg>${5}</arg>
</arguments>
<msg timestamp="20200131 11:53:25.357" level="TRACE">Arguments: [ 5 | 5 ]</msg>
<msg timestamp="20200131 11:53:25.357" level="DEBUG">Argument types are:
&lt;class 'int'&gt;
&lt;class 'int'&gt;</msg>
<msg timestamp="20200131 11:53:25.357" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:25.357" endtime="20200131 11:53:25.357"></status>
</kw>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${does not exist}</arg>
<arg>default value for x</arg>
</arguments>
<assign>
<var>${x}</var>
</assign>
<msg timestamp="20200131 11:53:25.358" level="TRACE">Arguments: [ '${does not exist}' | 'default value for x' ]</msg>
<msg timestamp="20200131 11:53:25.358" level="TRACE">Return: 'default value for x'</msg>
<msg timestamp="20200131 11:53:25.358" level="INFO">${x} = default value for x</msg>
<status status="PASS" starttime="20200131 11:53:25.357" endtime="20200131 11:53:25.358"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${x}</arg>
<arg>default value for x</arg>
</arguments>
<msg timestamp="20200131 11:53:25.362" level="TRACE">Arguments: [ 'default value for x' | 'default value for x' ]</msg>
<msg timestamp="20200131 11:53:25.362" level="DEBUG">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20200131 11:53:25.362" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:25.361" endtime="20200131 11:53:25.362"></status>
</kw>
<doc>Get Variable Value name, default=None
Returns variable value or default if the variable does not exist.</doc>
<status status="PASS" starttime="20200131 11:53:25.354" endtime="20200131 11:53:25.362" critical="yes"></status>
</test>
<test id="s1-s1-t24" name="Use &quot;Get Variables&quot;">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${5}</arg>
</arguments>
<assign>
<var>${a}</var>
</assign>
<msg timestamp="20200131 11:53:25.363" level="TRACE">Arguments: [ 5 ]</msg>
<msg timestamp="20200131 11:53:25.363" level="TRACE">Return: 5</msg>
<msg timestamp="20200131 11:53:25.363" level="INFO">${a} = 5</msg>
<status status="PASS" starttime="20200131 11:53:25.363" endtime="20200131 11:53:25.363"></status>
</kw>
<kw name="Get Variables" library="BuiltIn">
<doc>Returns a dictionary containing all variables in the current scope.</doc>
<assign>
<var>${variables_dict}</var>
</assign>
<msg timestamp="20200131 11:53:25.363" level="TRACE">Arguments: [  ]</msg>
<msg timestamp="20200131 11:53:25.364" level="TRACE">Return: &lt;robot.utils.normalizing.NormalizedDict object at 0x7fd50125a2d0&gt;</msg>
<msg timestamp="20200131 11:53:25.364" level="INFO">${variables_dict} = {'${/}': '/', '${:}': ':', '${\\n}': '\n', '${add_multiple_values}': &lt;function add_multiple_values at 0x7fd4ff64d320&gt;, '${a}': 5, '${BuiltIn}': &lt;class 'robot.libraries.BuiltIn.BuiltIn'&gt;, '${DEBUG_FILE...</msg>
<status status="PASS" starttime="20200131 11:53:25.363" endtime="20200131 11:53:25.364"></status>
</kw>
<kw name="Log &quot;Key: Value&quot; Pairs">
<arguments>
<arg>${variables_dict}</arg>
</arguments>
<msg timestamp="20200131 11:53:25.366" level="TRACE">Arguments: [ ${variables_dict}=&lt;robot.utils.normalizing.NormalizedDict object at 0x7fd50125a2d0&gt; ]</msg>
<kw name="${key} IN [ @{variables_dict} ]" type="for">
<kw name="${key} = ${/}" type="foritem">
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${key}</arg>
<arg>${variables_dict}[${key}]</arg>
</arguments>
<msg timestamp="20200131 11:53:25.366" level="TRACE">Arguments: [ '${key}' | '${variables_dict}[${key}]' ]</msg>
<msg timestamp="20200131 11:53:25.366" level="INFO">${/}</msg>
<msg timestamp="20200131 11:53:25.366" level="INFO">/</msg>
<msg timestamp="20200131 11:53:25.366" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:25.366" endtime="20200131 11:53:25.367"></status>
</kw>
<status status="PASS" starttime="20200131 11:53:25.366" endtime="20200131 11:53:25.367"></status>
</kw>
<kw name="${key} = ${:}" type="foritem">
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${key}</arg>
<arg>${variables_dict}[${key}]</arg>
</arguments>
<msg timestamp="20200131 11:53:25.367" level="TRACE">Arguments: [ '${key}' | '${variables_dict}[${key}]' ]</msg>
<msg timestamp="20200131 11:53:25.367" level="INFO">${:}</msg>
<msg timestamp="20200131 11:53:25.367" level="INFO">:</msg>
<msg timestamp="20200131 11:53:25.367" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:25.367" endtime="20200131 11:53:25.367"></status>
</kw>
<status status="PASS" starttime="20200131 11:53:25.367" endtime="20200131 11:53:25.367"></status>
</kw>
<kw name="${key} = ${\n}" type="foritem">
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${key}</arg>
<arg>${variables_dict}[${key}]</arg>
</arguments>
<msg timestamp="20200131 11:53:25.367" level="TRACE">Arguments: [ '${key}' | '${variables_dict}[${key}]' ]</msg>
<msg timestamp="20200131 11:53:25.367" level="INFO">${\n}</msg>
<msg timestamp="20200131 11:53:25.367" level="INFO">
</msg>
<msg timestamp="20200131 11:53:25.367" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:25.367" endtime="20200131 11:53:25.367"></status>
</kw>
<status status="PASS" starttime="20200131 11:53:25.367" endtime="20200131 11:53:25.367"></status>
</kw>
<kw name="${key} = ${add_multiple_values}" type="foritem">
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${key}</arg>
<arg>${variables_dict}[${key}]</arg>
</arguments>
<msg timestamp="20200131 11:53:25.367" level="TRACE">Arguments: [ '${key}' | '${variables_dict}[${key}]' ]</msg>
<msg timestamp="20200131 11:53:25.367" level="INFO">${add_multiple_values}</msg>
<msg timestamp="20200131 11:53:25.368" level="INFO">&lt;function add_multiple_values at 0x7fd4ff64d320&gt;</msg>
<msg timestamp="20200131 11:53:25.368" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:25.367" endtime="20200131 11:53:25.368"></status>
</kw>
<status status="PASS" starttime="20200131 11:53:25.367" endtime="20200131 11:53:25.368"></status>
</kw>
<kw name="${key} = ${a}" type="foritem">
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${key}</arg>
<arg>${variables_dict}[${key}]</arg>
</arguments>
<msg timestamp="20200131 11:53:25.368" level="TRACE">Arguments: [ '${key}' | '${variables_dict}[${key}]' ]</msg>
<msg timestamp="20200131 11:53:25.368" level="INFO">${a}</msg>
<msg timestamp="20200131 11:53:25.368" level="INFO">5</msg>
<msg timestamp="20200131 11:53:25.368" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:25.368" endtime="20200131 11:53:25.368"></status>
</kw>
<status status="PASS" starttime="20200131 11:53:25.368" endtime="20200131 11:53:25.368"></status>
</kw>
<kw name="${key} = ${BuiltIn}" type="foritem">
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${key}</arg>
<arg>${variables_dict}[${key}]</arg>
</arguments>
<msg timestamp="20200131 11:53:25.368" level="TRACE">Arguments: [ '${key}' | '${variables_dict}[${key}]' ]</msg>
<msg timestamp="20200131 11:53:25.368" level="INFO">${BuiltIn}</msg>
<msg timestamp="20200131 11:53:25.368" level="INFO">&lt;class 'robot.libraries.BuiltIn.BuiltIn'&gt;</msg>
<msg timestamp="20200131 11:53:25.368" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:25.368" endtime="20200131 11:53:25.369"></status>
</kw>
<status status="PASS" starttime="20200131 11:53:25.368" endtime="20200131 11:53:25.369"></status>
</kw>
<kw name="${key} = ${DEBUG_FILE}" type="foritem">
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${key}</arg>
<arg>${variables_dict}[${key}]</arg>
</arguments>
<msg timestamp="20200131 11:53:25.369" level="TRACE">Arguments: [ '${key}' | '${variables_dict}[${key}]' ]</msg>
<msg timestamp="20200131 11:53:25.373" level="INFO">${DEBUG_FILE}</msg>
<msg timestamp="20200131 11:53:25.373" level="INFO">NONE</msg>
<msg timestamp="20200131 11:53:25.373" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:25.369" endtime="20200131 11:53:25.373"></status>
</kw>
<status status="PASS" starttime="20200131 11:53:25.369" endtime="20200131 11:53:25.373"></status>
</kw>
<kw name="${key} = ${EXECDIR}" type="foritem">
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${key}</arg>
<arg>${variables_dict}[${key}]</arg>
</arguments>
<msg timestamp="20200131 11:53:25.374" level="TRACE">Arguments: [ '${key}' | '${variables_dict}[${key}]' ]</msg>
<msg timestamp="20200131 11:53:25.374" level="INFO">${EXECDIR}</msg>
<msg timestamp="20200131 11:53:25.374" level="INFO">/home/hakan/Python/Robot/robot-fw-built-in-library-tests</msg>
<msg timestamp="20200131 11:53:25.374" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:25.374" endtime="20200131 11:53:25.374"></status>
</kw>
<status status="PASS" starttime="20200131 11:53:25.374" endtime="20200131 11:53:25.374"></status>
</kw>
<kw name="${key} = ${False}" type="foritem">
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${key}</arg>
<arg>${variables_dict}[${key}]</arg>
</arguments>
<msg timestamp="20200131 11:53:25.374" level="TRACE">Arguments: [ '${key}' | '${variables_dict}[${key}]' ]</msg>
<msg timestamp="20200131 11:53:25.374" level="INFO">${False}</msg>
<msg timestamp="20200131 11:53:25.374" level="INFO">False</msg>
<msg timestamp="20200131 11:53:25.374" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:25.374" endtime="20200131 11:53:25.375"></status>
</kw>
<status status="PASS" starttime="20200131 11:53:25.374" endtime="20200131 11:53:25.375"></status>
</kw>
<kw name="${key} = ${get_integer}" type="foritem">
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${key}</arg>
<arg>${variables_dict}[${key}]</arg>
</arguments>
<msg timestamp="20200131 11:53:25.375" level="TRACE">Arguments: [ '${key}' | '${variables_dict}[${key}]' ]</msg>
<msg timestamp="20200131 11:53:25.375" level="INFO">${get_integer}</msg>
<msg timestamp="20200131 11:53:25.375" level="INFO">&lt;function get_integer at 0x7fd4ff64d200&gt;</msg>
<msg timestamp="20200131 11:53:25.375" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:25.375" endtime="20200131 11:53:25.375"></status>
</kw>
<status status="PASS" starttime="20200131 11:53:25.375" endtime="20200131 11:53:25.375"></status>
</kw>
<kw name="${key} = ${get_list}" type="foritem">
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${key}</arg>
<arg>${variables_dict}[${key}]</arg>
</arguments>
<msg timestamp="20200131 11:53:25.375" level="TRACE">Arguments: [ '${key}' | '${variables_dict}[${key}]' ]</msg>
<msg timestamp="20200131 11:53:25.375" level="INFO">${get_list}</msg>
<msg timestamp="20200131 11:53:25.375" level="INFO">&lt;function get_list at 0x7fd4ff64d4d0&gt;</msg>
<msg timestamp="20200131 11:53:25.375" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:25.375" endtime="20200131 11:53:25.375"></status>
</kw>
<status status="PASS" starttime="20200131 11:53:25.375" endtime="20200131 11:53:25.375"></status>
</kw>
<kw name="${key} = ${get_string_wrapper}" type="foritem">
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${key}</arg>
<arg>${variables_dict}[${key}]</arg>
</arguments>
<msg timestamp="20200131 11:53:25.375" level="TRACE">Arguments: [ '${key}' | '${variables_dict}[${key}]' ]</msg>
<msg timestamp="20200131 11:53:25.376" level="INFO">${get_string_wrapper}</msg>
<msg timestamp="20200131 11:53:25.376" level="INFO">&lt;function get_string_wrapper at 0x7fd4ff64d830&gt;</msg>
<msg timestamp="20200131 11:53:25.376" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:25.375" endtime="20200131 11:53:25.376"></status>
</kw>
<status status="PASS" starttime="20200131 11:53:25.375" endtime="20200131 11:53:25.376"></status>
</kw>
<kw name="${key} = ${get_tuple}" type="foritem">
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${key}</arg>
<arg>${variables_dict}[${key}]</arg>
</arguments>
<msg timestamp="20200131 11:53:25.376" level="TRACE">Arguments: [ '${key}' | '${variables_dict}[${key}]' ]</msg>
<msg timestamp="20200131 11:53:25.376" level="INFO">${get_tuple}</msg>
<msg timestamp="20200131 11:53:25.376" level="INFO">&lt;function get_tuple at 0x7fd4ff64d440&gt;</msg>
<msg timestamp="20200131 11:53:25.376" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:25.376" endtime="20200131 11:53:25.376"></status>
</kw>
<status status="PASS" starttime="20200131 11:53:25.376" endtime="20200131 11:53:25.376"></status>
</kw>
<kw name="${key} = ${GLOBAL_VAR}" type="foritem">
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${key}</arg>
<arg>${variables_dict}[${key}]</arg>
</arguments>
<msg timestamp="20200131 11:53:25.376" level="TRACE">Arguments: [ '${key}' | '${variables_dict}[${key}]' ]</msg>
<msg timestamp="20200131 11:53:25.376" level="INFO">${GLOBAL_VAR}</msg>
<msg timestamp="20200131 11:53:25.376" level="INFO">Global Value</msg>
<msg timestamp="20200131 11:53:25.376" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:25.376" endtime="20200131 11:53:25.376"></status>
</kw>
<status status="PASS" starttime="20200131 11:53:25.376" endtime="20200131 11:53:25.377"></status>
</kw>
<kw name="${key} = ${important-teardown}" type="foritem">
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${key}</arg>
<arg>${variables_dict}[${key}]</arg>
</arguments>
<msg timestamp="20200131 11:53:25.377" level="TRACE">Arguments: [ '${key}' | '${variables_dict}[${key}]' ]</msg>
<msg timestamp="20200131 11:53:25.377" level="INFO">${important-teardown}</msg>
<msg timestamp="20200131 11:53:25.377" level="INFO">Test Teardown Using "Run Keyword If Test Failed" And "Run Keyword If Test Passed"</msg>
<msg timestamp="20200131 11:53:25.377" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:25.377" endtime="20200131 11:53:25.377"></status>
</kw>
<status status="PASS" starttime="20200131 11:53:25.377" endtime="20200131 11:53:25.377"></status>
</kw>
<kw name="${key} = ${initialize_database}" type="foritem">
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${key}</arg>
<arg>${variables_dict}[${key}]</arg>
</arguments>
<msg timestamp="20200131 11:53:25.377" level="TRACE">Arguments: [ '${key}' | '${variables_dict}[${key}]' ]</msg>
<msg timestamp="20200131 11:53:25.377" level="INFO">${initialize_database}</msg>
<msg timestamp="20200131 11:53:25.377" level="INFO">&lt;function initialize_database at 0x7fd4ff6bc440&gt;</msg>
<msg timestamp="20200131 11:53:25.377" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:25.377" endtime="20200131 11:53:25.377"></status>
</kw>
<status status="PASS" starttime="20200131 11:53:25.377" endtime="20200131 11:53:25.377"></status>
</kw>
<kw name="${key} = ${is_float_in_python}" type="foritem">
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${key}</arg>
<arg>${variables_dict}[${key}]</arg>
</arguments>
<msg timestamp="20200131 11:53:25.382" level="TRACE">Arguments: [ '${key}' | '${variables_dict}[${key}]' ]</msg>
<msg timestamp="20200131 11:53:25.382" level="INFO">${is_float_in_python}</msg>
<msg timestamp="20200131 11:53:25.382" level="INFO">&lt;function is_float_in_python at 0x7fd4ff64d710&gt;</msg>
<msg timestamp="20200131 11:53:25.382" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:25.377" endtime="20200131 11:53:25.382"></status>
</kw>
<status status="PASS" starttime="20200131 11:53:25.377" endtime="20200131 11:53:25.382"></status>
</kw>
<kw name="${key} = ${is_integer_in_python}" type="foritem">
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${key}</arg>
<arg>${variables_dict}[${key}]</arg>
</arguments>
<msg timestamp="20200131 11:53:25.382" level="TRACE">Arguments: [ '${key}' | '${variables_dict}[${key}]' ]</msg>
<msg timestamp="20200131 11:53:25.382" level="INFO">${is_integer_in_python}</msg>
<msg timestamp="20200131 11:53:25.382" level="INFO">&lt;function is_integer_in_python at 0x7fd4ff64d680&gt;</msg>
<msg timestamp="20200131 11:53:25.382" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:25.382" endtime="20200131 11:53:25.382"></status>
</kw>
<status status="PASS" starttime="20200131 11:53:25.382" endtime="20200131 11:53:25.382"></status>
</kw>
<kw name="${key} = ${is_list_in_python}" type="foritem">
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${key}</arg>
<arg>${variables_dict}[${key}]</arg>
</arguments>
<msg timestamp="20200131 11:53:25.382" level="TRACE">Arguments: [ '${key}' | '${variables_dict}[${key}]' ]</msg>
<msg timestamp="20200131 11:53:25.383" level="INFO">${is_list_in_python}</msg>
<msg timestamp="20200131 11:53:25.383" level="INFO">&lt;function is_list_in_python at 0x7fd4ff64d5f0&gt;</msg>
<msg timestamp="20200131 11:53:25.383" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:25.382" endtime="20200131 11:53:25.383"></status>
</kw>
<status status="PASS" starttime="20200131 11:53:25.382" endtime="20200131 11:53:25.383"></status>
</kw>
<kw name="${key} = ${is_string_in_python}" type="foritem">
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${key}</arg>
<arg>${variables_dict}[${key}]</arg>
</arguments>
<msg timestamp="20200131 11:53:25.383" level="TRACE">Arguments: [ '${key}' | '${variables_dict}[${key}]' ]</msg>
<msg timestamp="20200131 11:53:25.383" level="INFO">${is_string_in_python}</msg>
<msg timestamp="20200131 11:53:25.383" level="INFO">&lt;function is_string_in_python at 0x7fd4ff64d560&gt;</msg>
<msg timestamp="20200131 11:53:25.383" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:25.383" endtime="20200131 11:53:25.383"></status>
</kw>
<status status="PASS" starttime="20200131 11:53:25.383" endtime="20200131 11:53:25.383"></status>
</kw>
<kw name="${key} = ${keyword_to_run}" type="foritem">
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${key}</arg>
<arg>${variables_dict}[${key}]</arg>
</arguments>
<msg timestamp="20200131 11:53:25.383" level="TRACE">Arguments: [ '${key}' | '${variables_dict}[${key}]' ]</msg>
<msg timestamp="20200131 11:53:25.383" level="INFO">${keyword_to_run}</msg>
<msg timestamp="20200131 11:53:25.383" level="INFO">add multiple values</msg>
<msg timestamp="20200131 11:53:25.383" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:25.383" endtime="20200131 11:53:25.383"></status>
</kw>
<status status="PASS" starttime="20200131 11:53:25.383" endtime="20200131 11:53:25.383"></status>
</kw>
<kw name="${key} = ${keyword}" type="foritem">
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${key}</arg>
<arg>${variables_dict}[${key}]</arg>
</arguments>
<msg timestamp="20200131 11:53:25.384" level="TRACE">Arguments: [ '${key}' | '${variables_dict}[${key}]' ]</msg>
<msg timestamp="20200131 11:53:25.384" level="INFO">${keyword}</msg>
<msg timestamp="20200131 11:53:25.384" level="INFO">&lt;function keyword at 0x7fd4ffa064d0&gt;</msg>
<msg timestamp="20200131 11:53:25.384" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:25.384" endtime="20200131 11:53:25.384"></status>
</kw>
<status status="PASS" starttime="20200131 11:53:25.384" endtime="20200131 11:53:25.384"></status>
</kw>
<kw name="${key} = ${LOG_FILE}" type="foritem">
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${key}</arg>
<arg>${variables_dict}[${key}]</arg>
</arguments>
<msg timestamp="20200131 11:53:25.384" level="TRACE">Arguments: [ '${key}' | '${variables_dict}[${key}]' ]</msg>
<msg timestamp="20200131 11:53:25.384" level="INFO">${LOG_FILE}</msg>
<msg timestamp="20200131 11:53:25.384" level="INFO">/home/hakan/Python/Robot/robot-fw-built-in-library-tests/Results/log.html</msg>
<msg timestamp="20200131 11:53:25.384" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:25.384" endtime="20200131 11:53:25.384"></status>
</kw>
<status status="PASS" starttime="20200131 11:53:25.384" endtime="20200131 11:53:25.384"></status>
</kw>
<kw name="${key} = ${logger}" type="foritem">
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${key}</arg>
<arg>${variables_dict}[${key}]</arg>
</arguments>
<msg timestamp="20200131 11:53:25.384" level="TRACE">Arguments: [ '${key}' | '${variables_dict}[${key}]' ]</msg>
<msg timestamp="20200131 11:53:25.384" level="INFO">${logger}</msg>
<msg timestamp="20200131 11:53:25.385" level="INFO">&lt;module 'robot.api.logger' from '/home/hakan/anaconda3/lib/python3.7/site-packages/robot/api/logger.py'&gt;</msg>
<msg timestamp="20200131 11:53:25.385" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:25.384" endtime="20200131 11:53:25.385"></status>
</kw>
<status status="PASS" starttime="20200131 11:53:25.384" endtime="20200131 11:53:25.385"></status>
</kw>
<kw name="${key} = ${LOG_LEVEL}" type="foritem">
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${key}</arg>
<arg>${variables_dict}[${key}]</arg>
</arguments>
<msg timestamp="20200131 11:53:25.385" level="TRACE">Arguments: [ '${key}' | '${variables_dict}[${key}]' ]</msg>
<msg timestamp="20200131 11:53:25.385" level="INFO">${LOG_LEVEL}</msg>
<msg timestamp="20200131 11:53:25.385" level="INFO">TRACE</msg>
<msg timestamp="20200131 11:53:25.385" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:25.385" endtime="20200131 11:53:25.385"></status>
</kw>
<status status="PASS" starttime="20200131 11:53:25.385" endtime="20200131 11:53:25.385"></status>
</kw>
<kw name="${key} = ${None}" type="foritem">
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${key}</arg>
<arg>${variables_dict}[${key}]</arg>
</arguments>
<msg timestamp="20200131 11:53:25.385" level="TRACE">Arguments: [ '${key}' | '${variables_dict}[${key}]' ]</msg>
<msg timestamp="20200131 11:53:25.390" level="INFO">${None}</msg>
<msg timestamp="20200131 11:53:25.390" level="INFO">None</msg>
<msg timestamp="20200131 11:53:25.390" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:25.385" endtime="20200131 11:53:25.390"></status>
</kw>
<status status="PASS" starttime="20200131 11:53:25.385" endtime="20200131 11:53:25.390"></status>
</kw>
<kw name="${key} = ${not-important-setup}" type="foritem">
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${key}</arg>
<arg>${variables_dict}[${key}]</arg>
</arguments>
<msg timestamp="20200131 11:53:25.390" level="TRACE">Arguments: [ '${key}' | '${variables_dict}[${key}]' ]</msg>
<msg timestamp="20200131 11:53:25.390" level="INFO">${not-important-setup}</msg>
<msg timestamp="20200131 11:53:25.390" level="INFO">Not Important Setup</msg>
<msg timestamp="20200131 11:53:25.390" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:25.390" endtime="20200131 11:53:25.390"></status>
</kw>
<status status="PASS" starttime="20200131 11:53:25.390" endtime="20200131 11:53:25.390"></status>
</kw>
<kw name="${key} = ${null}" type="foritem">
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${key}</arg>
<arg>${variables_dict}[${key}]</arg>
</arguments>
<msg timestamp="20200131 11:53:25.391" level="TRACE">Arguments: [ '${key}' | '${variables_dict}[${key}]' ]</msg>
<msg timestamp="20200131 11:53:25.391" level="INFO">${null}</msg>
<msg timestamp="20200131 11:53:25.391" level="INFO">None</msg>
<msg timestamp="20200131 11:53:25.391" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:25.390" endtime="20200131 11:53:25.391"></status>
</kw>
<status status="PASS" starttime="20200131 11:53:25.390" endtime="20200131 11:53:25.391"></status>
</kw>
<kw name="${key} = ${OUTPUT_DIR}" type="foritem">
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${key}</arg>
<arg>${variables_dict}[${key}]</arg>
</arguments>
<msg timestamp="20200131 11:53:25.391" level="TRACE">Arguments: [ '${key}' | '${variables_dict}[${key}]' ]</msg>
<msg timestamp="20200131 11:53:25.391" level="INFO">${OUTPUT_DIR}</msg>
<msg timestamp="20200131 11:53:25.391" level="INFO">/home/hakan/Python/Robot/robot-fw-built-in-library-tests/Results</msg>
<msg timestamp="20200131 11:53:25.391" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:25.391" endtime="20200131 11:53:25.391"></status>
</kw>
<status status="PASS" starttime="20200131 11:53:25.391" endtime="20200131 11:53:25.391"></status>
</kw>
<kw name="${key} = ${OUTPUT_FILE}" type="foritem">
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${key}</arg>
<arg>${variables_dict}[${key}]</arg>
</arguments>
<msg timestamp="20200131 11:53:25.391" level="TRACE">Arguments: [ '${key}' | '${variables_dict}[${key}]' ]</msg>
<msg timestamp="20200131 11:53:25.391" level="INFO">${OUTPUT_FILE}</msg>
<msg timestamp="20200131 11:53:25.391" level="INFO">/home/hakan/Python/Robot/robot-fw-built-in-library-tests/Results/output.xml</msg>
<msg timestamp="20200131 11:53:25.392" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:25.391" endtime="20200131 11:53:25.392"></status>
</kw>
<status status="PASS" starttime="20200131 11:53:25.391" endtime="20200131 11:53:25.392"></status>
</kw>
<kw name="${key} = ${PREV_TEST_MESSAGE}" type="foritem">
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${key}</arg>
<arg>${variables_dict}[${key}]</arg>
</arguments>
<msg timestamp="20200131 11:53:25.392" level="TRACE">Arguments: [ '${key}' | '${variables_dict}[${key}]' ]</msg>
<msg timestamp="20200131 11:53:25.392" level="INFO">${PREV_TEST_MESSAGE}</msg>
<msg timestamp="20200131 11:53:25.392" level="INFO"></msg>
<msg timestamp="20200131 11:53:25.392" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:25.392" endtime="20200131 11:53:25.392"></status>
</kw>
<status status="PASS" starttime="20200131 11:53:25.392" endtime="20200131 11:53:25.392"></status>
</kw>
<kw name="${key} = ${PREV_TEST_NAME}" type="foritem">
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${key}</arg>
<arg>${variables_dict}[${key}]</arg>
</arguments>
<msg timestamp="20200131 11:53:25.393" level="TRACE">Arguments: [ '${key}' | '${variables_dict}[${key}]' ]</msg>
<msg timestamp="20200131 11:53:25.393" level="INFO">${PREV_TEST_NAME}</msg>
<msg timestamp="20200131 11:53:25.393" level="INFO">Use "Get Variable Value"</msg>
<msg timestamp="20200131 11:53:25.393" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:25.392" endtime="20200131 11:53:25.393"></status>
</kw>
<status status="PASS" starttime="20200131 11:53:25.392" endtime="20200131 11:53:25.393"></status>
</kw>
<kw name="${key} = ${PREV_TEST_STATUS}" type="foritem">
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${key}</arg>
<arg>${variables_dict}[${key}]</arg>
</arguments>
<msg timestamp="20200131 11:53:25.393" level="TRACE">Arguments: [ '${key}' | '${variables_dict}[${key}]' ]</msg>
<msg timestamp="20200131 11:53:25.393" level="INFO">${PREV_TEST_STATUS}</msg>
<msg timestamp="20200131 11:53:25.393" level="INFO">PASS</msg>
<msg timestamp="20200131 11:53:25.393" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:25.393" endtime="20200131 11:53:25.393"></status>
</kw>
<status status="PASS" starttime="20200131 11:53:25.393" endtime="20200131 11:53:25.393"></status>
</kw>
<kw name="${key} = ${raise_type_error_in_python}" type="foritem">
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${key}</arg>
<arg>${variables_dict}[${key}]</arg>
</arguments>
<msg timestamp="20200131 11:53:25.393" level="TRACE">Arguments: [ '${key}' | '${variables_dict}[${key}]' ]</msg>
<msg timestamp="20200131 11:53:25.397" level="INFO">${raise_type_error_in_python}</msg>
<msg timestamp="20200131 11:53:25.398" level="INFO">&lt;function raise_type_error_in_python at 0x7fd4ff64d290&gt;</msg>
<msg timestamp="20200131 11:53:25.398" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:25.393" endtime="20200131 11:53:25.398"></status>
</kw>
<status status="PASS" starttime="20200131 11:53:25.393" endtime="20200131 11:53:25.398"></status>
</kw>
<kw name="${key} = ${REPORT_FILE}" type="foritem">
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${key}</arg>
<arg>${variables_dict}[${key}]</arg>
</arguments>
<msg timestamp="20200131 11:53:25.398" level="TRACE">Arguments: [ '${key}' | '${variables_dict}[${key}]' ]</msg>
<msg timestamp="20200131 11:53:25.398" level="INFO">${REPORT_FILE}</msg>
<msg timestamp="20200131 11:53:25.398" level="INFO">/home/hakan/Python/Robot/robot-fw-built-in-library-tests/Results/report.html</msg>
<msg timestamp="20200131 11:53:25.398" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:25.398" endtime="20200131 11:53:25.398"></status>
</kw>
<status status="PASS" starttime="20200131 11:53:25.398" endtime="20200131 11:53:25.398"></status>
</kw>
<kw name="${key} = ${SPACE}" type="foritem">
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${key}</arg>
<arg>${variables_dict}[${key}]</arg>
</arguments>
<msg timestamp="20200131 11:53:25.398" level="TRACE">Arguments: [ '${key}' | '${variables_dict}[${key}]' ]</msg>
<msg timestamp="20200131 11:53:25.398" level="INFO">${SPACE}</msg>
<msg timestamp="20200131 11:53:25.398" level="INFO"> </msg>
<msg timestamp="20200131 11:53:25.398" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:25.398" endtime="20200131 11:53:25.398"></status>
</kw>
<status status="PASS" starttime="20200131 11:53:25.398" endtime="20200131 11:53:25.398"></status>
</kw>
<kw name="${key} = ${start_servers}" type="foritem">
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${key}</arg>
<arg>${variables_dict}[${key}]</arg>
</arguments>
<msg timestamp="20200131 11:53:25.399" level="TRACE">Arguments: [ '${key}' | '${variables_dict}[${key}]' ]</msg>
<msg timestamp="20200131 11:53:25.399" level="INFO">${start_servers}</msg>
<msg timestamp="20200131 11:53:25.399" level="INFO">&lt;function start_servers at 0x7fd4ff6bc4d0&gt;</msg>
<msg timestamp="20200131 11:53:25.399" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:25.398" endtime="20200131 11:53:25.399"></status>
</kw>
<status status="PASS" starttime="20200131 11:53:25.398" endtime="20200131 11:53:25.399"></status>
</kw>
<kw name="${key} = ${StringUtils}" type="foritem">
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${key}</arg>
<arg>${variables_dict}[${key}]</arg>
</arguments>
<msg timestamp="20200131 11:53:25.399" level="TRACE">Arguments: [ '${key}' | '${variables_dict}[${key}]' ]</msg>
<msg timestamp="20200131 11:53:25.399" level="INFO">${StringUtils}</msg>
<msg timestamp="20200131 11:53:25.399" level="INFO">&lt;class 'Utils.StringUtils'&gt;</msg>
<msg timestamp="20200131 11:53:25.399" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:25.399" endtime="20200131 11:53:25.399"></status>
</kw>
<status status="PASS" starttime="20200131 11:53:25.399" endtime="20200131 11:53:25.399"></status>
</kw>
<kw name="${key} = ${SUITE_DOCUMENTATION}" type="foritem">
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${key}</arg>
<arg>${variables_dict}[${key}]</arg>
</arguments>
<msg timestamp="20200131 11:53:25.399" level="TRACE">Arguments: [ '${key}' | '${variables_dict}[${key}]' ]</msg>
<msg timestamp="20200131 11:53:25.399" level="INFO">${SUITE_DOCUMENTATION}</msg>
<msg timestamp="20200131 11:53:25.400" level="INFO">Checking out the built-in library's capabilities.</msg>
<msg timestamp="20200131 11:53:25.400" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:25.399" endtime="20200131 11:53:25.400"></status>
</kw>
<status status="PASS" starttime="20200131 11:53:25.399" endtime="20200131 11:53:25.400"></status>
</kw>
<kw name="${key} = ${SUITE_NAME}" type="foritem">
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${key}</arg>
<arg>${variables_dict}[${key}]</arg>
</arguments>
<msg timestamp="20200131 11:53:25.400" level="TRACE">Arguments: [ '${key}' | '${variables_dict}[${key}]' ]</msg>
<msg timestamp="20200131 11:53:25.400" level="INFO">${SUITE_NAME}</msg>
<msg timestamp="20200131 11:53:25.400" level="INFO">Built-In-Library-Test &amp; Utilize-Global-Variable.Built-In-Library-Test</msg>
<msg timestamp="20200131 11:53:25.400" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:25.400" endtime="20200131 11:53:25.400"></status>
</kw>
<status status="PASS" starttime="20200131 11:53:25.400" endtime="20200131 11:53:25.400"></status>
</kw>
<kw name="${key} = ${SUITE_SOURCE}" type="foritem">
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${key}</arg>
<arg>${variables_dict}[${key}]</arg>
</arguments>
<msg timestamp="20200131 11:53:25.400" level="TRACE">Arguments: [ '${key}' | '${variables_dict}[${key}]' ]</msg>
<msg timestamp="20200131 11:53:25.400" level="INFO">${SUITE_SOURCE}</msg>
<msg timestamp="20200131 11:53:25.400" level="INFO">/home/hakan/Python/Robot/robot-fw-built-in-library-tests/Tests/built-in-library-test.robot</msg>
<msg timestamp="20200131 11:53:25.400" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:25.400" endtime="20200131 11:53:25.400"></status>
</kw>
<status status="PASS" starttime="20200131 11:53:25.400" endtime="20200131 11:53:25.400"></status>
</kw>
<kw name="${key} = ${TEMPDIR}" type="foritem">
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${key}</arg>
<arg>${variables_dict}[${key}]</arg>
</arguments>
<msg timestamp="20200131 11:53:25.400" level="TRACE">Arguments: [ '${key}' | '${variables_dict}[${key}]' ]</msg>
<msg timestamp="20200131 11:53:25.401" level="INFO">${TEMPDIR}</msg>
<msg timestamp="20200131 11:53:25.401" level="INFO">/tmp</msg>
<msg timestamp="20200131 11:53:25.401" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:25.400" endtime="20200131 11:53:25.401"></status>
</kw>
<status status="PASS" starttime="20200131 11:53:25.400" endtime="20200131 11:53:25.401"></status>
</kw>
<kw name="${key} = ${TEST_DOCUMENTATION}" type="foritem">
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${key}</arg>
<arg>${variables_dict}[${key}]</arg>
</arguments>
<msg timestamp="20200131 11:53:25.401" level="TRACE">Arguments: [ '${key}' | '${variables_dict}[${key}]' ]</msg>
<msg timestamp="20200131 11:53:25.401" level="INFO">${TEST_DOCUMENTATION}</msg>
<msg timestamp="20200131 11:53:25.401" level="INFO">Get Variables no_decoration=False
Returns a dictionary containing all variables in the current scope.
Variables are returned as a special dictionary that allows accessing variables in space, case,
and underscore insensitive manner similarly as accessing variables in the test data.
This dictionary supports all same operations as normal Python dictionaries and, for example,
Robot's Collections library can be used to access or modify it.
Modifying the returned dictionary has no effect on the variables available in the current scope.</msg>
<msg timestamp="20200131 11:53:25.401" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:25.401" endtime="20200131 11:53:25.401"></status>
</kw>
<status status="PASS" starttime="20200131 11:53:25.401" endtime="20200131 11:53:25.401"></status>
</kw>
<kw name="${key} = ${TEST_NAME}" type="foritem">
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${key}</arg>
<arg>${variables_dict}[${key}]</arg>
</arguments>
<msg timestamp="20200131 11:53:25.401" level="TRACE">Arguments: [ '${key}' | '${variables_dict}[${key}]' ]</msg>
<msg timestamp="20200131 11:53:25.401" level="INFO">${TEST_NAME}</msg>
<msg timestamp="20200131 11:53:25.405" level="INFO">Use "Get Variables"</msg>
<msg timestamp="20200131 11:53:25.405" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:25.401" endtime="20200131 11:53:25.405"></status>
</kw>
<status status="PASS" starttime="20200131 11:53:25.401" endtime="20200131 11:53:25.405"></status>
</kw>
<kw name="${key} = ${TestSetup}" type="foritem">
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${key}</arg>
<arg>${variables_dict}[${key}]</arg>
</arguments>
<msg timestamp="20200131 11:53:25.406" level="TRACE">Arguments: [ '${key}' | '${variables_dict}[${key}]' ]</msg>
<msg timestamp="20200131 11:53:25.406" level="INFO">${TestSetup}</msg>
<msg timestamp="20200131 11:53:25.406" level="INFO">Use Pass Execution Setup</msg>
<msg timestamp="20200131 11:53:25.406" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:25.406" endtime="20200131 11:53:25.406"></status>
</kw>
<status status="PASS" starttime="20200131 11:53:25.405" endtime="20200131 11:53:25.406"></status>
</kw>
<kw name="${key} = ${TestTeardown}" type="foritem">
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${key}</arg>
<arg>${variables_dict}[${key}]</arg>
</arguments>
<msg timestamp="20200131 11:53:25.406" level="TRACE">Arguments: [ '${key}' | '${variables_dict}[${key}]' ]</msg>
<msg timestamp="20200131 11:53:25.407" level="INFO">${TestTeardown}</msg>
<msg timestamp="20200131 11:53:25.407" level="INFO">Use Pass Execution Teardown</msg>
<msg timestamp="20200131 11:53:25.407" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:25.406" endtime="20200131 11:53:25.407"></status>
</kw>
<status status="PASS" starttime="20200131 11:53:25.406" endtime="20200131 11:53:25.407"></status>
</kw>
<kw name="${key} = ${title_should_start_with}" type="foritem">
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${key}</arg>
<arg>${variables_dict}[${key}]</arg>
</arguments>
<msg timestamp="20200131 11:53:25.408" level="TRACE">Arguments: [ '${key}' | '${variables_dict}[${key}]' ]</msg>
<msg timestamp="20200131 11:53:25.408" level="INFO">${title_should_start_with}</msg>
<msg timestamp="20200131 11:53:25.408" level="INFO">&lt;function title_should_start_with at 0x7fd4ff64d3b0&gt;</msg>
<msg timestamp="20200131 11:53:25.408" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:25.407" endtime="20200131 11:53:25.408"></status>
</kw>
<status status="PASS" starttime="20200131 11:53:25.407" endtime="20200131 11:53:25.408"></status>
</kw>
<kw name="${key} = ${True}" type="foritem">
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${key}</arg>
<arg>${variables_dict}[${key}]</arg>
</arguments>
<msg timestamp="20200131 11:53:25.408" level="TRACE">Arguments: [ '${key}' | '${variables_dict}[${key}]' ]</msg>
<msg timestamp="20200131 11:53:25.408" level="INFO">${True}</msg>
<msg timestamp="20200131 11:53:25.414" level="INFO">True</msg>
<msg timestamp="20200131 11:53:25.414" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:25.408" endtime="20200131 11:53:25.414"></status>
</kw>
<status status="PASS" starttime="20200131 11:53:25.408" endtime="20200131 11:53:25.414"></status>
</kw>
<kw name="${key} = ${utility_function_one}" type="foritem">
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${key}</arg>
<arg>${variables_dict}[${key}]</arg>
</arguments>
<msg timestamp="20200131 11:53:25.414" level="TRACE">Arguments: [ '${key}' | '${variables_dict}[${key}]' ]</msg>
<msg timestamp="20200131 11:53:25.414" level="INFO">${utility_function_one}</msg>
<msg timestamp="20200131 11:53:25.414" level="INFO">&lt;function utility_function_one at 0x7fd4ff64d7a0&gt;</msg>
<msg timestamp="20200131 11:53:25.414" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:25.414" endtime="20200131 11:53:25.414"></status>
</kw>
<status status="PASS" starttime="20200131 11:53:25.414" endtime="20200131 11:53:25.414"></status>
</kw>
<kw name="${key} = ${utility_object}" type="foritem">
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${key}</arg>
<arg>${variables_dict}[${key}]</arg>
</arguments>
<msg timestamp="20200131 11:53:25.414" level="TRACE">Arguments: [ '${key}' | '${variables_dict}[${key}]' ]</msg>
<msg timestamp="20200131 11:53:25.414" level="INFO">${utility_object}</msg>
<msg timestamp="20200131 11:53:25.414" level="INFO">I am Util object from Python side</msg>
<msg timestamp="20200131 11:53:25.415" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:25.414" endtime="20200131 11:53:25.415"></status>
</kw>
<status status="PASS" starttime="20200131 11:53:25.414" endtime="20200131 11:53:25.415"></status>
</kw>
<kw name="${key} = ${Util}" type="foritem">
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${key}</arg>
<arg>${variables_dict}[${key}]</arg>
</arguments>
<msg timestamp="20200131 11:53:25.415" level="TRACE">Arguments: [ '${key}' | '${variables_dict}[${key}]' ]</msg>
<msg timestamp="20200131 11:53:25.415" level="INFO">${Util}</msg>
<msg timestamp="20200131 11:53:25.415" level="INFO">&lt;class 'Utils.Util'&gt;</msg>
<msg timestamp="20200131 11:53:25.415" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:25.415" endtime="20200131 11:53:25.415"></status>
</kw>
<status status="PASS" starttime="20200131 11:53:25.415" endtime="20200131 11:53:25.415"></status>
</kw>
<kw name="${key} = ${VARIABLE}" type="foritem">
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${key}</arg>
<arg>${variables_dict}[${key}]</arg>
</arguments>
<msg timestamp="20200131 11:53:25.415" level="TRACE">Arguments: [ '${key}' | '${variables_dict}[${key}]' ]</msg>
<msg timestamp="20200131 11:53:25.415" level="INFO">${VARIABLE}</msg>
<msg timestamp="20200131 11:53:25.415" level="INFO">21</msg>
<msg timestamp="20200131 11:53:25.415" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:25.415" endtime="20200131 11:53:25.415"></status>
</kw>
<status status="PASS" starttime="20200131 11:53:25.415" endtime="20200131 11:53:25.415"></status>
</kw>
<kw name="${key} = &amp;{DICTIONARY}" type="foritem">
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${key}</arg>
<arg>${variables_dict}[${key}]</arg>
</arguments>
<msg timestamp="20200131 11:53:25.416" level="TRACE">Arguments: [ '${key}' | '${variables_dict}[${key}]' ]</msg>
<msg timestamp="20200131 11:53:25.416" level="INFO">&amp;{DICTIONARY}</msg>
<msg timestamp="20200131 11:53:25.416" level="INFO">{'key1': 'value1', 'key2': 'value2', 'key3': 'value3'}</msg>
<msg timestamp="20200131 11:53:25.416" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:25.415" endtime="20200131 11:53:25.416"></status>
</kw>
<status status="PASS" starttime="20200131 11:53:25.415" endtime="20200131 11:53:25.416"></status>
</kw>
<kw name="${key} = &amp;{python_dictionary}" type="foritem">
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${key}</arg>
<arg>${variables_dict}[${key}]</arg>
</arguments>
<msg timestamp="20200131 11:53:25.416" level="TRACE">Arguments: [ '${key}' | '${variables_dict}[${key}]' ]</msg>
<msg timestamp="20200131 11:53:25.416" level="INFO">&amp;{python_dictionary}</msg>
<msg timestamp="20200131 11:53:25.416" level="INFO">{'keyA': 'a', 'keyB': 'b', 'keyC': 'c'}</msg>
<msg timestamp="20200131 11:53:25.416" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:25.416" endtime="20200131 11:53:25.416"></status>
</kw>
<status status="PASS" starttime="20200131 11:53:25.416" endtime="20200131 11:53:25.416"></status>
</kw>
<kw name="${key} = &amp;{SUITE_METADATA}" type="foritem">
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${key}</arg>
<arg>${variables_dict}[${key}]</arg>
</arguments>
<msg timestamp="20200131 11:53:25.416" level="TRACE">Arguments: [ '${key}' | '${variables_dict}[${key}]' ]</msg>
<msg timestamp="20200131 11:53:25.416" level="INFO">&amp;{SUITE_METADATA}</msg>
<msg timestamp="20200131 11:53:25.416" level="INFO">{}</msg>
<msg timestamp="20200131 11:53:25.416" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:25.416" endtime="20200131 11:53:25.417"></status>
</kw>
<status status="PASS" starttime="20200131 11:53:25.416" endtime="20200131 11:53:25.417"></status>
</kw>
<kw name="${key} = @{LIST}" type="foritem">
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${key}</arg>
<arg>${variables_dict}[${key}]</arg>
</arguments>
<msg timestamp="20200131 11:53:25.417" level="TRACE">Arguments: [ '${key}' | '${variables_dict}[${key}]' ]</msg>
<msg timestamp="20200131 11:53:25.417" level="INFO">@{LIST}</msg>
<msg timestamp="20200131 11:53:25.417" level="INFO">['Value1', 'Value2', 'CONTINUE', 'Value3']</msg>
<msg timestamp="20200131 11:53:25.417" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:25.417" endtime="20200131 11:53:25.417"></status>
</kw>
<status status="PASS" starttime="20200131 11:53:25.417" endtime="20200131 11:53:25.417"></status>
</kw>
<kw name="${key} = @{MULTI_LINE_LIST}" type="foritem">
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${key}</arg>
<arg>${variables_dict}[${key}]</arg>
</arguments>
<msg timestamp="20200131 11:53:25.417" level="TRACE">Arguments: [ '${key}' | '${variables_dict}[${key}]' ]</msg>
<msg timestamp="20200131 11:53:25.417" level="INFO">@{MULTI_LINE_LIST}</msg>
<msg timestamp="20200131 11:53:25.417" level="INFO">['this', 'list', 'is', 'quite', 'long', 'and', 'items in it could also be long']</msg>
<msg timestamp="20200131 11:53:25.417" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:25.417" endtime="20200131 11:53:25.417"></status>
</kw>
<status status="PASS" starttime="20200131 11:53:25.417" endtime="20200131 11:53:25.417"></status>
</kw>
<kw name="${key} = @{python_list}" type="foritem">
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${key}</arg>
<arg>${variables_dict}[${key}]</arg>
</arguments>
<msg timestamp="20200131 11:53:25.417" level="TRACE">Arguments: [ '${key}' | '${variables_dict}[${key}]' ]</msg>
<msg timestamp="20200131 11:53:25.417" level="INFO">@{python_list}</msg>
<msg timestamp="20200131 11:53:25.420" level="INFO">[1, 2, 3]</msg>
<msg timestamp="20200131 11:53:25.420" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:25.417" endtime="20200131 11:53:25.420"></status>
</kw>
<status status="PASS" starttime="20200131 11:53:25.417" endtime="20200131 11:53:25.420"></status>
</kw>
<kw name="${key} = @{TEST_TAGS}" type="foritem">
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>${key}</arg>
<arg>${variables_dict}[${key}]</arg>
</arguments>
<msg timestamp="20200131 11:53:25.420" level="TRACE">Arguments: [ '${key}' | '${variables_dict}[${key}]' ]</msg>
<msg timestamp="20200131 11:53:25.420" level="INFO">@{TEST_TAGS}</msg>
<msg timestamp="20200131 11:53:25.422" level="INFO">[]</msg>
<msg timestamp="20200131 11:53:25.422" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:25.420" endtime="20200131 11:53:25.422"></status>
</kw>
<status status="PASS" starttime="20200131 11:53:25.420" endtime="20200131 11:53:25.422"></status>
</kw>
<status status="PASS" starttime="20200131 11:53:25.366" endtime="20200131 11:53:25.422"></status>
</kw>
<msg timestamp="20200131 11:53:25.422" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:25.366" endtime="20200131 11:53:25.422"></status>
</kw>
<kw name="Import Library" library="BuiltIn">
<doc>Imports a library with the given name and optional arguments.</doc>
<arguments>
<arg>Collections</arg>
</arguments>
<msg timestamp="20200131 11:53:25.422" level="TRACE">Arguments: [ 'Collections' ]</msg>
<msg timestamp="20200131 11:53:25.435" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:25.422" endtime="20200131 11:53:25.435"></status>
</kw>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${variables_dict}</arg>
<arg>\${a}</arg>
</arguments>
<msg timestamp="20200131 11:53:25.435" level="TRACE">Arguments: [ &lt;robot.utils.normalizing.NormalizedDict object at 0x7fd50125a2d0&gt; | '${a}' ]</msg>
<msg timestamp="20200131 11:53:25.435" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:25.435" endtime="20200131 11:53:25.435"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${variables_dict}</arg>
<arg>\${name}</arg>
<arg>value</arg>
</arguments>
<msg timestamp="20200131 11:53:25.436" level="TRACE">Arguments: [ &lt;robot.utils.normalizing.NormalizedDict object at 0x7fd50125a2d0&gt; | '${name}' | 'value' ]</msg>
<msg timestamp="20200131 11:53:25.436" level="TRACE">Return: &lt;robot.utils.normalizing.NormalizedDict object at 0x7fd50125a2d0&gt;</msg>
<status status="PASS" starttime="20200131 11:53:25.435" endtime="20200131 11:53:25.436"></status>
</kw>
<kw name="Variable Should Not Exist" library="BuiltIn">
<doc>Fails if the given variable exists within the current scope.</doc>
<arguments>
<arg>\${name}</arg>
</arguments>
<msg timestamp="20200131 11:53:25.436" level="TRACE">Arguments: [ '\\${name}' ]</msg>
<msg timestamp="20200131 11:53:25.437" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:25.436" endtime="20200131 11:53:25.437"></status>
</kw>
<kw name="Get Variables" library="BuiltIn">
<doc>Returns a dictionary containing all variables in the current scope.</doc>
<arguments>
<arg>no_decoration=True</arg>
</arguments>
<assign>
<var>${variables_dict}</var>
</assign>
<msg timestamp="20200131 11:53:25.437" level="TRACE">Arguments: [ no_decoration=True ]</msg>
<msg timestamp="20200131 11:53:25.437" level="TRACE">Return: &lt;robot.utils.normalizing.NormalizedDict object at 0x7fd4ffbf0490&gt;</msg>
<msg timestamp="20200131 11:53:25.438" level="INFO">${variables_dict} = {'/': '/', ':': ':', '\\n': '\n', 'a': 5, 'add_multiple_values': &lt;function add_multiple_values at 0x7fd4ff64d320&gt;, 'BuiltIn': &lt;class 'robot.libraries.BuiltIn.BuiltIn'&gt;, 'DEBUG_FILE': 'NONE', 'DICTIONA...</msg>
<status status="PASS" starttime="20200131 11:53:25.437" endtime="20200131 11:53:25.438"></status>
</kw>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${variables_dict}</arg>
<arg>a</arg>
</arguments>
<msg timestamp="20200131 11:53:25.440" level="TRACE">Arguments: [ &lt;robot.utils.normalizing.NormalizedDict object at 0x7fd4ffbf0490&gt; | 'a' ]</msg>
<msg timestamp="20200131 11:53:25.440" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:25.440" endtime="20200131 11:53:25.440"></status>
</kw>
<doc>Get Variables no_decoration=False
Returns a dictionary containing all variables in the current scope.
Variables are returned as a special dictionary that allows accessing variables in space, case,
and underscore insensitive manner similarly as accessing variables in the test data.
This dictionary supports all same operations as normal Python dictionaries and, for example,
Robot's Collections library can be used to access or modify it.
Modifying the returned dictionary has no effect on the variables available in the current scope.</doc>
<status status="PASS" starttime="20200131 11:53:25.362" endtime="20200131 11:53:25.440" critical="yes"></status>
</test>
<test id="s1-s1-t25" name="(Test 1/3) Use &quot;Import Library&quot; To Load LibraryWithState.py">
<kw name="Import Library" library="BuiltIn">
<doc>Imports a library with the given name and optional arguments.</doc>
<arguments>
<arg>LibraryWithState.py</arg>
<arg>CURRENT STATE</arg>
<arg>key1=value1</arg>
<arg>key2=value2</arg>
</arguments>
<msg timestamp="20200131 11:53:25.444" level="TRACE">Arguments: [ 'LibraryWithState.py' | 'CURRENT STATE' | 'key1=value1' | 'key2=value2' ]</msg>
<msg timestamp="20200131 11:53:25.447" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:25.444" endtime="20200131 11:53:25.447"></status>
</kw>
<doc>https://stackoverflow.com/questions/59824272/robot-framework-builtin-module-import-library-keyword-how-to-pass-argume
This very Test 1/3 imports dynamically LibraryWithState.py, which is made availabe to the whole test suite
initializing a LibraryWithState class instance. This class instance is initialized
the same way every time before subsequent test cases (i.e. Test 2/3 and Test 3/3) are called</doc>
<status status="PASS" starttime="20200131 11:53:25.441" endtime="20200131 11:53:25.447" critical="yes"></status>
</test>
<test id="s1-s1-t26" name="(Test 2/3) Change the state in the current LibraryWithState Instance">
<kw name="Get State" library="LibraryWithState">
<assign>
<var>${state}</var>
</assign>
<msg timestamp="20200131 11:53:25.449" level="TRACE">Arguments: [  ]</msg>
<msg timestamp="20200131 11:53:25.450" level="TRACE">Return: 'CURRENT STATE'</msg>
<msg timestamp="20200131 11:53:25.450" level="INFO">${state} = CURRENT STATE</msg>
<status status="PASS" starttime="20200131 11:53:25.449" endtime="20200131 11:53:25.450"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>$state=='CURRENT STATE'</arg>
</arguments>
<msg timestamp="20200131 11:53:25.450" level="TRACE">Arguments: [ "$state=='CURRENT STATE'" ]</msg>
<msg timestamp="20200131 11:53:25.450" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:25.450" endtime="20200131 11:53:25.450"></status>
</kw>
<kw name="Set State" library="LibraryWithState">
<arguments>
<arg>Test 2/3</arg>
</arguments>
<msg timestamp="20200131 11:53:25.451" level="TRACE">Arguments: [ 'Test 2/3' ]</msg>
<msg timestamp="20200131 11:53:25.451" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:25.451" endtime="20200131 11:53:25.451"></status>
</kw>
<kw name="Get State" library="LibraryWithState">
<assign>
<var>${state}</var>
</assign>
<msg timestamp="20200131 11:53:25.454" level="TRACE">Arguments: [  ]</msg>
<msg timestamp="20200131 11:53:25.454" level="TRACE">Return: 'Test 2/3'</msg>
<msg timestamp="20200131 11:53:25.454" level="INFO">${state} = Test 2/3</msg>
<status status="PASS" starttime="20200131 11:53:25.454" endtime="20200131 11:53:25.454"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>$state=='Test 2/3'</arg>
</arguments>
<msg timestamp="20200131 11:53:25.454" level="TRACE">Arguments: [ "$state=='Test 2/3'" ]</msg>
<msg timestamp="20200131 11:53:25.455" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:25.454" endtime="20200131 11:53:25.455"></status>
</kw>
<doc>Note that in Test 2/3 and in Test 3/3, the LibraryWithState instance is re-initialized
for each test case.</doc>
<status status="PASS" starttime="20200131 11:53:25.448" endtime="20200131 11:53:25.455" critical="yes"></status>
</test>
<test id="s1-s1-t27" name="(Test 3/3) Change the state in the current LibraryWithState Instance">
<kw name="Get State" library="LibraryWithState">
<assign>
<var>${state}</var>
</assign>
<msg timestamp="20200131 11:53:25.456" level="TRACE">Arguments: [  ]</msg>
<msg timestamp="20200131 11:53:25.456" level="TRACE">Return: 'CURRENT STATE'</msg>
<msg timestamp="20200131 11:53:25.456" level="INFO">${state} = CURRENT STATE</msg>
<status status="PASS" starttime="20200131 11:53:25.456" endtime="20200131 11:53:25.456"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>$state=='CURRENT STATE'</arg>
</arguments>
<msg timestamp="20200131 11:53:25.456" level="TRACE">Arguments: [ "$state=='CURRENT STATE'" ]</msg>
<msg timestamp="20200131 11:53:25.457" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:25.456" endtime="20200131 11:53:25.457"></status>
</kw>
<kw name="Set State" library="LibraryWithState">
<arguments>
<arg>Test 3/3</arg>
</arguments>
<msg timestamp="20200131 11:53:25.458" level="TRACE">Arguments: [ 'Test 3/3' ]</msg>
<msg timestamp="20200131 11:53:25.458" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:25.458" endtime="20200131 11:53:25.458"></status>
</kw>
<kw name="Get State" library="LibraryWithState">
<assign>
<var>${state}</var>
</assign>
<msg timestamp="20200131 11:53:25.458" level="TRACE">Arguments: [  ]</msg>
<msg timestamp="20200131 11:53:25.458" level="TRACE">Return: 'Test 3/3'</msg>
<msg timestamp="20200131 11:53:25.458" level="INFO">${state} = Test 3/3</msg>
<status status="PASS" starttime="20200131 11:53:25.458" endtime="20200131 11:53:25.458"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>$state=='Test 3/3'</arg>
</arguments>
<msg timestamp="20200131 11:53:25.458" level="TRACE">Arguments: [ "$state=='Test 3/3'" ]</msg>
<msg timestamp="20200131 11:53:25.459" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:25.458" endtime="20200131 11:53:25.459"></status>
</kw>
<doc>Note that in Test 2/3 and in Test 3/3, the LibraryWithState instance is re-initialized
for each test case.</doc>
<status status="PASS" starttime="20200131 11:53:25.455" endtime="20200131 11:53:25.461" critical="yes"></status>
</test>
<test id="s1-s1-t28" name="(Test 1/2) Use &quot;Import Resource&quot; To Load &quot;amazon.resource&quot; file">
<kw name="Import Resource" library="BuiltIn">
<doc>Imports a resource file with the given path.</doc>
<arguments>
<arg>amazon.resource</arg>
</arguments>
<msg timestamp="20200131 11:53:25.462" level="TRACE">Arguments: [ 'amazon.resource' ]</msg>
<msg timestamp="20200131 11:53:25.467" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:25.462" endtime="20200131 11:53:25.467"></status>
</kw>
<doc>Resources imported with this keyword are set into the test suite scope similarly
when importing them in the Setting table using the Resource setting.
The user keywords and variables defined in a resource file are available in the
file that takes that resource file into use.</doc>
<status status="PASS" starttime="20200131 11:53:25.462" endtime="20200131 11:53:25.467" critical="yes"></status>
</test>
<test id="s1-s1-t29" name="(Test 2/2) Use The Keywords In File &quot;amazon.resource&quot;">
<kw name="Open Home Page" library="amazon">
<doc>Opens browser to Amazons landing page</doc>
<msg timestamp="20200131 11:53:25.468" level="TRACE">Arguments: [  ]</msg>
<kw name="Open Browser" library="SeleniumLibrary">
<doc>Opens a new browser instance to the optional ``url``.</doc>
<arguments>
<arg>${URL}</arg>
<arg>${BROWSER}</arg>
</arguments>
<msg timestamp="20200131 11:53:25.468" level="TRACE">Arguments: [ 'https://www.amazon.com/' | 'Firefox' ]</msg>
<msg timestamp="20200131 11:53:25.468" level="INFO">Opening browser 'Firefox' to base url 'https://www.amazon.com/'.</msg>
<msg timestamp="20200131 11:53:25.469" level="INFO">Firefox driver log is always forced to to: /home/hakan/Python/Robot/robot-fw-built-in-library-tests/Results/geckodriver-4.log</msg>
<msg timestamp="20200131 11:53:26.478" level="DEBUG">POST http://127.0.0.1:56685/session {"capabilities": {"firstMatch": [{}], "alwaysMatch": {"browserName": "firefox", "acceptInsecureCerts": true, "moz:firefoxOptions": {"profile": "UEsDBBQAAAAIAK1eP1A+3NKsfgMAAM0MAAAHAAAAdXNlci5qc6VWTW/UMBC98ytQTyCx1rbABU6lFAkJUcSq4mg59mTjrmMbe7zp/nvGyaYsbb6AWz7e89hvZt44RQjcByhfnBXBNfTGlKtZo61yDVOp9gysKAyos1fPMSR4+f5ZesoxAiGEZE/ApTBxBG2hQVGwFAzhzkThEr4rjLC7sym8F1tYtn5EETB5lhmEXE+jKlfDEblgL49Z3O3p5FoBqyM6266it9YFGFmAPqkb+6MVOJ6vmbYY3O33L9Phc1Jqcc9lFSgwjzJoj5wU56jrHPT1epiwDBnAu4BcGMPvIod7CR61s3Ew6XdiL7plmetgLFau+Wyv6NEZGCRZwMaFHZOCKHtY5XjCrAiw13ImrxFkChoPTMa+HEeAj5PTgJFZr9lSm2IyoZTO5xQzizRQqECHC1zIrCBPlNsUERSXEHBYzRNSjClHfCBp+gBhhtXpwa3IsnLYgx0JJLxnySvqVCYSumEFT0CLWk3p6I04gLo+X2++OqRcEuHNCNg11jihqDAtaRzasvlRgd1k9bXdTse6vv1yyfp2m7SjFvmadVmYsy5td1THYKnsycS6JF/MYcmSOo8cB7uyJPxIpfagAEJlZQBB0k4/6RDxkrSQI230YEOihPaZVFtoiqeMWphGhKV2CiLI6lgWc1BTxuRzc/f2PuajEGO2DiSnJBXayi/J27gMIlYzUSowhskK5O4jlCIZ/ND9mabRDImMjm1v7JVxceYoJ+gbyvgwmBQRnXdmVSsQBqvunS1ytgl+8rlVrv+R3Ucvc0F9T3+/feO22/xRdp7+F/vwzmh5YPnjJhW1bvP8v/xv7cfL3w09tAzs0TkTGTmEC8eNT15f8ugjB2sNtG1rRXPGbnlWfjhG9gjbFm5roh878kYSO7vu+XoUXhgnd0ZHnK6IE0Zb4Feu9mTthTZ5AFq9rdAcZqlLLPwp3JJ/l4fb0UY6GfxTqvajvnP51dEHVzRiMcXhlXtKhUjXtkrH6rDKvz3NxJUBu8VsCRdv3/5J65emqUX5MMY1vDhw1XnC4N48WYzHmLub104Js/DmUWoD9MRc0NQWvKvRfJmawUcMWiJ/TBsKlW+NlqywhrqAsGlfR+TKZb7TyI6y9eP0WMqDB+8pCIYiYDiwTor25Bdz2EmRnsID3LXjbHAn916T7VO2WD4y1QS5PzF+Jh3GIvymNJWmMLmLBhi/AFBLAQIUAxQAAAAIAK1eP1A+3NKsfgMAAM0MAAAHAAAAAAAAAAAAAAC0gQAAAAB1c2VyLmpzUEsFBgAAAAABAAEANQAAAKMDAAAAAA=="}}}, "desiredCapabilities": {"browserName": "firefox", "acceptInsecureCerts": true, "marionette": true, "moz:firefoxOptions": {"profile": "UEsDBBQAAAAIAK1eP1A+3NKsfgMAAM0MAAAHAAAAdXNlci5qc6VWTW/UMBC98ytQTyCx1rbABU6lFAkJUcSq4mg59mTjrmMbe7zp/nvGyaYsbb6AWz7e89hvZt44RQjcByhfnBXBNfTGlKtZo61yDVOp9gysKAyos1fPMSR4+f5ZesoxAiGEZE/ApTBxBG2hQVGwFAzhzkThEr4rjLC7sym8F1tYtn5EETB5lhmEXE+jKlfDEblgL49Z3O3p5FoBqyM6266it9YFGFmAPqkb+6MVOJ6vmbYY3O33L9Phc1Jqcc9lFSgwjzJoj5wU56jrHPT1epiwDBnAu4BcGMPvIod7CR61s3Ew6XdiL7plmetgLFau+Wyv6NEZGCRZwMaFHZOCKHtY5XjCrAiw13ImrxFkChoPTMa+HEeAj5PTgJFZr9lSm2IyoZTO5xQzizRQqECHC1zIrCBPlNsUERSXEHBYzRNSjClHfCBp+gBhhtXpwa3IsnLYgx0JJLxnySvqVCYSumEFT0CLWk3p6I04gLo+X2++OqRcEuHNCNg11jihqDAtaRzasvlRgd1k9bXdTse6vv1yyfp2m7SjFvmadVmYsy5td1THYKnsycS6JF/MYcmSOo8cB7uyJPxIpfagAEJlZQBB0k4/6RDxkrSQI230YEOihPaZVFtoiqeMWphGhKV2CiLI6lgWc1BTxuRzc/f2PuajEGO2DiSnJBXayi/J27gMIlYzUSowhskK5O4jlCIZ/ND9mabRDImMjm1v7JVxceYoJ+gbyvgwmBQRnXdmVSsQBqvunS1ytgl+8rlVrv+R3Ucvc0F9T3+/feO22/xRdp7+F/vwzmh5YPnjJhW1bvP8v/xv7cfL3w09tAzs0TkTGTmEC8eNT15f8ugjB2sNtG1rRXPGbnlWfjhG9gjbFm5roh878kYSO7vu+XoUXhgnd0ZHnK6IE0Zb4Feu9mTthTZ5AFq9rdAcZqlLLPwp3JJ/l4fb0UY6GfxTqvajvnP51dEHVzRiMcXhlXtKhUjXtkrH6rDKvz3NxJUBu8VsCRdv3/5J65emqUX5MMY1vDhw1XnC4N48WYzHmLub104Js/DmUWoD9MRc0NQWvKvRfJmawUcMWiJ/TBsKlW+NlqywhrqAsGlfR+TKZb7TyI6y9eP0WMqDB+8pCIYiYDiwTor25Bdz2EmRnsID3LXjbHAn916T7VO2WD4y1QS5PzF+Jh3GIvymNJWmMLmLBhi/AFBLAQIUAxQAAAAIAK1eP1A+3NKsfgMAAM0MAAAHAAAAAAAAAAAAAAC0gQAAAAB1c2VyLmpzUEsFBgAAAAABAAEANQAAAKMDAAAAAA=="}}}</msg>
<msg timestamp="20200131 11:53:26.478" level="DEBUG">Starting new HTTP connection (1): 127.0.0.1:56685</msg>
<msg timestamp="20200131 11:53:29.975" level="DEBUG">http://127.0.0.1:56685 "POST /session HTTP/1.1" 200 704</msg>
<msg timestamp="20200131 11:53:29.976" level="DEBUG">Finished Request</msg>
<msg timestamp="20200131 11:53:29.976" level="DEBUG">POST http://127.0.0.1:56685/session/065ba814-a8c0-48e4-afa7-88251310f3a2/timeouts {"script": 5000}</msg>
<msg timestamp="20200131 11:53:29.982" level="DEBUG">http://127.0.0.1:56685 "POST /session/065ba814-a8c0-48e4-afa7-88251310f3a2/timeouts HTTP/1.1" 200 14</msg>
<msg timestamp="20200131 11:53:29.982" level="DEBUG">Finished Request</msg>
<msg timestamp="20200131 11:53:29.982" level="DEBUG">POST http://127.0.0.1:56685/session/065ba814-a8c0-48e4-afa7-88251310f3a2/timeouts {"implicit": 0}</msg>
<msg timestamp="20200131 11:53:29.983" level="DEBUG">http://127.0.0.1:56685 "POST /session/065ba814-a8c0-48e4-afa7-88251310f3a2/timeouts HTTP/1.1" 200 14</msg>
<msg timestamp="20200131 11:53:29.984" level="DEBUG">Finished Request</msg>
<msg timestamp="20200131 11:53:29.984" level="DEBUG">POST http://127.0.0.1:56685/session/065ba814-a8c0-48e4-afa7-88251310f3a2/url {"url": "https://www.amazon.com/"}</msg>
<msg timestamp="20200131 11:53:31.781" level="DEBUG">http://127.0.0.1:56685 "POST /session/065ba814-a8c0-48e4-afa7-88251310f3a2/url HTTP/1.1" 200 14</msg>
<msg timestamp="20200131 11:53:31.781" level="DEBUG">Finished Request</msg>
<msg timestamp="20200131 11:53:31.781" level="DEBUG">Opened browser with session id 065ba814-a8c0-48e4-afa7-88251310f3a2.</msg>
<msg timestamp="20200131 11:53:31.782" level="TRACE">Return: 2</msg>
<status status="PASS" starttime="20200131 11:53:25.468" endtime="20200131 11:53:31.782"></status>
</kw>
<msg timestamp="20200131 11:53:31.782" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:25.468" endtime="20200131 11:53:31.782"></status>
</kw>
<kw name="Search For A Product" library="amazon">
<doc>Looks for Ferrari 456 in Amazons search bar</doc>
<msg timestamp="20200131 11:53:31.787" level="TRACE">Arguments: [  ]</msg>
<kw name="Input Text" library="SeleniumLibrary">
<doc>Types the given ``text`` into the text field identified by ``locator``.</doc>
<arguments>
<arg>${TOPNAV_SEARCH_BOX}</arg>
<arg>${SEARCH_TERM}</arg>
</arguments>
<msg timestamp="20200131 11:53:31.790" level="TRACE">Arguments: [ 'css=*[id=twotabsearchtextbox]' | 'Ferrari 456' ]</msg>
<msg timestamp="20200131 11:53:31.790" level="INFO">Typing text 'Ferrari 456' into text field 'css=*[id=twotabsearchtextbox]'.</msg>
<msg timestamp="20200131 11:53:31.791" level="DEBUG">POST http://127.0.0.1:56685/session/065ba814-a8c0-48e4-afa7-88251310f3a2/elements {"using": "css selector", "value": "*[id=twotabsearchtextbox]"}</msg>
<msg timestamp="20200131 11:53:31.951" level="DEBUG">http://127.0.0.1:56685 "POST /session/065ba814-a8c0-48e4-afa7-88251310f3a2/elements HTTP/1.1" 200 90</msg>
<msg timestamp="20200131 11:53:31.951" level="DEBUG">Finished Request</msg>
<msg timestamp="20200131 11:53:31.951" level="DEBUG">POST http://127.0.0.1:56685/session/065ba814-a8c0-48e4-afa7-88251310f3a2/element/14e0346c-9fea-4118-af7b-0227373c3aa7/clear {"id": "14e0346c-9fea-4118-af7b-0227373c3aa7"}</msg>
<msg timestamp="20200131 11:53:32.177" level="DEBUG">http://127.0.0.1:56685 "POST /session/065ba814-a8c0-48e4-afa7-88251310f3a2/element/14e0346c-9fea-4118-af7b-0227373c3aa7/clear HTTP/1.1" 200 14</msg>
<msg timestamp="20200131 11:53:32.178" level="DEBUG">Finished Request</msg>
<msg timestamp="20200131 11:53:32.178" level="DEBUG">POST http://127.0.0.1:56685/session/065ba814-a8c0-48e4-afa7-88251310f3a2/element/14e0346c-9fea-4118-af7b-0227373c3aa7/value {"text": "Ferrari 456", "value": ["F", "e", "r", "r", "a", "r", "i", " ", "4", "5", "6"], "id": "14e0346c-9fea-4118-af7b-0227373c3aa7"}</msg>
<msg timestamp="20200131 11:53:32.238" level="DEBUG">http://127.0.0.1:56685 "POST /session/065ba814-a8c0-48e4-afa7-88251310f3a2/element/14e0346c-9fea-4118-af7b-0227373c3aa7/value HTTP/1.1" 200 14</msg>
<msg timestamp="20200131 11:53:32.238" level="DEBUG">Finished Request</msg>
<msg timestamp="20200131 11:53:32.238" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:31.787" endtime="20200131 11:53:32.238"></status>
</kw>
<kw name="Close Browser" library="SeleniumLibrary">
<doc>Closes the current browser.</doc>
<msg timestamp="20200131 11:53:32.238" level="TRACE">Arguments: [  ]</msg>
<msg timestamp="20200131 11:53:32.238" level="DEBUG">Closing browser with session id 065ba814-a8c0-48e4-afa7-88251310f3a2.</msg>
<msg timestamp="20200131 11:53:32.238" level="DEBUG">DELETE http://127.0.0.1:56685/session/065ba814-a8c0-48e4-afa7-88251310f3a2 {}</msg>
<msg timestamp="20200131 11:53:43.274" level="DEBUG">http://127.0.0.1:56685 "DELETE /session/065ba814-a8c0-48e4-afa7-88251310f3a2 HTTP/1.1" 200 14</msg>
<msg timestamp="20200131 11:53:43.274" level="DEBUG">Finished Request</msg>
<msg timestamp="20200131 11:53:43.274" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:32.238" endtime="20200131 11:53:43.274"></status>
</kw>
<msg timestamp="20200131 11:53:43.274" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:31.786" endtime="20200131 11:53:43.274"></status>
</kw>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${URL}</arg>
</arguments>
<msg timestamp="20200131 11:53:43.275" level="TRACE">Arguments: [ '${URL}' ]</msg>
<msg timestamp="20200131 11:53:43.275" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.275" endtime="20200131 11:53:43.276"></status>
</kw>
<doc>Refer to the test above: "(Test 1/2) Use "Import Resource" To Load "amazon.resource" file</doc>
<status status="PASS" starttime="20200131 11:53:25.467" endtime="20200131 11:53:43.277" critical="yes"></status>
</test>
<test id="s1-s1-t30" name="(Test 1/3) Use &quot;Import Variables&quot;">
<kw name="Import Variables" library="BuiltIn">
<doc>Imports a variable file with the given path and optional arguments.</doc>
<arguments>
<arg>/home/hakan/Python/Robot/built-in-library/Tests/variables.py</arg>
<arg>first</arg>
<arg>second</arg>
</arguments>
<msg timestamp="20200131 11:53:43.279" level="TRACE">Arguments: [ '/home/hakan/Python/Robot/built-in-library/Tests/variables.py' | 'first' | 'second' ]</msg>
<msg timestamp="20200131 11:53:43.280" level="FAIL">Variable file '/home/hakan/Python/Robot/built-in-library/Tests/variables.py' does not exist.</msg>
<msg timestamp="20200131 11:53:43.280" level="DEBUG">Traceback (most recent call last):
  None</msg>
<status status="FAIL" starttime="20200131 11:53:43.279" endtime="20200131 11:53:43.280"></status>
</kw>
<doc>https://robotframework.org/robotframework/latest/libraries/BuiltIn.html#Import%20Variables
Variables imported with this keyword are set into the test suite scope similarly
when importing them in the Setting table using the Variables setting
The given path must be absolute or found from search path.
Forward slashes can be used as path separator regardless the operating system.</doc>
<status status="FAIL" starttime="20200131 11:53:43.278" endtime="20200131 11:53:43.280" critical="yes">Variable file '/home/hakan/Python/Robot/built-in-library/Tests/variables.py' does not exist.</status>
</test>
<test id="s1-s1-t31" name="(Test 2/3) After Using The Keyword &quot;Import Variables&quot;, Referring To Imported Variables">
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${MAPPING}</arg>
</arguments>
<msg timestamp="20200131 11:53:43.285" level="FAIL">Variable '${MAPPING}' not found.</msg>
<status status="FAIL" starttime="20200131 11:53:43.284" endtime="20200131 11:53:43.285"></status>
</kw>
<status status="FAIL" starttime="20200131 11:53:43.284" endtime="20200131 11:53:43.286" critical="yes">Variable '${MAPPING}' not found.</status>
</test>
<test id="s1-s1-t32" name="(Test 3/3) Reading The Variables Initialized By Passing The Arguments &quot;first second&quot; To &quot;Import Variables&quot; Keyword">
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${variable #1 in get_variables}</arg>
<arg>first</arg>
</arguments>
<msg timestamp="20200131 11:53:43.289" level="TRACE">Arguments: [ '21' | 'first' ]</msg>
<msg timestamp="20200131 11:53:43.291" level="DEBUG">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20200131 11:53:43.291" level="FAIL">21 != first</msg>
<msg timestamp="20200131 11:53:43.291" level="DEBUG">Traceback (most recent call last):
  None</msg>
<status status="FAIL" starttime="20200131 11:53:43.289" endtime="20200131 11:53:43.291"></status>
</kw>
<doc>Refer to (Test 1/3) Use "Import Variables"
</doc>
<status status="FAIL" starttime="20200131 11:53:43.288" endtime="20200131 11:53:43.292" critical="yes">21 != first</status>
</test>
<test id="s1-s1-t33" name="Use &quot;Keyword Should Exist&quot;">
<kw name="Keyword Should Exist" library="BuiltIn">
<doc>Fails unless the given keyword exists in the current scope.</doc>
<arguments>
<arg>Search For A Product</arg>
</arguments>
<msg timestamp="20200131 11:53:43.293" level="TRACE">Arguments: [ 'Search For A Product' ]</msg>
<msg timestamp="20200131 11:53:43.293" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.293" endtime="20200131 11:53:43.293"></status>
</kw>
<doc>Fails unless the given keyword exists in the current scope.
Note that in (Test 1/2) Use "Import Resource" To Load amazon.resource file, we have used the following statement:
Import Resource /home/hakan/Python/Robot/built-in-library/Resources/amazon.resource</doc>
<status status="PASS" starttime="20200131 11:53:43.292" endtime="20200131 11:53:43.294" critical="yes"></status>
</test>
<test id="s1-s1-t34" name="Use &quot;Length Should Be&quot;">
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${1}</arg>
<arg>${2}</arg>
<arg>${3}</arg>
</arguments>
<assign>
<var>${lst}</var>
</assign>
<msg timestamp="20200131 11:53:43.295" level="TRACE">Arguments: [ 1 | 2 | 3 ]</msg>
<msg timestamp="20200131 11:53:43.295" level="TRACE">Return: [1, 2, 3]</msg>
<msg timestamp="20200131 11:53:43.295" level="INFO">${lst} = [1, 2, 3]</msg>
<status status="PASS" starttime="20200131 11:53:43.295" endtime="20200131 11:53:43.295"></status>
</kw>
<kw name="Length Should Be" library="BuiltIn">
<doc>Verifies that the length of the given item is correct.</doc>
<arguments>
<arg>${lst}</arg>
<arg>${3}</arg>
</arguments>
<msg timestamp="20200131 11:53:43.296" level="TRACE">Arguments: [ [1, 2, 3] | 3 ]</msg>
<msg timestamp="20200131 11:53:43.296" level="INFO">Length is 3</msg>
<msg timestamp="20200131 11:53:43.296" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.295" endtime="20200131 11:53:43.296"></status>
</kw>
<status status="PASS" starttime="20200131 11:53:43.295" endtime="20200131 11:53:43.297" critical="yes"></status>
</test>
<test id="s1-s1-t35" name="Use &quot;Log To Console&quot;">
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Check if this message is written to the console correctly</arg>
</arguments>
<msg timestamp="20200131 11:53:43.298" level="TRACE">Arguments: [ 'Check if this message is written to the console correctly' ]</msg>
<msg timestamp="20200131 11:53:43.298" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.298" endtime="20200131 11:53:43.298"></status>
</kw>
<status status="PASS" starttime="20200131 11:53:43.297" endtime="20200131 11:53:43.298" critical="yes"></status>
</test>
<test id="s1-s1-t36" name="Use &quot;Log Variables&quot;">
<kw name="Log Variables" library="BuiltIn">
<doc>Logs all variables in the current scope with given log level.</doc>
<msg timestamp="20200131 11:53:43.300" level="TRACE">Arguments: [  ]</msg>
<msg timestamp="20200131 11:53:43.300" level="INFO">${/} = /</msg>
<msg timestamp="20200131 11:53:43.300" level="INFO">${:} = :</msg>
<msg timestamp="20200131 11:53:43.300" level="INFO">${\n} = 
</msg>
<msg timestamp="20200131 11:53:43.300" level="INFO">${add_multiple_values} = &lt;function add_multiple_values at 0x7fd4ff64d320&gt;</msg>
<msg timestamp="20200131 11:53:43.300" level="INFO">${BROWSER} = Firefox</msg>
<msg timestamp="20200131 11:53:43.300" level="INFO">${BuiltIn} = &lt;class 'robot.libraries.BuiltIn.BuiltIn'&gt;</msg>
<msg timestamp="20200131 11:53:43.300" level="INFO">${DEBUG_FILE} = NONE</msg>
<msg timestamp="20200131 11:53:43.300" level="INFO">&amp;{DICTIONARY} = { key1=value1 | key2=value2 | key3=value3 }</msg>
<msg timestamp="20200131 11:53:43.300" level="INFO">${EXECDIR} = /home/hakan/Python/Robot/robot-fw-built-in-library-tests</msg>
<msg timestamp="20200131 11:53:43.300" level="INFO">${False} = False</msg>
<msg timestamp="20200131 11:53:43.300" level="INFO">${get_integer} = &lt;function get_integer at 0x7fd4ff64d200&gt;</msg>
<msg timestamp="20200131 11:53:43.301" level="INFO">${get_list} = &lt;function get_list at 0x7fd4ff64d4d0&gt;</msg>
<msg timestamp="20200131 11:53:43.301" level="INFO">${get_string_wrapper} = &lt;function get_string_wrapper at 0x7fd4ff64d830&gt;</msg>
<msg timestamp="20200131 11:53:43.301" level="INFO">${get_tuple} = &lt;function get_tuple at 0x7fd4ff64d440&gt;</msg>
<msg timestamp="20200131 11:53:43.301" level="INFO">${GLOBAL_VAR} = Global Value</msg>
<msg timestamp="20200131 11:53:43.301" level="INFO">${important-teardown} = Test Teardown Using "Run Keyword If Test Failed" And "Run Keyword If Test Passed"</msg>
<msg timestamp="20200131 11:53:43.301" level="INFO">${initialize_database} = &lt;function initialize_database at 0x7fd4ff6bc440&gt;</msg>
<msg timestamp="20200131 11:53:43.301" level="INFO">${is_float_in_python} = &lt;function is_float_in_python at 0x7fd4ff64d710&gt;</msg>
<msg timestamp="20200131 11:53:43.301" level="INFO">${is_integer_in_python} = &lt;function is_integer_in_python at 0x7fd4ff64d680&gt;</msg>
<msg timestamp="20200131 11:53:43.301" level="INFO">${is_list_in_python} = &lt;function is_list_in_python at 0x7fd4ff64d5f0&gt;</msg>
<msg timestamp="20200131 11:53:43.301" level="INFO">${is_string_in_python} = &lt;function is_string_in_python at 0x7fd4ff64d560&gt;</msg>
<msg timestamp="20200131 11:53:43.301" level="INFO">${keyword} = &lt;function keyword at 0x7fd4ffa064d0&gt;</msg>
<msg timestamp="20200131 11:53:43.301" level="INFO">${keyword_to_run} = add multiple values</msg>
<msg timestamp="20200131 11:53:43.301" level="INFO">@{LIST} = [ Value1 | Value2 | CONTINUE | Value3 ]</msg>
<msg timestamp="20200131 11:53:43.301" level="INFO">${LOG_FILE} = /home/hakan/Python/Robot/robot-fw-built-in-library-tests/Results/log.html</msg>
<msg timestamp="20200131 11:53:43.301" level="INFO">${LOG_LEVEL} = TRACE</msg>
<msg timestamp="20200131 11:53:43.301" level="INFO">${logger} = &lt;module 'robot.api.logger' from '/home/hakan/anaconda3/lib/python3.7/site-packages/robot/api/logger.py'&gt;</msg>
<msg timestamp="20200131 11:53:43.301" level="INFO">@{MULTI_LINE_LIST} = [ this | list | is | quite | long | and | items in it could also be long ]</msg>
<msg timestamp="20200131 11:53:43.301" level="INFO">${None} = None</msg>
<msg timestamp="20200131 11:53:43.301" level="INFO">${not-important-setup} = Not Important Setup</msg>
<msg timestamp="20200131 11:53:43.301" level="INFO">${null} = None</msg>
<msg timestamp="20200131 11:53:43.301" level="INFO">${OUTPUT_DIR} = /home/hakan/Python/Robot/robot-fw-built-in-library-tests/Results</msg>
<msg timestamp="20200131 11:53:43.301" level="INFO">${OUTPUT_FILE} = /home/hakan/Python/Robot/robot-fw-built-in-library-tests/Results/output.xml</msg>
<msg timestamp="20200131 11:53:43.301" level="INFO">${PREV_TEST_MESSAGE} = </msg>
<msg timestamp="20200131 11:53:43.301" level="INFO">${PREV_TEST_NAME} = Use "Log To Console"</msg>
<msg timestamp="20200131 11:53:43.301" level="INFO">${PREV_TEST_STATUS} = PASS</msg>
<msg timestamp="20200131 11:53:43.301" level="INFO">&amp;{python_dictionary} = { keyA=a | keyB=b | keyC=c }</msg>
<msg timestamp="20200131 11:53:43.301" level="INFO">@{python_list} = [ 1 | 2 | 3 ]</msg>
<msg timestamp="20200131 11:53:43.301" level="INFO">${raise_type_error_in_python} = &lt;function raise_type_error_in_python at 0x7fd4ff64d290&gt;</msg>
<msg timestamp="20200131 11:53:43.301" level="INFO">${REPORT_FILE} = /home/hakan/Python/Robot/robot-fw-built-in-library-tests/Results/report.html</msg>
<msg timestamp="20200131 11:53:43.301" level="INFO">${SEARCH_TERM} = Ferrari 456</msg>
<msg timestamp="20200131 11:53:43.301" level="INFO">${SPACE} =  </msg>
<msg timestamp="20200131 11:53:43.301" level="INFO">${start_servers} = &lt;function start_servers at 0x7fd4ff6bc4d0&gt;</msg>
<msg timestamp="20200131 11:53:43.301" level="INFO">${StringUtils} = &lt;class 'Utils.StringUtils'&gt;</msg>
<msg timestamp="20200131 11:53:43.301" level="INFO">${SUITE_DOCUMENTATION} = Checking out the built-in library's capabilities.</msg>
<msg timestamp="20200131 11:53:43.301" level="INFO">&amp;{SUITE_METADATA} = { }</msg>
<msg timestamp="20200131 11:53:43.301" level="INFO">${SUITE_NAME} = Built-In-Library-Test &amp; Utilize-Global-Variable.Built-In-Library-Test</msg>
<msg timestamp="20200131 11:53:43.301" level="INFO">${SUITE_SOURCE} = /home/hakan/Python/Robot/robot-fw-built-in-library-tests/Tests/built-in-library-test.robot</msg>
<msg timestamp="20200131 11:53:43.302" level="INFO">${TEMPDIR} = /tmp</msg>
<msg timestamp="20200131 11:53:43.302" level="INFO">${TEST_DOCUMENTATION} = </msg>
<msg timestamp="20200131 11:53:43.303" level="INFO">${TEST_NAME} = Use "Log Variables"</msg>
<msg timestamp="20200131 11:53:43.303" level="INFO">@{TEST_TAGS} = [ ]</msg>
<msg timestamp="20200131 11:53:43.303" level="INFO">${TestSetup} = Use Pass Execution Setup</msg>
<msg timestamp="20200131 11:53:43.303" level="INFO">${TestTeardown} = Use Pass Execution Teardown</msg>
<msg timestamp="20200131 11:53:43.303" level="INFO">${title_should_start_with} = &lt;function title_should_start_with at 0x7fd4ff64d3b0&gt;</msg>
<msg timestamp="20200131 11:53:43.303" level="INFO">${TITLE_TEXT} = Amazon</msg>
<msg timestamp="20200131 11:53:43.303" level="INFO">${TOPNAV_SEARCH_BOX} = css=*[id=twotabsearchtextbox]</msg>
<msg timestamp="20200131 11:53:43.303" level="INFO">${True} = True</msg>
<msg timestamp="20200131 11:53:43.303" level="INFO">${URL} = https://www.amazon.com/</msg>
<msg timestamp="20200131 11:53:43.303" level="INFO">${Util} = &lt;class 'Utils.Util'&gt;</msg>
<msg timestamp="20200131 11:53:43.303" level="INFO">${utility_function_one} = &lt;function utility_function_one at 0x7fd4ff64d7a0&gt;</msg>
<msg timestamp="20200131 11:53:43.303" level="INFO">${utility_object} = I am Util object from Python side</msg>
<msg timestamp="20200131 11:53:43.303" level="INFO">${VARIABLE} = 21</msg>
<msg timestamp="20200131 11:53:43.303" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.300" endtime="20200131 11:53:43.303"></status>
</kw>
<status status="PASS" starttime="20200131 11:53:43.299" endtime="20200131 11:53:43.306" critical="yes"></status>
</test>
<test id="s1-s1-t37" name="(Test 1/2) Use &quot;Pass Execution&quot;">
<kw name="Use Pass Execution Setup" type="setup">
<msg timestamp="20200131 11:53:43.307" level="TRACE">Arguments: [  ]</msg>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Setup executed</arg>
</arguments>
<msg timestamp="20200131 11:53:43.307" level="TRACE">Arguments: [ 'Setup executed' ]</msg>
<msg timestamp="20200131 11:53:43.307" level="INFO">Setup executed</msg>
<msg timestamp="20200131 11:53:43.307" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.307" endtime="20200131 11:53:43.307"></status>
</kw>
<msg timestamp="20200131 11:53:43.307" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.307" endtime="20200131 11:53:43.307"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${-10}</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20200131 11:53:43.307" level="TRACE">Arguments: [ -10 ]</msg>
<msg timestamp="20200131 11:53:43.307" level="TRACE">Return: -10</msg>
<msg timestamp="20200131 11:53:43.308" level="INFO">${value} = -10</msg>
<status status="PASS" starttime="20200131 11:53:43.307" endtime="20200131 11:53:43.308"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${value} &lt; 0</arg>
<arg>Pass Execution</arg>
<arg>message=Negative values are cool.</arg>
</arguments>
<msg timestamp="20200131 11:53:43.308" level="TRACE">Arguments: [ '-10 &lt; 0' | 'Pass Execution' | 'message=Negative values are cool.' ]</msg>
<kw name="Pass Execution" library="BuiltIn">
<doc>Skips rest of the current test, setup, or teardown with PASS status.</doc>
<arguments>
<arg>message=Negative values are cool.</arg>
</arguments>
<msg timestamp="20200131 11:53:43.308" level="TRACE">Arguments: [ message='Negative values are cool.' ]</msg>
<msg timestamp="20200131 11:53:43.308" level="INFO">Execution passed with message:
Negative values are cool.</msg>
<status status="PASS" starttime="20200131 11:53:43.308" endtime="20200131 11:53:43.309"></status>
</kw>
<status status="PASS" starttime="20200131 11:53:43.308" endtime="20200131 11:53:43.309"></status>
</kw>
<kw name="Use Pass Execution Teardown" type="teardown">
<msg timestamp="20200131 11:53:43.311" level="TRACE">Arguments: [  ]</msg>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Teardown executed</arg>
</arguments>
<msg timestamp="20200131 11:53:43.312" level="TRACE">Arguments: [ 'Teardown executed' ]</msg>
<msg timestamp="20200131 11:53:43.312" level="INFO">Teardown executed</msg>
<msg timestamp="20200131 11:53:43.312" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.311" endtime="20200131 11:53:43.312"></status>
</kw>
<msg timestamp="20200131 11:53:43.312" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.311" endtime="20200131 11:53:43.312"></status>
</kw>
<doc>https://robotframework.org/robotframework/latest/libraries/BuiltIn.html#Pass%20Execution
When used in a test outside setup or teardown, passes that particular test case.
Possible test and keyword teardowns are executed.</doc>
<status status="PASS" starttime="20200131 11:53:43.306" endtime="20200131 11:53:43.312" critical="yes">Negative values are cool.</status>
</test>
<test id="s1-s1-t38" name="(Test 2/2) Use &quot;Pass Execution&quot;">
<kw name="Pass Execution" library="BuiltIn">
<doc>Skips rest of the current test, setup, or teardown with PASS status.</doc>
<arguments>
<arg>(Test 2/2) Use "Pass Execution" passed with Pass Execution</arg>
</arguments>
<msg timestamp="20200131 11:53:43.314" level="TRACE">Arguments: [ '(Test 2/2) Use "Pass Execution" passed with Pass Execution' ]</msg>
<msg timestamp="20200131 11:53:43.314" level="INFO">Execution passed with message:
(Test 2/2) Use "Pass Execution" passed with Pass Execution</msg>
<status status="PASS" starttime="20200131 11:53:43.314" endtime="20200131 11:53:43.314"></status>
</kw>
<doc>https://robotframework.org/robotframework/latest/libraries/BuiltIn.html#Pass%20Execution
This keyword can be used anywhere in the test data, but the place where used affects the behavior:
When used in any setup or teardown (suite, test or keyword), passes that setup or teardown.
Possible keyword teardowns of the started keywords are executed. Does not affect execution or statuses otherwise.</doc>
<status status="PASS" starttime="20200131 11:53:43.313" endtime="20200131 11:53:43.316" critical="yes">(Test 2/2) Use "Pass Execution" passed with Pass Execution</status>
</test>
<test id="s1-s1-t39" name="Use &quot;Pass Execution If&quot;">
<kw name="Use Pass Execution Setup" type="setup">
<msg timestamp="20200131 11:53:43.316" level="TRACE">Arguments: [  ]</msg>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Setup executed</arg>
</arguments>
<msg timestamp="20200131 11:53:43.317" level="TRACE">Arguments: [ 'Setup executed' ]</msg>
<msg timestamp="20200131 11:53:43.317" level="INFO">Setup executed</msg>
<msg timestamp="20200131 11:53:43.317" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.317" endtime="20200131 11:53:43.317"></status>
</kw>
<msg timestamp="20200131 11:53:43.317" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.316" endtime="20200131 11:53:43.317"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${1}</arg>
<arg>${2}</arg>
<arg>Expected</arg>
<arg>${3}</arg>
<arg>${4}</arg>
</arguments>
<assign>
<var>@{lst}</var>
</assign>
<msg timestamp="20200131 11:53:43.317" level="TRACE">Arguments: [ 1 | 2 | 'Expected' | 3 | 4 ]</msg>
<msg timestamp="20200131 11:53:43.317" level="TRACE">Return: [1, 2, 'Expected', 3, 4]</msg>
<msg timestamp="20200131 11:53:43.317" level="INFO">@{lst} = [ 1 | 2 | Expected | 3 | 4 ]</msg>
<status status="PASS" starttime="20200131 11:53:43.317" endtime="20200131 11:53:43.317"></status>
</kw>
<kw name="${item} IN [ @{lst} ]" type="for">
<kw name="${item} = 1" type="foritem">
<kw name="Pass Execution If" library="BuiltIn">
<doc>Conditionally skips rest of the current test, setup, or teardown with PASS status.</doc>
<arguments>
<arg>'${item}' == 'Expected'</arg>
<arg>Correct value was found</arg>
</arguments>
<msg timestamp="20200131 11:53:43.319" level="TRACE">Arguments: [ "'1' == 'Expected'" | 'Correct value was found' ]</msg>
<msg timestamp="20200131 11:53:43.319" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.319" endtime="20200131 11:53:43.319"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${item}</arg>
</arguments>
<msg timestamp="20200131 11:53:43.319" level="TRACE">Arguments: [ 1 ]</msg>
<msg timestamp="20200131 11:53:43.319" level="INFO">1</msg>
<msg timestamp="20200131 11:53:43.319" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.319" endtime="20200131 11:53:43.319"></status>
</kw>
<status status="PASS" starttime="20200131 11:53:43.319" endtime="20200131 11:53:43.319"></status>
</kw>
<kw name="${item} = 2" type="foritem">
<kw name="Pass Execution If" library="BuiltIn">
<doc>Conditionally skips rest of the current test, setup, or teardown with PASS status.</doc>
<arguments>
<arg>'${item}' == 'Expected'</arg>
<arg>Correct value was found</arg>
</arguments>
<msg timestamp="20200131 11:53:43.320" level="TRACE">Arguments: [ "'2' == 'Expected'" | 'Correct value was found' ]</msg>
<msg timestamp="20200131 11:53:43.320" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.319" endtime="20200131 11:53:43.320"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${item}</arg>
</arguments>
<msg timestamp="20200131 11:53:43.320" level="TRACE">Arguments: [ 2 ]</msg>
<msg timestamp="20200131 11:53:43.320" level="INFO">2</msg>
<msg timestamp="20200131 11:53:43.320" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.320" endtime="20200131 11:53:43.320"></status>
</kw>
<status status="PASS" starttime="20200131 11:53:43.319" endtime="20200131 11:53:43.320"></status>
</kw>
<kw name="${item} = Expected" type="foritem">
<kw name="Pass Execution If" library="BuiltIn">
<doc>Conditionally skips rest of the current test, setup, or teardown with PASS status.</doc>
<arguments>
<arg>'${item}' == 'Expected'</arg>
<arg>Correct value was found</arg>
</arguments>
<msg timestamp="20200131 11:53:43.320" level="TRACE">Arguments: [ "'Expected' == 'Expected'" | 'Correct value was found' ]</msg>
<msg timestamp="20200131 11:53:43.320" level="INFO">Execution passed with message:
Correct value was found</msg>
<status status="PASS" starttime="20200131 11:53:43.320" endtime="20200131 11:53:43.321"></status>
</kw>
<status status="PASS" starttime="20200131 11:53:43.320" endtime="20200131 11:53:43.321"></status>
</kw>
<status status="PASS" starttime="20200131 11:53:43.319" endtime="20200131 11:53:43.321"></status>
</kw>
<kw name="Use Pass Execution Teardown" type="teardown">
<msg timestamp="20200131 11:53:43.326" level="TRACE">Arguments: [  ]</msg>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Teardown executed</arg>
</arguments>
<msg timestamp="20200131 11:53:43.326" level="TRACE">Arguments: [ 'Teardown executed' ]</msg>
<msg timestamp="20200131 11:53:43.326" level="INFO">Teardown executed</msg>
<msg timestamp="20200131 11:53:43.326" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.326" endtime="20200131 11:53:43.326"></status>
</kw>
<msg timestamp="20200131 11:53:43.326" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.325" endtime="20200131 11:53:43.326"></status>
</kw>
<status status="PASS" starttime="20200131 11:53:43.316" endtime="20200131 11:53:43.326" critical="yes">Correct value was found</status>
</test>
<test id="s1-s1-t40" name="Use &quot;Regexp Escape&quot;">
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>Test needs to be implemented</arg>
</arguments>
<msg timestamp="20200131 11:53:43.327" level="TRACE">Arguments: [ 'Test needs to be implemented' ]</msg>
<msg timestamp="20200131 11:53:43.327" level="FAIL">Test needs to be implemented</msg>
<msg timestamp="20200131 11:53:43.327" level="DEBUG">Traceback (most recent call last):
  None</msg>
<status status="FAIL" starttime="20200131 11:53:43.327" endtime="20200131 11:53:43.327"></status>
</kw>
<doc>Totally unclear</doc>
<tags>
<tag>not-understood</tag>
</tags>
<status status="FAIL" starttime="20200131 11:53:43.326" endtime="20200131 11:53:43.327" critical="yes">Test needs to be implemented</status>
</test>
<test id="s1-s1-t41" name="Use &quot;Reload Library&quot;">
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>Test needs to be implemented</arg>
</arguments>
<msg timestamp="20200131 11:53:43.328" level="TRACE">Arguments: [ 'Test needs to be implemented' ]</msg>
<msg timestamp="20200131 11:53:43.328" level="FAIL">Test needs to be implemented</msg>
<msg timestamp="20200131 11:53:43.328" level="DEBUG">Traceback (most recent call last):
  None</msg>
<status status="FAIL" starttime="20200131 11:53:43.328" endtime="20200131 11:53:43.328"></status>
</kw>
<doc>Totally unclear</doc>
<tags>
<tag>not-understood</tag>
</tags>
<status status="FAIL" starttime="20200131 11:53:43.327" endtime="20200131 11:53:43.328" critical="yes">Test needs to be implemented</status>
</test>
<test id="s1-s1-t42" name="Use &quot;Remove Tags&quot;">
<kw name="Set Tags" library="BuiltIn">
<doc>Adds given ``tags`` for the current test or all tests in a suite.</doc>
<arguments>
<arg>dynamic-tag-1</arg>
<arg>dynamic-tag-2</arg>
</arguments>
<msg timestamp="20200131 11:53:43.329" level="TRACE">Arguments: [ 'dynamic-tag-1' | 'dynamic-tag-2' ]</msg>
<msg timestamp="20200131 11:53:43.329" level="INFO">Set tags 'dynamic-tag-1' and 'dynamic-tag-2'.</msg>
<msg timestamp="20200131 11:53:43.329" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.328" endtime="20200131 11:53:43.329"></status>
</kw>
<kw name="Remove Tags" library="BuiltIn">
<doc>Removes given ``tags`` from the current test or all tests in a suite.</doc>
<arguments>
<arg>remove-me-tag-?</arg>
<arg>[dxyz]ynamic-tag-2</arg>
</arguments>
<msg timestamp="20200131 11:53:43.334" level="TRACE">Arguments: [ 'remove-me-tag-?' | '[dxyz]ynamic-tag-2' ]</msg>
<msg timestamp="20200131 11:53:43.334" level="INFO">Removed tags 'remove-me-tag-?' and '[dxyz]ynamic-tag-2'.</msg>
<msg timestamp="20200131 11:53:43.334" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.333" endtime="20200131 11:53:43.334"></status>
</kw>
<doc>When this test case got executed, it will have 2 tags: dynamic-tag-1 + keep-me-tag</doc>
<tags>
<tag>dynamic-tag-1</tag>
<tag>keep-me-tag</tag>
</tags>
<status status="PASS" starttime="20200131 11:53:43.328" endtime="20200131 11:53:43.334" critical="yes"></status>
</test>
<test id="s1-s1-t43" name="Use &quot;Repeat Keyword&quot;">
<kw name="Repeat Keyword" library="BuiltIn">
<doc>Executes the specified keyword multiple times.</doc>
<arguments>
<arg>3x</arg>
<arg>Log Many</arg>
<arg>Log Me 1</arg>
<arg>Log Me 2</arg>
</arguments>
<msg timestamp="20200131 11:53:43.335" level="TRACE">Arguments: [ '3x' | 'Log Many' | 'Log Me 1' | 'Log Me 2' ]</msg>
<msg timestamp="20200131 11:53:43.335" level="INFO">Repeating keyword, round 1/3.</msg>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>Log Me 1</arg>
<arg>Log Me 2</arg>
</arguments>
<msg timestamp="20200131 11:53:43.335" level="TRACE">Arguments: [ 'Log Me 1' | 'Log Me 2' ]</msg>
<msg timestamp="20200131 11:53:43.335" level="INFO">Log Me 1</msg>
<msg timestamp="20200131 11:53:43.335" level="INFO">Log Me 2</msg>
<msg timestamp="20200131 11:53:43.335" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.335" endtime="20200131 11:53:43.335"></status>
</kw>
<msg timestamp="20200131 11:53:43.335" level="INFO">Repeating keyword, round 2/3.</msg>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>Log Me 1</arg>
<arg>Log Me 2</arg>
</arguments>
<msg timestamp="20200131 11:53:43.336" level="TRACE">Arguments: [ 'Log Me 1' | 'Log Me 2' ]</msg>
<msg timestamp="20200131 11:53:43.336" level="INFO">Log Me 1</msg>
<msg timestamp="20200131 11:53:43.336" level="INFO">Log Me 2</msg>
<msg timestamp="20200131 11:53:43.336" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.335" endtime="20200131 11:53:43.336"></status>
</kw>
<msg timestamp="20200131 11:53:43.336" level="INFO">Repeating keyword, round 3/3.</msg>
<kw name="Log Many" library="BuiltIn">
<doc>Logs the given messages as separate entries using the INFO level.</doc>
<arguments>
<arg>Log Me 1</arg>
<arg>Log Me 2</arg>
</arguments>
<msg timestamp="20200131 11:53:43.336" level="TRACE">Arguments: [ 'Log Me 1' | 'Log Me 2' ]</msg>
<msg timestamp="20200131 11:53:43.336" level="INFO">Log Me 1</msg>
<msg timestamp="20200131 11:53:43.336" level="INFO">Log Me 2</msg>
<msg timestamp="20200131 11:53:43.336" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.336" endtime="20200131 11:53:43.336"></status>
</kw>
<msg timestamp="20200131 11:53:43.336" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.335" endtime="20200131 11:53:43.336"></status>
</kw>
<doc>repeat, name, *args
Executes the specified keyword (i.e. name) multiple times.</doc>
<status status="PASS" starttime="20200131 11:53:43.335" endtime="20200131 11:53:43.336" critical="yes"></status>
</test>
<test id="s1-s1-t44" name="Use &quot;Replace Variables&quot;">
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>key1=value1</arg>
<arg>key2=value2</arg>
</arguments>
<assign>
<var>&amp;{d}</var>
</assign>
<msg timestamp="20200131 11:53:43.337" level="TRACE">Arguments: [ 'key1=value1' | 'key2=value2' ]</msg>
<msg timestamp="20200131 11:53:43.337" level="TRACE">Return: {'key1': 'value1', 'key2': 'value2'}</msg>
<msg timestamp="20200131 11:53:43.337" level="INFO">&amp;{d} = { key1=value1 | key2=value2 }</msg>
<status status="PASS" starttime="20200131 11:53:43.337" endtime="20200131 11:53:43.337"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${1}</arg>
<arg>${2}</arg>
<arg>${3}</arg>
</arguments>
<assign>
<var>@{l}</var>
</assign>
<msg timestamp="20200131 11:53:43.337" level="TRACE">Arguments: [ 1 | 2 | 3 ]</msg>
<msg timestamp="20200131 11:53:43.337" level="TRACE">Return: [1, 2, 3]</msg>
<msg timestamp="20200131 11:53:43.337" level="INFO">@{l} = [ 1 | 2 | 3 ]</msg>
<status status="PASS" starttime="20200131 11:53:43.337" endtime="20200131 11:53:43.337"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${l}</arg>
</arguments>
<assign>
<var>${l_rereturned}</var>
</assign>
<msg timestamp="20200131 11:53:43.338" level="TRACE">Arguments: [ [1, 2, 3] ]</msg>
<msg timestamp="20200131 11:53:43.338" level="TRACE">Return: [1, 2, 3]</msg>
<msg timestamp="20200131 11:53:43.338" level="INFO">${l_rereturned} = [1, 2, 3]</msg>
<status status="PASS" starttime="20200131 11:53:43.338" endtime="20200131 11:53:43.338"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${l}</arg>
<arg>${l_rereturned}</arg>
</arguments>
<msg timestamp="20200131 11:53:43.338" level="TRACE">Arguments: [ [1, 2, 3] | [1, 2, 3] ]</msg>
<msg timestamp="20200131 11:53:43.339" level="DEBUG">Argument types are:
&lt;class 'list'&gt;
&lt;class 'list'&gt;</msg>
<msg timestamp="20200131 11:53:43.339" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.338" endtime="20200131 11:53:43.339"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${d} ${l}</arg>
</arguments>
<assign>
<var>${variable_values_in_string_format_seperated_by_a_space_character}</var>
</assign>
<msg timestamp="20200131 11:53:43.341" level="TRACE">Arguments: [ "{'key1': 'value1', 'key2': 'value2'} [1, 2, 3]" ]</msg>
<msg timestamp="20200131 11:53:43.341" level="TRACE">Return: "{'key1': 'value1', 'key2': 'value2'} [1, 2, 3]"</msg>
<msg timestamp="20200131 11:53:43.341" level="INFO">${variable_values_in_string_format_seperated_by_a_space_character} = {'key1': 'value1', 'key2': 'value2'} [1, 2, 3]</msg>
<status status="PASS" starttime="20200131 11:53:43.341" endtime="20200131 11:53:43.341"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${variable_values_in_string_format_seperated_by_a_space_character}</arg>
<arg>{'key1': 'value1', 'key2': 'value2'} [1, 2, 3]</arg>
</arguments>
<msg timestamp="20200131 11:53:43.341" level="TRACE">Arguments: [ "{'key1': 'value1', 'key2': 'value2'} [1, 2, 3]" | "{'key1': 'value1', 'key2': 'value2'} [1, 2, 3]" ]</msg>
<msg timestamp="20200131 11:53:43.341" level="DEBUG">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20200131 11:53:43.341" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.341" endtime="20200131 11:53:43.341"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${d}+${l}</arg>
</arguments>
<assign>
<var>${variable_values_in_string_format_seperated_by_a_plus_character}</var>
</assign>
<msg timestamp="20200131 11:53:43.341" level="TRACE">Arguments: [ "{'key1': 'value1', 'key2': 'value2'}+[1, 2, 3]" ]</msg>
<msg timestamp="20200131 11:53:43.341" level="TRACE">Return: "{'key1': 'value1', 'key2': 'value2'}+[1, 2, 3]"</msg>
<msg timestamp="20200131 11:53:43.342" level="INFO">${variable_values_in_string_format_seperated_by_a_plus_character} = {'key1': 'value1', 'key2': 'value2'}+[1, 2, 3]</msg>
<status status="PASS" starttime="20200131 11:53:43.341" endtime="20200131 11:53:43.342"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${variable_values_in_string_format_seperated_by_a_plus_character}</arg>
<arg>{'key1': 'value1', 'key2': 'value2'}+[1, 2, 3]</arg>
</arguments>
<msg timestamp="20200131 11:53:43.342" level="TRACE">Arguments: [ "{'key1': 'value1', 'key2': 'value2'}+[1, 2, 3]" | "{'key1': 'value1', 'key2': 'value2'}+[1, 2, 3]" ]</msg>
<msg timestamp="20200131 11:53:43.342" level="DEBUG">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20200131 11:53:43.342" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.342" endtime="20200131 11:53:43.342"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>If the text contains undefined variables, "Replace Variables" keyword fails</arg>
</arguments>
<msg timestamp="20200131 11:53:43.344" level="TRACE">Arguments: [ 'If the text contains undefined variables, "Replace Variables" keyword fails' ]</msg>
<msg timestamp="20200131 11:53:43.344" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.344" endtime="20200131 11:53:43.344"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${l} ${non existing variable}</arg>
</arguments>
<assign>
<var>${will_fail}</var>
</assign>
<msg timestamp="20200131 11:53:43.345" level="FAIL">Variable '${non existing variable}' not found.</msg>
<status status="FAIL" starttime="20200131 11:53:43.344" endtime="20200131 11:53:43.345"></status>
</kw>
<doc>Replace Variables text
Replaces variables in the given text with their current values as strings
In other words it returns the string representation of each and every variable
in text argument</doc>
<tags>
<tag>failure-expected</tag>
</tags>
<status status="FAIL" starttime="20200131 11:53:43.336" endtime="20200131 11:53:43.345" critical="no">Variable '${non existing variable}' not found.</status>
</test>
<test id="s1-s1-t45" name="Use &quot;Return From Keyword&quot;">
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${1}</arg>
<arg>${2}</arg>
<arg>${3}</arg>
</arguments>
<assign>
<var>@{l}</var>
</assign>
<msg timestamp="20200131 11:53:43.346" level="TRACE">Arguments: [ 1 | 2 | 3 ]</msg>
<msg timestamp="20200131 11:53:43.346" level="TRACE">Return: [1, 2, 3]</msg>
<msg timestamp="20200131 11:53:43.346" level="INFO">@{l} = [ 1 | 2 | 3 ]</msg>
<status status="PASS" starttime="20200131 11:53:43.346" endtime="20200131 11:53:43.346"></status>
</kw>
<kw name="Find Index (version one)">
<arguments>
<arg>${2}</arg>
<arg>@{l}</arg>
</arguments>
<assign>
<var>${found_index}</var>
<var>${element_to_look_for}</var>
</assign>
<msg timestamp="20200131 11:53:43.348" level="TRACE">Arguments: [ ${element_to_look_for}=2 | @{items}=[1, 2, 3] ]</msg>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${0}</arg>
</arguments>
<assign>
<var>${index}</var>
</assign>
<msg timestamp="20200131 11:53:43.348" level="TRACE">Arguments: [ 0 ]</msg>
<msg timestamp="20200131 11:53:43.348" level="TRACE">Return: 0</msg>
<msg timestamp="20200131 11:53:43.348" level="INFO">${index} = 0</msg>
<status status="PASS" starttime="20200131 11:53:43.348" endtime="20200131 11:53:43.348"></status>
</kw>
<kw name="${item} IN [ @{items} ]" type="for">
<kw name="${item} = 1" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$item == $element_to_look_for</arg>
<arg>Return From Keyword</arg>
<arg>${index}</arg>
<arg>${item}</arg>
</arguments>
<msg timestamp="20200131 11:53:43.349" level="TRACE">Arguments: [ '$item == $element_to_look_for' | 'Return From Keyword' | '${index}' | '${item}' ]</msg>
<msg timestamp="20200131 11:53:43.349" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.348" endtime="20200131 11:53:43.349"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>$index + 1</arg>
</arguments>
<assign>
<var>${index}</var>
</assign>
<msg timestamp="20200131 11:53:43.349" level="TRACE">Arguments: [ '$index + 1' ]</msg>
<msg timestamp="20200131 11:53:43.350" level="TRACE">Return: 1</msg>
<msg timestamp="20200131 11:53:43.350" level="INFO">${index} = 1</msg>
<status status="PASS" starttime="20200131 11:53:43.349" endtime="20200131 11:53:43.350"></status>
</kw>
<status status="PASS" starttime="20200131 11:53:43.348" endtime="20200131 11:53:43.350"></status>
</kw>
<kw name="${item} = 2" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$item == $element_to_look_for</arg>
<arg>Return From Keyword</arg>
<arg>${index}</arg>
<arg>${item}</arg>
</arguments>
<msg timestamp="20200131 11:53:43.350" level="TRACE">Arguments: [ '$item == $element_to_look_for' | 'Return From Keyword' | '${index}' | '${item}' ]</msg>
<kw name="Return From Keyword" library="BuiltIn">
<doc>Returns from the enclosing user keyword.</doc>
<arguments>
<arg>${index}</arg>
<arg>${item}</arg>
</arguments>
<msg timestamp="20200131 11:53:43.351" level="TRACE">Arguments: [ '${index}' | '${item}' ]</msg>
<msg timestamp="20200131 11:53:43.351" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20200131 11:53:43.351" endtime="20200131 11:53:43.351"></status>
</kw>
<status status="PASS" starttime="20200131 11:53:43.350" endtime="20200131 11:53:43.351"></status>
</kw>
<status status="PASS" starttime="20200131 11:53:43.350" endtime="20200131 11:53:43.351"></status>
</kw>
<status status="PASS" starttime="20200131 11:53:43.348" endtime="20200131 11:53:43.351"></status>
</kw>
<msg timestamp="20200131 11:53:43.351" level="TRACE">Return: [1, 2]</msg>
<msg timestamp="20200131 11:53:43.351" level="INFO">${found_index} = 1</msg>
<msg timestamp="20200131 11:53:43.351" level="INFO">${element_to_look_for} = 2</msg>
<status status="PASS" starttime="20200131 11:53:43.348" endtime="20200131 11:53:43.351"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>$found_index==1</arg>
</arguments>
<msg timestamp="20200131 11:53:43.355" level="TRACE">Arguments: [ '$found_index==1' ]</msg>
<msg timestamp="20200131 11:53:43.356" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.355" endtime="20200131 11:53:43.356"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>$element_to_look_for==2</arg>
</arguments>
<msg timestamp="20200131 11:53:43.358" level="TRACE">Arguments: [ '$element_to_look_for==2' ]</msg>
<msg timestamp="20200131 11:53:43.359" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.358" endtime="20200131 11:53:43.359"></status>
</kw>
<kw name="Find Index (version one)">
<arguments>
<arg>non-existing-value</arg>
<arg>@{l}</arg>
</arguments>
<assign>
<var>${found_index}</var>
<var>${element_to_look_for}</var>
</assign>
<msg timestamp="20200131 11:53:43.359" level="TRACE">Arguments: [ ${element_to_look_for}='non-existing-value' | @{items}=[1, 2, 3] ]</msg>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${0}</arg>
</arguments>
<assign>
<var>${index}</var>
</assign>
<msg timestamp="20200131 11:53:43.359" level="TRACE">Arguments: [ 0 ]</msg>
<msg timestamp="20200131 11:53:43.359" level="TRACE">Return: 0</msg>
<msg timestamp="20200131 11:53:43.359" level="INFO">${index} = 0</msg>
<status status="PASS" starttime="20200131 11:53:43.359" endtime="20200131 11:53:43.359"></status>
</kw>
<kw name="${item} IN [ @{items} ]" type="for">
<kw name="${item} = 1" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$item == $element_to_look_for</arg>
<arg>Return From Keyword</arg>
<arg>${index}</arg>
<arg>${item}</arg>
</arguments>
<msg timestamp="20200131 11:53:43.360" level="TRACE">Arguments: [ '$item == $element_to_look_for' | 'Return From Keyword' | '${index}' | '${item}' ]</msg>
<msg timestamp="20200131 11:53:43.360" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.360" endtime="20200131 11:53:43.360"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>$index + 1</arg>
</arguments>
<assign>
<var>${index}</var>
</assign>
<msg timestamp="20200131 11:53:43.361" level="TRACE">Arguments: [ '$index + 1' ]</msg>
<msg timestamp="20200131 11:53:43.361" level="TRACE">Return: 1</msg>
<msg timestamp="20200131 11:53:43.361" level="INFO">${index} = 1</msg>
<status status="PASS" starttime="20200131 11:53:43.360" endtime="20200131 11:53:43.361"></status>
</kw>
<status status="PASS" starttime="20200131 11:53:43.359" endtime="20200131 11:53:43.361"></status>
</kw>
<kw name="${item} = 2" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$item == $element_to_look_for</arg>
<arg>Return From Keyword</arg>
<arg>${index}</arg>
<arg>${item}</arg>
</arguments>
<msg timestamp="20200131 11:53:43.361" level="TRACE">Arguments: [ '$item == $element_to_look_for' | 'Return From Keyword' | '${index}' | '${item}' ]</msg>
<msg timestamp="20200131 11:53:43.366" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.361" endtime="20200131 11:53:43.366"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>$index + 1</arg>
</arguments>
<assign>
<var>${index}</var>
</assign>
<msg timestamp="20200131 11:53:43.366" level="TRACE">Arguments: [ '$index + 1' ]</msg>
<msg timestamp="20200131 11:53:43.367" level="TRACE">Return: 2</msg>
<msg timestamp="20200131 11:53:43.367" level="INFO">${index} = 2</msg>
<status status="PASS" starttime="20200131 11:53:43.366" endtime="20200131 11:53:43.367"></status>
</kw>
<status status="PASS" starttime="20200131 11:53:43.361" endtime="20200131 11:53:43.367"></status>
</kw>
<kw name="${item} = 3" type="foritem">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$item == $element_to_look_for</arg>
<arg>Return From Keyword</arg>
<arg>${index}</arg>
<arg>${item}</arg>
</arguments>
<msg timestamp="20200131 11:53:43.367" level="TRACE">Arguments: [ '$item == $element_to_look_for' | 'Return From Keyword' | '${index}' | '${item}' ]</msg>
<msg timestamp="20200131 11:53:43.368" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.367" endtime="20200131 11:53:43.368"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>$index + 1</arg>
</arguments>
<assign>
<var>${index}</var>
</assign>
<msg timestamp="20200131 11:53:43.368" level="TRACE">Arguments: [ '$index + 1' ]</msg>
<msg timestamp="20200131 11:53:43.368" level="TRACE">Return: 3</msg>
<msg timestamp="20200131 11:53:43.368" level="INFO">${index} = 3</msg>
<status status="PASS" starttime="20200131 11:53:43.368" endtime="20200131 11:53:43.368"></status>
</kw>
<status status="PASS" starttime="20200131 11:53:43.367" endtime="20200131 11:53:43.368"></status>
</kw>
<status status="PASS" starttime="20200131 11:53:43.359" endtime="20200131 11:53:43.368"></status>
</kw>
<msg timestamp="20200131 11:53:43.369" level="TRACE">Return: ['Not Found', 'non-existing-value']</msg>
<msg timestamp="20200131 11:53:43.369" level="INFO">${found_index} = Not Found</msg>
<msg timestamp="20200131 11:53:43.369" level="INFO">${element_to_look_for} = non-existing-value</msg>
<status status="PASS" starttime="20200131 11:53:43.359" endtime="20200131 11:53:43.369"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>$found_index=='Not Found'</arg>
</arguments>
<msg timestamp="20200131 11:53:43.372" level="TRACE">Arguments: [ "$found_index=='Not Found'" ]</msg>
<msg timestamp="20200131 11:53:43.373" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.371" endtime="20200131 11:53:43.373"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>$element_to_look_for=='non-existing-value'</arg>
</arguments>
<msg timestamp="20200131 11:53:43.374" level="TRACE">Arguments: [ "$element_to_look_for=='non-existing-value'" ]</msg>
<msg timestamp="20200131 11:53:43.375" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.374" endtime="20200131 11:53:43.375"></status>
</kw>
<status status="PASS" starttime="20200131 11:53:43.345" endtime="20200131 11:53:43.378" critical="yes"></status>
</test>
<test id="s1-s1-t46" name="Use &quot;Return From Keyword If&quot;">
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${1}</arg>
<arg>${2}</arg>
<arg>${3}</arg>
</arguments>
<assign>
<var>@{l}</var>
</assign>
<msg timestamp="20200131 11:53:43.378" level="TRACE">Arguments: [ 1 | 2 | 3 ]</msg>
<msg timestamp="20200131 11:53:43.378" level="TRACE">Return: [1, 2, 3]</msg>
<msg timestamp="20200131 11:53:43.378" level="INFO">@{l} = [ 1 | 2 | 3 ]</msg>
<status status="PASS" starttime="20200131 11:53:43.378" endtime="20200131 11:53:43.378"></status>
</kw>
<kw name="Find Index (version two)">
<arguments>
<arg>${2}</arg>
<arg>@{l}</arg>
</arguments>
<assign>
<var>${found_index}</var>
<var>${element_to_look_for}</var>
</assign>
<msg timestamp="20200131 11:53:43.379" level="TRACE">Arguments: [ ${element_to_look_for}=2 | @{items}=[1, 2, 3] ]</msg>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${0}</arg>
</arguments>
<assign>
<var>${index}</var>
</assign>
<msg timestamp="20200131 11:53:43.379" level="TRACE">Arguments: [ 0 ]</msg>
<msg timestamp="20200131 11:53:43.379" level="TRACE">Return: 0</msg>
<msg timestamp="20200131 11:53:43.379" level="INFO">${index} = 0</msg>
<status status="PASS" starttime="20200131 11:53:43.379" endtime="20200131 11:53:43.379"></status>
</kw>
<kw name="${item} IN [ @{items} ]" type="for">
<kw name="${item} = 1" type="foritem">
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>$item == $element_to_look_for</arg>
<arg>${index}</arg>
<arg>${item}</arg>
</arguments>
<msg timestamp="20200131 11:53:43.379" level="TRACE">Arguments: [ '$item == $element_to_look_for' | '${index}' | '${item}' ]</msg>
<msg timestamp="20200131 11:53:43.380" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.379" endtime="20200131 11:53:43.380"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>$index + 1</arg>
</arguments>
<assign>
<var>${index}</var>
</assign>
<msg timestamp="20200131 11:53:43.380" level="TRACE">Arguments: [ '$index + 1' ]</msg>
<msg timestamp="20200131 11:53:43.380" level="TRACE">Return: 1</msg>
<msg timestamp="20200131 11:53:43.380" level="INFO">${index} = 1</msg>
<status status="PASS" starttime="20200131 11:53:43.380" endtime="20200131 11:53:43.380"></status>
</kw>
<status status="PASS" starttime="20200131 11:53:43.379" endtime="20200131 11:53:43.380"></status>
</kw>
<kw name="${item} = 2" type="foritem">
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>$item == $element_to_look_for</arg>
<arg>${index}</arg>
<arg>${item}</arg>
</arguments>
<msg timestamp="20200131 11:53:43.381" level="TRACE">Arguments: [ '$item == $element_to_look_for' | '${index}' | '${item}' ]</msg>
<msg timestamp="20200131 11:53:43.381" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20200131 11:53:43.381" endtime="20200131 11:53:43.381"></status>
</kw>
<status status="PASS" starttime="20200131 11:53:43.380" endtime="20200131 11:53:43.381"></status>
</kw>
<status status="PASS" starttime="20200131 11:53:43.379" endtime="20200131 11:53:43.381"></status>
</kw>
<msg timestamp="20200131 11:53:43.381" level="TRACE">Return: [1, 2]</msg>
<msg timestamp="20200131 11:53:43.381" level="INFO">${found_index} = 1</msg>
<msg timestamp="20200131 11:53:43.381" level="INFO">${element_to_look_for} = 2</msg>
<status status="PASS" starttime="20200131 11:53:43.378" endtime="20200131 11:53:43.381"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>$found_index==1</arg>
</arguments>
<msg timestamp="20200131 11:53:43.386" level="TRACE">Arguments: [ '$found_index==1' ]</msg>
<msg timestamp="20200131 11:53:43.387" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.386" endtime="20200131 11:53:43.387"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>$element_to_look_for==2</arg>
</arguments>
<msg timestamp="20200131 11:53:43.387" level="TRACE">Arguments: [ '$element_to_look_for==2' ]</msg>
<msg timestamp="20200131 11:53:43.388" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.387" endtime="20200131 11:53:43.388"></status>
</kw>
<kw name="Find Index (version two)">
<arguments>
<arg>non-existing-value</arg>
<arg>@{l}</arg>
</arguments>
<assign>
<var>${found_index}</var>
<var>${element_to_look_for}</var>
</assign>
<msg timestamp="20200131 11:53:43.392" level="TRACE">Arguments: [ ${element_to_look_for}='non-existing-value' | @{items}=[1, 2, 3] ]</msg>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${0}</arg>
</arguments>
<assign>
<var>${index}</var>
</assign>
<msg timestamp="20200131 11:53:43.392" level="TRACE">Arguments: [ 0 ]</msg>
<msg timestamp="20200131 11:53:43.392" level="TRACE">Return: 0</msg>
<msg timestamp="20200131 11:53:43.392" level="INFO">${index} = 0</msg>
<status status="PASS" starttime="20200131 11:53:43.392" endtime="20200131 11:53:43.392"></status>
</kw>
<kw name="${item} IN [ @{items} ]" type="for">
<kw name="${item} = 1" type="foritem">
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>$item == $element_to_look_for</arg>
<arg>${index}</arg>
<arg>${item}</arg>
</arguments>
<msg timestamp="20200131 11:53:43.393" level="TRACE">Arguments: [ '$item == $element_to_look_for' | '${index}' | '${item}' ]</msg>
<msg timestamp="20200131 11:53:43.393" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.393" endtime="20200131 11:53:43.393"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>$index + 1</arg>
</arguments>
<assign>
<var>${index}</var>
</assign>
<msg timestamp="20200131 11:53:43.393" level="TRACE">Arguments: [ '$index + 1' ]</msg>
<msg timestamp="20200131 11:53:43.397" level="TRACE">Return: 1</msg>
<msg timestamp="20200131 11:53:43.397" level="INFO">${index} = 1</msg>
<status status="PASS" starttime="20200131 11:53:43.393" endtime="20200131 11:53:43.397"></status>
</kw>
<status status="PASS" starttime="20200131 11:53:43.392" endtime="20200131 11:53:43.397"></status>
</kw>
<kw name="${item} = 2" type="foritem">
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>$item == $element_to_look_for</arg>
<arg>${index}</arg>
<arg>${item}</arg>
</arguments>
<msg timestamp="20200131 11:53:43.397" level="TRACE">Arguments: [ '$item == $element_to_look_for' | '${index}' | '${item}' ]</msg>
<msg timestamp="20200131 11:53:43.397" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.397" endtime="20200131 11:53:43.397"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>$index + 1</arg>
</arguments>
<assign>
<var>${index}</var>
</assign>
<msg timestamp="20200131 11:53:43.398" level="TRACE">Arguments: [ '$index + 1' ]</msg>
<msg timestamp="20200131 11:53:43.398" level="TRACE">Return: 2</msg>
<msg timestamp="20200131 11:53:43.398" level="INFO">${index} = 2</msg>
<status status="PASS" starttime="20200131 11:53:43.397" endtime="20200131 11:53:43.398"></status>
</kw>
<status status="PASS" starttime="20200131 11:53:43.397" endtime="20200131 11:53:43.398"></status>
</kw>
<kw name="${item} = 3" type="foritem">
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>$item == $element_to_look_for</arg>
<arg>${index}</arg>
<arg>${item}</arg>
</arguments>
<msg timestamp="20200131 11:53:43.398" level="TRACE">Arguments: [ '$item == $element_to_look_for' | '${index}' | '${item}' ]</msg>
<msg timestamp="20200131 11:53:43.399" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.398" endtime="20200131 11:53:43.399"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>$index + 1</arg>
</arguments>
<assign>
<var>${index}</var>
</assign>
<msg timestamp="20200131 11:53:43.399" level="TRACE">Arguments: [ '$index + 1' ]</msg>
<msg timestamp="20200131 11:53:43.400" level="TRACE">Return: 3</msg>
<msg timestamp="20200131 11:53:43.400" level="INFO">${index} = 3</msg>
<status status="PASS" starttime="20200131 11:53:43.399" endtime="20200131 11:53:43.400"></status>
</kw>
<status status="PASS" starttime="20200131 11:53:43.398" endtime="20200131 11:53:43.400"></status>
</kw>
<status status="PASS" starttime="20200131 11:53:43.392" endtime="20200131 11:53:43.400"></status>
</kw>
<msg timestamp="20200131 11:53:43.400" level="TRACE">Return: ['Not Found', 'non-existing-value']</msg>
<msg timestamp="20200131 11:53:43.400" level="INFO">${found_index} = Not Found</msg>
<msg timestamp="20200131 11:53:43.400" level="INFO">${element_to_look_for} = non-existing-value</msg>
<status status="PASS" starttime="20200131 11:53:43.392" endtime="20200131 11:53:43.400"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>$found_index=='Not Found'</arg>
</arguments>
<msg timestamp="20200131 11:53:43.402" level="TRACE">Arguments: [ "$found_index=='Not Found'" ]</msg>
<msg timestamp="20200131 11:53:43.402" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.402" endtime="20200131 11:53:43.402"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>$element_to_look_for=='non-existing-value'</arg>
</arguments>
<msg timestamp="20200131 11:53:43.404" level="TRACE">Arguments: [ "$element_to_look_for=='non-existing-value'" ]</msg>
<msg timestamp="20200131 11:53:43.405" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.404" endtime="20200131 11:53:43.406"></status>
</kw>
<status status="PASS" starttime="20200131 11:53:43.378" endtime="20200131 11:53:43.406" critical="yes"></status>
</test>
<test id="s1-s1-t47" name="Use &quot;Run Keyword&quot; With A Provided Keyword From Command Line">
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>${keyword_to_run}</arg>
<arg>${1}</arg>
<arg>${1}</arg>
<arg>${1}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20200131 11:53:43.410" level="TRACE">Arguments: [ 'add multiple values' | '${1}' | '${1}' | '${1}' ]</msg>
<kw name="Add Multiple Values" library="Utils">
<arguments>
<arg>${1}</arg>
<arg>${1}</arg>
<arg>${1}</arg>
</arguments>
<msg timestamp="20200131 11:53:43.410" level="TRACE">Arguments: [ 1 | 1 | 1 ]</msg>
<msg timestamp="20200131 11:53:43.410" level="TRACE">Return: 3</msg>
<status status="PASS" starttime="20200131 11:53:43.410" endtime="20200131 11:53:43.410"></status>
</kw>
<msg timestamp="20200131 11:53:43.410" level="TRACE">Return: 3</msg>
<msg timestamp="20200131 11:53:43.410" level="INFO">${result} = 3</msg>
<status status="PASS" starttime="20200131 11:53:43.410" endtime="20200131 11:53:43.410"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>$result == 3</arg>
</arguments>
<msg timestamp="20200131 11:53:43.411" level="TRACE">Arguments: [ '$result == 3' ]</msg>
<msg timestamp="20200131 11:53:43.411" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.411" endtime="20200131 11:53:43.411"></status>
</kw>
<doc>Because the name of the keyword to execute is given as an argument, it can be a variable
and thus set dynamically, e.g. from a return value of another keyword or from the command line.</doc>
<status status="PASS" starttime="20200131 11:53:43.406" endtime="20200131 11:53:43.411" critical="yes"></status>
</test>
<test id="s1-s1-t48" name="Use &quot;Run Keyword And Continue On Failure&quot;">
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>raise type error in python</arg>
<arg>${1}</arg>
<arg>${2}</arg>
<arg>${3}</arg>
</arguments>
<assign>
<var>${will_be_initilized_with_None}</var>
</assign>
<msg timestamp="20200131 11:53:43.412" level="TRACE">Arguments: [ 'raise type error in python' | '${1}' | '${2}' | '${3}' ]</msg>
<kw name="Raise Type Error In Python" library="Utils">
<arguments>
<arg>${1}</arg>
<arg>${2}</arg>
<arg>${3}</arg>
</arguments>
<msg timestamp="20200131 11:53:43.413" level="TRACE">Arguments: [ 1 | 2 | 3 ]</msg>
<msg timestamp="20200131 11:53:43.413" level="FAIL">TypeError: Intentionally failing the keyword by raising this exception</msg>
<msg timestamp="20200131 11:53:43.413" level="DEBUG">Traceback (most recent call last):
  File "/home/hakan/Python/Robot/robot-fw-built-in-library-tests/Tests/Utils.py", line 26, in raise_type_error_in_python
    raise TypeError("Intentionally failing the keyword by raising this exception")</msg>
<status status="FAIL" starttime="20200131 11:53:43.412" endtime="20200131 11:53:43.413"></status>
</kw>
<msg timestamp="20200131 11:53:43.413" level="TRACE">Return: None</msg>
<msg timestamp="20200131 11:53:43.413" level="INFO">${will_be_initilized_with_None} = None</msg>
<status status="FAIL" starttime="20200131 11:53:43.412" endtime="20200131 11:53:43.413"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>This line is executed even though the previous line has failed</arg>
</arguments>
<msg timestamp="20200131 11:53:43.415" level="TRACE">Arguments: [ 'This line is executed even though the previous line has failed' ]</msg>
<msg timestamp="20200131 11:53:43.415" level="INFO">This line is executed even though the previous line has failed</msg>
<msg timestamp="20200131 11:53:43.415" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.415" endtime="20200131 11:53:43.415"></status>
</kw>
<tags>
<tag>failure-expected</tag>
</tags>
<status status="FAIL" starttime="20200131 11:53:43.411" endtime="20200131 11:53:43.415" critical="no">TypeError: Intentionally failing the keyword by raising this exception</status>
</test>
<test id="s1-s1-t49" name="Use &quot;Run Keyword And Expect Error&quot;">
<kw name="Run Keyword And Expect Error" library="BuiltIn">
<doc>Runs the keyword and checks that the expected error occurred.</doc>
<arguments>
<arg>EQUALS:TypeError: Intentionally failing the keyword by raising this exception</arg>
<arg>raise type error in python</arg>
<arg>${1}</arg>
<arg>${2}</arg>
<arg>${3}</arg>
</arguments>
<assign>
<var>${will_be_initilized_with_the_error_message}</var>
</assign>
<msg timestamp="20200131 11:53:43.416" level="TRACE">Arguments: [ 'EQUALS:TypeError: Intentionally failing the keyword by raising this exception' | 'raise type error in python' | '${1}' | '${2}' | '${3}' ]</msg>
<kw name="Raise Type Error In Python" library="Utils">
<arguments>
<arg>${1}</arg>
<arg>${2}</arg>
<arg>${3}</arg>
</arguments>
<msg timestamp="20200131 11:53:43.417" level="TRACE">Arguments: [ 1 | 2 | 3 ]</msg>
<msg timestamp="20200131 11:53:43.417" level="FAIL">TypeError: Intentionally failing the keyword by raising this exception</msg>
<msg timestamp="20200131 11:53:43.417" level="DEBUG">Traceback (most recent call last):
  File "/home/hakan/Python/Robot/robot-fw-built-in-library-tests/Tests/Utils.py", line 26, in raise_type_error_in_python
    raise TypeError("Intentionally failing the keyword by raising this exception")</msg>
<status status="FAIL" starttime="20200131 11:53:43.417" endtime="20200131 11:53:43.417"></status>
</kw>
<msg timestamp="20200131 11:53:43.417" level="TRACE">Return: 'TypeError: Intentionally failing the keyword by raising this exception'</msg>
<msg timestamp="20200131 11:53:43.417" level="INFO">${will_be_initilized_with_the_error_message} = TypeError: Intentionally failing the keyword by raising this exception</msg>
<status status="PASS" starttime="20200131 11:53:43.416" endtime="20200131 11:53:43.417"></status>
</kw>
<kw name="Run Keyword And Expect Error" library="BuiltIn">
<doc>Runs the keyword and checks that the expected error occurred.</doc>
<arguments>
<arg>STARTS:TypeError</arg>
<arg>raise type error in python</arg>
<arg>${1}</arg>
<arg>${2}</arg>
<arg>${3}</arg>
</arguments>
<assign>
<var>${will_be_initilized_with_the_error_message}</var>
</assign>
<msg timestamp="20200131 11:53:43.419" level="TRACE">Arguments: [ 'STARTS:TypeError' | 'raise type error in python' | '${1}' | '${2}' | '${3}' ]</msg>
<kw name="Raise Type Error In Python" library="Utils">
<arguments>
<arg>${1}</arg>
<arg>${2}</arg>
<arg>${3}</arg>
</arguments>
<msg timestamp="20200131 11:53:43.419" level="TRACE">Arguments: [ 1 | 2 | 3 ]</msg>
<msg timestamp="20200131 11:53:43.420" level="FAIL">TypeError: Intentionally failing the keyword by raising this exception</msg>
<msg timestamp="20200131 11:53:43.420" level="DEBUG">Traceback (most recent call last):
  File "/home/hakan/Python/Robot/robot-fw-built-in-library-tests/Tests/Utils.py", line 26, in raise_type_error_in_python
    raise TypeError("Intentionally failing the keyword by raising this exception")</msg>
<status status="FAIL" starttime="20200131 11:53:43.419" endtime="20200131 11:53:43.420"></status>
</kw>
<msg timestamp="20200131 11:53:43.420" level="TRACE">Return: 'TypeError: Intentionally failing the keyword by raising this exception'</msg>
<msg timestamp="20200131 11:53:43.420" level="INFO">${will_be_initilized_with_the_error_message} = TypeError: Intentionally failing the keyword by raising this exception</msg>
<status status="PASS" starttime="20200131 11:53:43.419" endtime="20200131 11:53:43.420"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>The following failure is expected</arg>
</arguments>
<msg timestamp="20200131 11:53:43.420" level="TRACE">Arguments: [ 'The following failure is expected' ]</msg>
<msg timestamp="20200131 11:53:43.420" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.420" endtime="20200131 11:53:43.420"></status>
</kw>
<kw name="Run Keyword And Expect Error" library="BuiltIn">
<doc>Runs the keyword and checks that the expected error occurred.</doc>
<arguments>
<arg>STARTS:TypeError</arg>
<arg>${keyword_to_run}</arg>
<arg>${1}</arg>
<arg>${1}</arg>
<arg>${1}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20200131 11:53:43.423" level="TRACE">Arguments: [ 'STARTS:TypeError' | 'add multiple values' | '${1}' | '${1}' | '${1}' ]</msg>
<kw name="Add Multiple Values" library="Utils">
<arguments>
<arg>${1}</arg>
<arg>${1}</arg>
<arg>${1}</arg>
</arguments>
<msg timestamp="20200131 11:53:43.423" level="TRACE">Arguments: [ 1 | 1 | 1 ]</msg>
<msg timestamp="20200131 11:53:43.423" level="TRACE">Return: 3</msg>
<status status="PASS" starttime="20200131 11:53:43.423" endtime="20200131 11:53:43.423"></status>
</kw>
<msg timestamp="20200131 11:53:43.423" level="FAIL">Expected error 'STARTS:TypeError' did not occur.</msg>
<msg timestamp="20200131 11:53:43.423" level="DEBUG">Traceback (most recent call last):
  None</msg>
<status status="FAIL" starttime="20200131 11:53:43.422" endtime="20200131 11:53:43.423"></status>
</kw>
<doc>https://robotframework.org/robotframework/latest/libraries/BuiltIn.html#Return%20From%20Keyword
Run Keyword And Expect Error expected_error, name, *args
Runs the keyword and checks that the expected error occurred.
The keyword to execute and its arguments are specified using name and *args
exactly like with Run Keyword.</doc>
<tags>
<tag>failure-expected</tag>
</tags>
<status status="FAIL" starttime="20200131 11:53:43.416" endtime="20200131 11:53:43.424" critical="no">Expected error 'STARTS:TypeError' did not occur.</status>
</test>
<test id="s1-s1-t50" name="Use &quot;Run Keyword And Ignore Error&quot;">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>raise type error in python</arg>
<arg>${1}</arg>
<arg>${2}</arg>
<arg>${3}</arg>
</arguments>
<assign>
<var>${execution_status}</var>
<var>${result}</var>
</assign>
<msg timestamp="20200131 11:53:43.427" level="TRACE">Arguments: [ 'raise type error in python' | '${1}' | '${2}' | '${3}' ]</msg>
<kw name="Raise Type Error In Python" library="Utils">
<arguments>
<arg>${1}</arg>
<arg>${2}</arg>
<arg>${3}</arg>
</arguments>
<msg timestamp="20200131 11:53:43.427" level="TRACE">Arguments: [ 1 | 2 | 3 ]</msg>
<msg timestamp="20200131 11:53:43.427" level="FAIL">TypeError: Intentionally failing the keyword by raising this exception</msg>
<msg timestamp="20200131 11:53:43.427" level="DEBUG">Traceback (most recent call last):
  File "/home/hakan/Python/Robot/robot-fw-built-in-library-tests/Tests/Utils.py", line 26, in raise_type_error_in_python
    raise TypeError("Intentionally failing the keyword by raising this exception")</msg>
<status status="FAIL" starttime="20200131 11:53:43.427" endtime="20200131 11:53:43.427"></status>
</kw>
<msg timestamp="20200131 11:53:43.427" level="TRACE">Return: ('FAIL',
 'TypeError: Intentionally failing the keyword by raising this exception')</msg>
<msg timestamp="20200131 11:53:43.427" level="INFO">${execution_status} = FAIL</msg>
<msg timestamp="20200131 11:53:43.427" level="INFO">${result} = TypeError: Intentionally failing the keyword by raising this exception</msg>
<status status="PASS" starttime="20200131 11:53:43.427" endtime="20200131 11:53:43.427"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>$execution_status == 'FAIL'</arg>
</arguments>
<msg timestamp="20200131 11:53:43.430" level="TRACE">Arguments: [ "$execution_status == 'FAIL'" ]</msg>
<msg timestamp="20200131 11:53:43.430" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.429" endtime="20200131 11:53:43.430"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>$result == 'TypeError: Intentionally failing the keyword by raising this exception'</arg>
</arguments>
<msg timestamp="20200131 11:53:43.430" level="TRACE">Arguments: [ "$result == 'TypeError: Intentionally failing the keyword by raising this exception'" ]</msg>
<msg timestamp="20200131 11:53:43.431" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.430" endtime="20200131 11:53:43.431"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>add multiple values</arg>
<arg>${1}</arg>
<arg>${1}</arg>
<arg>${1}</arg>
</arguments>
<assign>
<var>${execution_status}</var>
<var>${result}</var>
</assign>
<msg timestamp="20200131 11:53:43.431" level="TRACE">Arguments: [ 'add multiple values' | '${1}' | '${1}' | '${1}' ]</msg>
<kw name="Add Multiple Values" library="Utils">
<arguments>
<arg>${1}</arg>
<arg>${1}</arg>
<arg>${1}</arg>
</arguments>
<msg timestamp="20200131 11:53:43.431" level="TRACE">Arguments: [ 1 | 1 | 1 ]</msg>
<msg timestamp="20200131 11:53:43.431" level="TRACE">Return: 3</msg>
<status status="PASS" starttime="20200131 11:53:43.431" endtime="20200131 11:53:43.432"></status>
</kw>
<msg timestamp="20200131 11:53:43.432" level="TRACE">Return: ('PASS', 3)</msg>
<msg timestamp="20200131 11:53:43.432" level="INFO">${execution_status} = PASS</msg>
<msg timestamp="20200131 11:53:43.432" level="INFO">${result} = 3</msg>
<status status="PASS" starttime="20200131 11:53:43.431" endtime="20200131 11:53:43.432"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>$execution_status == 'PASS'</arg>
</arguments>
<msg timestamp="20200131 11:53:43.434" level="TRACE">Arguments: [ "$execution_status == 'PASS'" ]</msg>
<msg timestamp="20200131 11:53:43.435" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.434" endtime="20200131 11:53:43.435"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>$result == 3</arg>
</arguments>
<msg timestamp="20200131 11:53:43.435" level="TRACE">Arguments: [ '$result == 3' ]</msg>
<msg timestamp="20200131 11:53:43.435" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.435" endtime="20200131 11:53:43.435"></status>
</kw>
<doc>Run Keyword And Ignore Error name, *args
This keyword returns two values, so that the first is either string PASS or FAIL,
depending on the status of the executed keyword. The second value is either the return value
of the keyword or the received error message.</doc>
<status status="PASS" starttime="20200131 11:53:43.426" endtime="20200131 11:53:43.436" critical="yes"></status>
</test>
<test id="s1-s1-t51" name="Use &quot;Run Keyword And Return If&quot;">
<kw name="Keyword That Uses &quot;Run Keyword And Return If&quot;">
<doc>Run Keyword And Return If condition, name, *args
Runs the specified keyword and returns from the enclosing user keyword</doc>
<assign>
<var>${result_1}</var>
</assign>
<msg timestamp="20200131 11:53:43.438" level="TRACE">Arguments: [  ]</msg>
<kw name="Run Keyword And Return If" library="BuiltIn">
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<arguments>
<arg>${True}</arg>
<arg>add multiple values</arg>
<arg>${1}</arg>
<arg>${1}</arg>
<arg>${1}</arg>
</arguments>
<msg timestamp="20200131 11:53:43.438" level="TRACE">Arguments: [ True | 'add multiple values' | '${1}' | '${1}' | '${1}' ]</msg>
<kw name="Add Multiple Values" library="Utils">
<arguments>
<arg>${1}</arg>
<arg>${1}</arg>
<arg>${1}</arg>
</arguments>
<msg timestamp="20200131 11:53:43.439" level="TRACE">Arguments: [ 1 | 1 | 1 ]</msg>
<msg timestamp="20200131 11:53:43.439" level="TRACE">Return: 3</msg>
<status status="PASS" starttime="20200131 11:53:43.439" endtime="20200131 11:53:43.439"></status>
</kw>
<msg timestamp="20200131 11:53:43.439" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20200131 11:53:43.438" endtime="20200131 11:53:43.439"></status>
</kw>
<msg timestamp="20200131 11:53:43.439" level="TRACE">Return: 3</msg>
<msg timestamp="20200131 11:53:43.439" level="INFO">${result_1} = 3</msg>
<status status="PASS" starttime="20200131 11:53:43.438" endtime="20200131 11:53:43.439"></status>
</kw>
<kw name="Keyword That Uses &quot;Run Keyword If&quot; And &quot;Run Keyword And Return&quot; Keywords">
<doc>Run Keyword And Return name, *args
Runs the specified keyword and returns from the enclosing user keyword</doc>
<assign>
<var>${result_2}</var>
</assign>
<msg timestamp="20200131 11:53:43.442" level="TRACE">Arguments: [  ]</msg>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${True}</arg>
<arg>Run Keyword And Return</arg>
<arg>add multiple values</arg>
<arg>${1}</arg>
<arg>${1}</arg>
<arg>${1}</arg>
</arguments>
<msg timestamp="20200131 11:53:43.442" level="TRACE">Arguments: [ True | 'Run Keyword And Return' | 'add multiple values' | '${1}' | '${1}' | '${1}' ]</msg>
<kw name="Run Keyword And Return" library="BuiltIn">
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<arguments>
<arg>add multiple values</arg>
<arg>${1}</arg>
<arg>${1}</arg>
<arg>${1}</arg>
</arguments>
<msg timestamp="20200131 11:53:43.442" level="TRACE">Arguments: [ 'add multiple values' | '${1}' | '${1}' | '${1}' ]</msg>
<kw name="Add Multiple Values" library="Utils">
<arguments>
<arg>${1}</arg>
<arg>${1}</arg>
<arg>${1}</arg>
</arguments>
<msg timestamp="20200131 11:53:43.443" level="TRACE">Arguments: [ 1 | 1 | 1 ]</msg>
<msg timestamp="20200131 11:53:43.443" level="TRACE">Return: 3</msg>
<status status="PASS" starttime="20200131 11:53:43.443" endtime="20200131 11:53:43.443"></status>
</kw>
<msg timestamp="20200131 11:53:43.443" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20200131 11:53:43.442" endtime="20200131 11:53:43.443"></status>
</kw>
<status status="PASS" starttime="20200131 11:53:43.442" endtime="20200131 11:53:43.443"></status>
</kw>
<msg timestamp="20200131 11:53:43.443" level="TRACE">Return: 3</msg>
<msg timestamp="20200131 11:53:43.443" level="INFO">${result_2} = 3</msg>
<status status="PASS" starttime="20200131 11:53:43.442" endtime="20200131 11:53:43.443"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>$result_1 == $result_2</arg>
</arguments>
<msg timestamp="20200131 11:53:43.443" level="TRACE">Arguments: [ '$result_1 == $result_2' ]</msg>
<msg timestamp="20200131 11:53:43.444" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.443" endtime="20200131 11:53:43.444"></status>
</kw>
<doc>Run Keyword And Return If condition, name, *args
If the condition is True, Runs the specified keyword (designated by name) and returns from
the enclosing user keyword</doc>
<status status="PASS" starttime="20200131 11:53:43.437" endtime="20200131 11:53:43.445" critical="yes"></status>
</test>
<test id="s1-s1-t52" name="Use &quot;Run Keyword And Return Status&quot; (Along With &quot;Run Keyword If&quot;)">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>raise type error in python</arg>
<arg>${1}</arg>
<arg>${2}</arg>
<arg>${3}</arg>
</arguments>
<assign>
<var>${passed}</var>
</assign>
<msg timestamp="20200131 11:53:43.446" level="TRACE">Arguments: [ 'raise type error in python' | '${1}' | '${2}' | '${3}' ]</msg>
<kw name="Raise Type Error In Python" library="Utils">
<arguments>
<arg>${1}</arg>
<arg>${2}</arg>
<arg>${3}</arg>
</arguments>
<msg timestamp="20200131 11:53:43.447" level="TRACE">Arguments: [ 1 | 2 | 3 ]</msg>
<msg timestamp="20200131 11:53:43.447" level="FAIL">TypeError: Intentionally failing the keyword by raising this exception</msg>
<msg timestamp="20200131 11:53:43.447" level="DEBUG">Traceback (most recent call last):
  File "/home/hakan/Python/Robot/robot-fw-built-in-library-tests/Tests/Utils.py", line 26, in raise_type_error_in_python
    raise TypeError("Intentionally failing the keyword by raising this exception")</msg>
<status status="FAIL" starttime="20200131 11:53:43.446" endtime="20200131 11:53:43.447"></status>
</kw>
<msg timestamp="20200131 11:53:43.447" level="TRACE">Return: False</msg>
<msg timestamp="20200131 11:53:43.447" level="INFO">${passed} = False</msg>
<status status="PASS" starttime="20200131 11:53:43.446" endtime="20200131 11:53:43.447"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${passed}</arg>
<arg>Log</arg>
<arg>This logging part will not be executed</arg>
</arguments>
<msg timestamp="20200131 11:53:43.450" level="TRACE">Arguments: [ False | 'Log' | 'This logging part will not be executed' ]</msg>
<msg timestamp="20200131 11:53:43.450" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.450" endtime="20200131 11:53:43.450"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>not $passed</arg>
<arg>Log</arg>
<arg>This logging part will be executed</arg>
</arguments>
<msg timestamp="20200131 11:53:43.450" level="TRACE">Arguments: [ 'not $passed' | 'Log' | 'This logging part will be executed' ]</msg>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>This logging part will be executed</arg>
</arguments>
<msg timestamp="20200131 11:53:43.451" level="TRACE">Arguments: [ 'This logging part will be executed' ]</msg>
<msg timestamp="20200131 11:53:43.451" level="INFO">This logging part will be executed</msg>
<msg timestamp="20200131 11:53:43.451" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.451" endtime="20200131 11:53:43.451"></status>
</kw>
<msg timestamp="20200131 11:53:43.451" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.450" endtime="20200131 11:53:43.451"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>add multiple values</arg>
<arg>${1}</arg>
<arg>${1}</arg>
<arg>${1}</arg>
</arguments>
<assign>
<var>${passed}</var>
</assign>
<msg timestamp="20200131 11:53:43.451" level="TRACE">Arguments: [ 'add multiple values' | '${1}' | '${1}' | '${1}' ]</msg>
<kw name="Add Multiple Values" library="Utils">
<arguments>
<arg>${1}</arg>
<arg>${1}</arg>
<arg>${1}</arg>
</arguments>
<msg timestamp="20200131 11:53:43.451" level="TRACE">Arguments: [ 1 | 1 | 1 ]</msg>
<msg timestamp="20200131 11:53:43.451" level="TRACE">Return: 3</msg>
<status status="PASS" starttime="20200131 11:53:43.451" endtime="20200131 11:53:43.451"></status>
</kw>
<msg timestamp="20200131 11:53:43.451" level="TRACE">Return: True</msg>
<msg timestamp="20200131 11:53:43.451" level="INFO">${passed} = True</msg>
<status status="PASS" starttime="20200131 11:53:43.451" endtime="20200131 11:53:43.451"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${passed}</arg>
<arg>Log</arg>
<arg>This logging part will be executed</arg>
</arguments>
<msg timestamp="20200131 11:53:43.452" level="TRACE">Arguments: [ True | 'Log' | 'This logging part will be executed' ]</msg>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>This logging part will be executed</arg>
</arguments>
<msg timestamp="20200131 11:53:43.452" level="TRACE">Arguments: [ 'This logging part will be executed' ]</msg>
<msg timestamp="20200131 11:53:43.452" level="INFO">This logging part will be executed</msg>
<msg timestamp="20200131 11:53:43.452" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.452" endtime="20200131 11:53:43.452"></status>
</kw>
<msg timestamp="20200131 11:53:43.452" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.451" endtime="20200131 11:53:43.452"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>not $passed</arg>
<arg>Log</arg>
<arg>This logging part will not be executed</arg>
</arguments>
<msg timestamp="20200131 11:53:43.455" level="TRACE">Arguments: [ 'not $passed' | 'Log' | 'This logging part will not be executed' ]</msg>
<msg timestamp="20200131 11:53:43.456" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.455" endtime="20200131 11:53:43.456"></status>
</kw>
<doc>Run Keyword And Return Status name, *args
Runs the given keyword with given arguments and returns the status as a Boolean value.
Returns Boolean True if the keyword that is executed succeeds and False if it fails.</doc>
<status status="PASS" starttime="20200131 11:53:43.446" endtime="20200131 11:53:43.456" critical="yes"></status>
</test>
<test id="s1-s1-t53" name="Use &quot;Run Keyword If&quot;">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>add multiple values</arg>
<arg>${1}</arg>
<arg>${1}</arg>
<arg>${1}</arg>
</arguments>
<assign>
<var>${isPassed}</var>
<var>${result}</var>
</assign>
<msg timestamp="20200131 11:53:43.458" level="TRACE">Arguments: [ 'add multiple values' | '${1}' | '${1}' | '${1}' ]</msg>
<kw name="Add Multiple Values" library="Utils">
<arguments>
<arg>${1}</arg>
<arg>${1}</arg>
<arg>${1}</arg>
</arguments>
<msg timestamp="20200131 11:53:43.458" level="TRACE">Arguments: [ 1 | 1 | 1 ]</msg>
<msg timestamp="20200131 11:53:43.458" level="TRACE">Return: 3</msg>
<status status="PASS" starttime="20200131 11:53:43.458" endtime="20200131 11:53:43.458"></status>
</kw>
<msg timestamp="20200131 11:53:43.458" level="TRACE">Return: ('PASS', 3)</msg>
<msg timestamp="20200131 11:53:43.458" level="INFO">${isPassed} = PASS</msg>
<msg timestamp="20200131 11:53:43.458" level="INFO">${result} = 3</msg>
<status status="PASS" starttime="20200131 11:53:43.458" endtime="20200131 11:53:43.458"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>$isPassed=='PASS' and $result==3</arg>
</arguments>
<assign>
<var>${condition}</var>
</assign>
<msg timestamp="20200131 11:53:43.461" level="TRACE">Arguments: [ "$isPassed=='PASS' and $result==3" ]</msg>
<msg timestamp="20200131 11:53:43.462" level="TRACE">Return: True</msg>
<msg timestamp="20200131 11:53:43.462" level="INFO">${condition} = True</msg>
<status status="PASS" starttime="20200131 11:53:43.461" endtime="20200131 11:53:43.462"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$condition</arg>
<arg>Log</arg>
<arg>If part, will be printed</arg>
</arguments>
<msg timestamp="20200131 11:53:43.462" level="TRACE">Arguments: [ '$condition' | 'Log' | 'If part, will be printed' ]</msg>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>If part, will be printed</arg>
</arguments>
<msg timestamp="20200131 11:53:43.463" level="TRACE">Arguments: [ 'If part, will be printed' ]</msg>
<msg timestamp="20200131 11:53:43.463" level="INFO">If part, will be printed</msg>
<msg timestamp="20200131 11:53:43.463" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.463" endtime="20200131 11:53:43.463"></status>
</kw>
<msg timestamp="20200131 11:53:43.463" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.462" endtime="20200131 11:53:43.463"></status>
</kw>
<kw name="Run Keyword Unless" library="BuiltIn">
<doc>Runs the given keyword with the given arguments if ``condition`` is false.</doc>
<arguments>
<arg>$condition</arg>
<arg>Log</arg>
<arg>Else part, will not be printed</arg>
</arguments>
<msg timestamp="20200131 11:53:43.463" level="TRACE">Arguments: [ '$condition' | 'Log' | 'Else part, will not be printed' ]</msg>
<msg timestamp="20200131 11:53:43.464" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.463" endtime="20200131 11:53:43.464"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$condition</arg>
<arg>Log</arg>
<arg>If part, will be printed</arg>
<arg>ELSE</arg>
<arg>Log</arg>
<arg>Else part, will not be printed</arg>
</arguments>
<msg timestamp="20200131 11:53:43.467" level="TRACE">Arguments: [ '$condition' | 'Log' | 'If part, will be printed' | 'ELSE' | 'Log' | 'Else part, will not be printed' ]</msg>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>If part, will be printed</arg>
</arguments>
<msg timestamp="20200131 11:53:43.468" level="TRACE">Arguments: [ 'If part, will be printed' ]</msg>
<msg timestamp="20200131 11:53:43.468" level="INFO">If part, will be printed</msg>
<msg timestamp="20200131 11:53:43.468" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.468" endtime="20200131 11:53:43.468"></status>
</kw>
<msg timestamp="20200131 11:53:43.468" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.467" endtime="20200131 11:53:43.468"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${True}</arg>
<arg>Log</arg>
<arg>Log does not return anything; None should be returned</arg>
</arguments>
<assign>
<var>${should be None}</var>
</assign>
<msg timestamp="20200131 11:53:43.468" level="TRACE">Arguments: [ True | 'Log' | 'Log does not return anything; None should be returned' ]</msg>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Log does not return anything; None should be returned</arg>
</arguments>
<msg timestamp="20200131 11:53:43.469" level="TRACE">Arguments: [ 'Log does not return anything; None should be returned' ]</msg>
<msg timestamp="20200131 11:53:43.469" level="INFO">Log does not return anything; None should be returned</msg>
<msg timestamp="20200131 11:53:43.469" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.469" endtime="20200131 11:53:43.469"></status>
</kw>
<msg timestamp="20200131 11:53:43.469" level="TRACE">Return: None</msg>
<msg timestamp="20200131 11:53:43.469" level="INFO">${should be None} = None</msg>
<status status="PASS" starttime="20200131 11:53:43.468" endtime="20200131 11:53:43.469"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${should be None}</arg>
<arg>${None}</arg>
</arguments>
<msg timestamp="20200131 11:53:43.469" level="TRACE">Arguments: [ None | None ]</msg>
<msg timestamp="20200131 11:53:43.469" level="DEBUG">Argument types are:
&lt;class 'NoneType'&gt;
&lt;class 'NoneType'&gt;</msg>
<msg timestamp="20200131 11:53:43.469" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.469" endtime="20200131 11:53:43.469"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${True}</arg>
<arg>add multiple values</arg>
<arg>${1}</arg>
<arg>${1}</arg>
<arg>${1}</arg>
</arguments>
<assign>
<var>${should be three}</var>
</assign>
<msg timestamp="20200131 11:53:43.469" level="TRACE">Arguments: [ True | 'add multiple values' | '${1}' | '${1}' | '${1}' ]</msg>
<kw name="Add Multiple Values" library="Utils">
<arguments>
<arg>${1}</arg>
<arg>${1}</arg>
<arg>${1}</arg>
</arguments>
<msg timestamp="20200131 11:53:43.470" level="TRACE">Arguments: [ 1 | 1 | 1 ]</msg>
<msg timestamp="20200131 11:53:43.470" level="TRACE">Return: 3</msg>
<status status="PASS" starttime="20200131 11:53:43.469" endtime="20200131 11:53:43.470"></status>
</kw>
<msg timestamp="20200131 11:53:43.470" level="TRACE">Return: 3</msg>
<msg timestamp="20200131 11:53:43.470" level="INFO">${should be three} = 3</msg>
<status status="PASS" starttime="20200131 11:53:43.469" endtime="20200131 11:53:43.470"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${should be three}</arg>
<arg>${3}</arg>
</arguments>
<msg timestamp="20200131 11:53:43.474" level="TRACE">Arguments: [ 3 | 3 ]</msg>
<msg timestamp="20200131 11:53:43.474" level="DEBUG">Argument types are:
&lt;class 'int'&gt;
&lt;class 'int'&gt;</msg>
<msg timestamp="20200131 11:53:43.474" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.474" endtime="20200131 11:53:43.474"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${False}</arg>
<arg>add multiple values</arg>
<arg>${1}</arg>
<arg>${1}</arg>
<arg>${1}</arg>
<arg>ELSE IF</arg>
<arg>${False}</arg>
<arg>add multiple values</arg>
<arg>${2}</arg>
<arg>${2}</arg>
<arg>${2}</arg>
<arg>ELSE IF</arg>
<arg>${True}</arg>
<arg>add multiple values</arg>
<arg>${3}</arg>
<arg>${3}</arg>
<arg>${3}</arg>
<arg>ELSE</arg>
<arg>get integer</arg>
</arguments>
<assign>
<var>${conditionally assigned variable}</var>
</assign>
<msg timestamp="20200131 11:53:43.474" level="TRACE">Arguments: [ False | 'add multiple values' | '${1}' | '${1}' | '${1}' | 'ELSE IF' | '${False}' | 'add multiple values' | '${2}' | '${2}' | '${2}' | 'ELSE IF' | '${True}' | 'add multiple values' | '${3}' | '${3}' | '${3}' | 'ELSE' | 'get integer' ]</msg>
<kw name="Add Multiple Values" library="Utils">
<arguments>
<arg>${3}</arg>
<arg>${3}</arg>
<arg>${3}</arg>
</arguments>
<msg timestamp="20200131 11:53:43.474" level="TRACE">Arguments: [ 3 | 3 | 3 ]</msg>
<msg timestamp="20200131 11:53:43.475" level="TRACE">Return: 9</msg>
<status status="PASS" starttime="20200131 11:53:43.474" endtime="20200131 11:53:43.475"></status>
</kw>
<msg timestamp="20200131 11:53:43.475" level="TRACE">Return: 9</msg>
<msg timestamp="20200131 11:53:43.475" level="INFO">${conditionally assigned variable} = 9</msg>
<status status="PASS" starttime="20200131 11:53:43.474" endtime="20200131 11:53:43.475"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${conditionally assigned variable}</arg>
<arg>${9}</arg>
</arguments>
<msg timestamp="20200131 11:53:43.475" level="TRACE">Arguments: [ 9 | 9 ]</msg>
<msg timestamp="20200131 11:53:43.475" level="DEBUG">Argument types are:
&lt;class 'int'&gt;
&lt;class 'int'&gt;</msg>
<msg timestamp="20200131 11:53:43.475" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.475" endtime="20200131 11:53:43.475"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>os.sep == '/'</arg>
<arg>Linux Keyword</arg>
<arg>ELSE IF</arg>
<arg>sys.platform.startswith('java')</arg>
<arg>Jython Keyword</arg>
<arg>ELSE</arg>
<arg>Windows Keyword</arg>
</arguments>
<assign>
<var>${platform}</var>
</assign>
<msg timestamp="20200131 11:53:43.475" level="TRACE">Arguments: [ "os.sep == '/'" | 'Linux Keyword' | 'ELSE IF' | "sys.platform.startswith('java')" | 'Jython Keyword' | 'ELSE' | 'Windows Keyword' ]</msg>
<kw name="Linux Keyword">
<msg timestamp="20200131 11:53:43.476" level="TRACE">Arguments: [  ]</msg>
<msg timestamp="20200131 11:53:43.476" level="TRACE">Return: 'Linux'</msg>
<status status="PASS" starttime="20200131 11:53:43.475" endtime="20200131 11:53:43.476"></status>
</kw>
<msg timestamp="20200131 11:53:43.476" level="TRACE">Return: 'Linux'</msg>
<msg timestamp="20200131 11:53:43.476" level="INFO">${platform} = Linux</msg>
<status status="PASS" starttime="20200131 11:53:43.475" endtime="20200131 11:53:43.476"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>$platform == 'Linux'</arg>
</arguments>
<msg timestamp="20200131 11:53:43.476" level="TRACE">Arguments: [ "$platform == 'Linux'" ]</msg>
<msg timestamp="20200131 11:53:43.476" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.476" endtime="20200131 11:53:43.477"></status>
</kw>
<doc>Run Keyword If condition, name, *args
If condition is true, runs the given keyword (designated by 'name' argument) with
the given args</doc>
<status status="PASS" starttime="20200131 11:53:43.456" endtime="20200131 11:53:43.477" critical="yes"></status>
</test>
<test id="s1-s1-t54" name="Use &quot;Run Keyword If Test Failed&quot;">
<kw name="Not Important Setup" type="setup">
<msg timestamp="20200131 11:53:43.479" level="TRACE">Arguments: [  ]</msg>
<kw name="No Operation" library="BuiltIn">
<doc>Does absolutely nothing.</doc>
<msg timestamp="20200131 11:53:43.479" level="TRACE">Arguments: [  ]</msg>
<msg timestamp="20200131 11:53:43.479" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.479" endtime="20200131 11:53:43.479"></status>
</kw>
<msg timestamp="20200131 11:53:43.479" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.479" endtime="20200131 11:53:43.479"></status>
</kw>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>This test case is intentionally designed to fail, refer to its teardown</arg>
</arguments>
<msg timestamp="20200131 11:53:43.479" level="TRACE">Arguments: [ 'This test case is intentionally designed to fail, refer to its teardown' ]</msg>
<msg timestamp="20200131 11:53:43.479" level="FAIL">This test case is intentionally designed to fail, refer to its teardown</msg>
<msg timestamp="20200131 11:53:43.479" level="DEBUG">Traceback (most recent call last):
  None</msg>
<status status="FAIL" starttime="20200131 11:53:43.479" endtime="20200131 11:53:43.479"></status>
</kw>
<kw name="Test Teardown Using &quot;Run Keyword If Test Failed&quot; And &quot;Run Keyword If Test Passed&quot;" type="teardown">
<msg timestamp="20200131 11:53:43.480" level="TRACE">Arguments: [  ]</msg>
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Log</arg>
<arg>The test the teardown is linked to indeed failed</arg>
</arguments>
<msg timestamp="20200131 11:53:43.480" level="TRACE">Arguments: [ 'Log' | 'The test the teardown is linked to indeed failed' ]</msg>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>The test the teardown is linked to indeed failed</arg>
</arguments>
<msg timestamp="20200131 11:53:43.480" level="TRACE">Arguments: [ 'The test the teardown is linked to indeed failed' ]</msg>
<msg timestamp="20200131 11:53:43.480" level="INFO">The test the teardown is linked to indeed failed</msg>
<msg timestamp="20200131 11:53:43.480" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.480" endtime="20200131 11:53:43.480"></status>
</kw>
<msg timestamp="20200131 11:53:43.480" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.480" endtime="20200131 11:53:43.480"></status>
</kw>
<kw name="Run Keyword If Test Passed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test passed.</doc>
<arguments>
<arg>Log</arg>
<arg>The test the teardown is linked to indeed passed</arg>
</arguments>
<msg timestamp="20200131 11:53:43.480" level="TRACE">Arguments: [ 'Log' | 'The test the teardown is linked to indeed passed' ]</msg>
<msg timestamp="20200131 11:53:43.480" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.480" endtime="20200131 11:53:43.480"></status>
</kw>
<msg timestamp="20200131 11:53:43.480" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.480" endtime="20200131 11:53:43.480"></status>
</kw>
<doc>This test case is intentionally designed to fail, refer to its teardown</doc>
<tags>
<tag>failure-expected</tag>
</tags>
<status status="FAIL" starttime="20200131 11:53:43.477" endtime="20200131 11:53:43.482" critical="no">This test case is intentionally designed to fail, refer to its teardown</status>
</test>
<test id="s1-s1-t55" name="Use &quot;Run Keyword If Test Passed&quot;">
<kw name="Not Important Setup" type="setup">
<msg timestamp="20200131 11:53:43.484" level="TRACE">Arguments: [  ]</msg>
<kw name="No Operation" library="BuiltIn">
<doc>Does absolutely nothing.</doc>
<msg timestamp="20200131 11:53:43.484" level="TRACE">Arguments: [  ]</msg>
<msg timestamp="20200131 11:53:43.484" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.484" endtime="20200131 11:53:43.484"></status>
</kw>
<msg timestamp="20200131 11:53:43.484" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.484" endtime="20200131 11:53:43.484"></status>
</kw>
<kw name="No Operation" library="BuiltIn">
<doc>Does absolutely nothing.</doc>
<msg timestamp="20200131 11:53:43.484" level="TRACE">Arguments: [  ]</msg>
<msg timestamp="20200131 11:53:43.485" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.484" endtime="20200131 11:53:43.485"></status>
</kw>
<kw name="Test Teardown Using &quot;Run Keyword If Test Failed&quot; And &quot;Run Keyword If Test Passed&quot;" type="teardown">
<msg timestamp="20200131 11:53:43.485" level="TRACE">Arguments: [  ]</msg>
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Log</arg>
<arg>The test the teardown is linked to indeed failed</arg>
</arguments>
<msg timestamp="20200131 11:53:43.485" level="TRACE">Arguments: [ 'Log' | 'The test the teardown is linked to indeed failed' ]</msg>
<msg timestamp="20200131 11:53:43.485" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.485" endtime="20200131 11:53:43.485"></status>
</kw>
<kw name="Run Keyword If Test Passed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test passed.</doc>
<arguments>
<arg>Log</arg>
<arg>The test the teardown is linked to indeed passed</arg>
</arguments>
<msg timestamp="20200131 11:53:43.485" level="TRACE">Arguments: [ 'Log' | 'The test the teardown is linked to indeed passed' ]</msg>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>The test the teardown is linked to indeed passed</arg>
</arguments>
<msg timestamp="20200131 11:53:43.485" level="TRACE">Arguments: [ 'The test the teardown is linked to indeed passed' ]</msg>
<msg timestamp="20200131 11:53:43.485" level="INFO">The test the teardown is linked to indeed passed</msg>
<msg timestamp="20200131 11:53:43.485" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.485" endtime="20200131 11:53:43.485"></status>
</kw>
<msg timestamp="20200131 11:53:43.485" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.485" endtime="20200131 11:53:43.485"></status>
</kw>
<msg timestamp="20200131 11:53:43.486" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.485" endtime="20200131 11:53:43.486"></status>
</kw>
<doc>This test case does nothing and just passes, refer to its teardown</doc>
<status status="PASS" starttime="20200131 11:53:43.482" endtime="20200131 11:53:43.488" critical="yes"></status>
</test>
<test id="s1-s1-t56" name="Use &quot;Run Keyword If Timeout Occurred&quot;">
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>3x</arg>
<arg>100ms</arg>
<arg>raise type error in python</arg>
<arg>a</arg>
<arg>b</arg>
<arg>c</arg>
</arguments>
<assign>
<var>${no result}</var>
</assign>
<msg timestamp="20200131 11:53:43.490" level="TRACE">Arguments: [ '3x' | '100ms' | 'raise type error in python' | 'a' | 'b' | 'c' ]</msg>
<kw name="Raise Type Error In Python" library="Utils">
<arguments>
<arg>a</arg>
<arg>b</arg>
<arg>c</arg>
</arguments>
<msg timestamp="20200131 11:53:43.491" level="TRACE">Arguments: [ 'a' | 'b' | 'c' ]</msg>
<msg timestamp="20200131 11:53:43.491" level="DEBUG">Test timeout 1 millisecond exceeded.</msg>
<msg timestamp="20200131 11:53:43.491" level="FAIL">Test timeout 1 millisecond exceeded.</msg>
<status status="FAIL" starttime="20200131 11:53:43.490" endtime="20200131 11:53:43.491"></status>
</kw>
<status status="FAIL" starttime="20200131 11:53:43.490" endtime="20200131 11:53:43.491"></status>
</kw>
<kw name="Teardown That Uses &quot;Run Keyword If Timeout Occurred&quot;" type="teardown">
<msg timestamp="20200131 11:53:43.494" level="TRACE">Arguments: [  ]</msg>
<kw name="Run Keyword If Timeout Occurred" library="BuiltIn">
<doc>Runs the given keyword if either a test or a keyword timeout has occurred.</doc>
<arguments>
<arg>Log</arg>
<arg>In 'Use "Run Keyword If Timeout Occurred"' test, timeout occurred</arg>
</arguments>
<msg timestamp="20200131 11:53:43.494" level="TRACE">Arguments: [ 'Log' | 'In \'Use "Run Keyword If Timeout Occurred"\' test, timeout occurred' ]</msg>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>In 'Use "Run Keyword If Timeout Occurred"' test, timeout occurred</arg>
</arguments>
<msg timestamp="20200131 11:53:43.494" level="TRACE">Arguments: [ 'In \'Use "Run Keyword If Timeout Occurred"\' test, timeout occurred' ]</msg>
<msg timestamp="20200131 11:53:43.494" level="INFO">In 'Use "Run Keyword If Timeout Occurred"' test, timeout occurred</msg>
<msg timestamp="20200131 11:53:43.494" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.494" endtime="20200131 11:53:43.494"></status>
</kw>
<msg timestamp="20200131 11:53:43.494" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.494" endtime="20200131 11:53:43.494"></status>
</kw>
<msg timestamp="20200131 11:53:43.495" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.494" endtime="20200131 11:53:43.495"></status>
</kw>
<doc>Run Keyword If Timeout Occurred name, *args
Runs the given keyword if either a test or a keyword timeout has occurred.
This keyword can only be used in a test teardown. Trying to use it anywhere else results in an error.
Otherwise, this keyword works exactly like "Run Keyword", see its documentation for more details.</doc>
<tags>
<tag>failure-expected</tag>
</tags>
<timeout value="1 millisecond"></timeout>
<status status="FAIL" starttime="20200131 11:53:43.488" endtime="20200131 11:53:43.496" critical="no">Test timeout 1 millisecond exceeded.</status>
</test>
<test id="s1-s1-t57" name="Use &quot;Run Keyword Unless&quot;">
<kw name="Run Keyword Unless" library="BuiltIn">
<doc>Runs the given keyword with the given arguments if ``condition`` is false.</doc>
<arguments>
<arg>${False}</arg>
<arg>add multiple values</arg>
<arg>${1}</arg>
<arg>${2}</arg>
<arg>${3}</arg>
</arguments>
<assign>
<var>${expect_six}</var>
</assign>
<msg timestamp="20200131 11:53:43.497" level="TRACE">Arguments: [ False | 'add multiple values' | '${1}' | '${2}' | '${3}' ]</msg>
<kw name="Add Multiple Values" library="Utils">
<arguments>
<arg>${1}</arg>
<arg>${2}</arg>
<arg>${3}</arg>
</arguments>
<msg timestamp="20200131 11:53:43.498" level="TRACE">Arguments: [ 1 | 2 | 3 ]</msg>
<msg timestamp="20200131 11:53:43.498" level="TRACE">Return: 6</msg>
<status status="PASS" starttime="20200131 11:53:43.497" endtime="20200131 11:53:43.498"></status>
</kw>
<msg timestamp="20200131 11:53:43.498" level="TRACE">Return: 6</msg>
<msg timestamp="20200131 11:53:43.498" level="INFO">${expect_six} = 6</msg>
<status status="PASS" starttime="20200131 11:53:43.497" endtime="20200131 11:53:43.498"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>$expect_six == 6</arg>
</arguments>
<msg timestamp="20200131 11:53:43.501" level="TRACE">Arguments: [ '$expect_six == 6' ]</msg>
<msg timestamp="20200131 11:53:43.502" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.501" endtime="20200131 11:53:43.502"></status>
</kw>
<kw name="Run Keyword Unless" library="BuiltIn">
<doc>Runs the given keyword with the given arguments if ``condition`` is false.</doc>
<arguments>
<arg>${True}</arg>
<arg>add multiple values</arg>
<arg>${1}</arg>
<arg>${2}</arg>
<arg>${3}</arg>
</arguments>
<assign>
<var>${expect_None}</var>
</assign>
<msg timestamp="20200131 11:53:43.502" level="TRACE">Arguments: [ True | 'add multiple values' | '${1}' | '${2}' | '${3}' ]</msg>
<msg timestamp="20200131 11:53:43.502" level="TRACE">Return: None</msg>
<msg timestamp="20200131 11:53:43.502" level="INFO">${expect_None} = None</msg>
<status status="PASS" starttime="20200131 11:53:43.502" endtime="20200131 11:53:43.502"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>$expect_None is None</arg>
</arguments>
<msg timestamp="20200131 11:53:43.502" level="TRACE">Arguments: [ '$expect_None is None' ]</msg>
<msg timestamp="20200131 11:53:43.503" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.502" endtime="20200131 11:53:43.503"></status>
</kw>
<doc>Run Keyword Unless condition, name, *args
Runs the given keyword with the given arguments if condition is false</doc>
<status status="PASS" starttime="20200131 11:53:43.497" endtime="20200131 11:53:43.503" critical="yes"></status>
</test>
<test id="s1-s1-t58" name="Use &quot;Run Keywords&quot;">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>My Cool Database</arg>
</arguments>
<assign>
<var>${db_name}</var>
</assign>
<msg timestamp="20200131 11:53:43.504" level="TRACE">Arguments: [ 'My Cool Database' ]</msg>
<msg timestamp="20200131 11:53:43.504" level="TRACE">Return: 'My Cool Database'</msg>
<msg timestamp="20200131 11:53:43.504" level="INFO">${db_name} = My Cool Database</msg>
<status status="PASS" starttime="20200131 11:53:43.504" endtime="20200131 11:53:43.504"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>server-1</arg>
<arg>server-2</arg>
<arg>server-3</arg>
</arguments>
<assign>
<var>@{servers}</var>
</assign>
<msg timestamp="20200131 11:53:43.506" level="TRACE">Arguments: [ 'server-1' | 'server-2' | 'server-3' ]</msg>
<msg timestamp="20200131 11:53:43.506" level="TRACE">Return: ['server-1', 'server-2', 'server-3']</msg>
<msg timestamp="20200131 11:53:43.507" level="INFO">@{servers} = [ server-1 | server-2 | server-3 ]</msg>
<status status="PASS" starttime="20200131 11:53:43.506" endtime="20200131 11:53:43.507"></status>
</kw>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>initialize database</arg>
<arg>${db_name}</arg>
<arg>AND</arg>
<arg>start servers</arg>
<arg>@{servers}</arg>
</arguments>
<msg timestamp="20200131 11:53:43.507" level="TRACE">Arguments: [ 'initialize database' | '${db_name}' | 'AND' | 'start servers' | '@{servers}' ]</msg>
<kw name="Initialize Database" library="Utils">
<arguments>
<arg>${db_name}</arg>
</arguments>
<msg timestamp="20200131 11:53:43.507" level="TRACE">Arguments: [ 'My Cool Database' ]</msg>
<msg timestamp="20200131 11:53:43.507" level="DEBUG">My Cool Database is initialized</msg>
<msg timestamp="20200131 11:53:43.507" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.507" endtime="20200131 11:53:43.507"></status>
</kw>
<kw name="Start Servers" library="Utils">
<arguments>
<arg>@{servers}</arg>
</arguments>
<msg timestamp="20200131 11:53:43.507" level="TRACE">Arguments: [ 'server-1' | 'server-2' | 'server-3' ]</msg>
<msg timestamp="20200131 11:53:43.507" level="DEBUG">server-1 is initialized</msg>
<msg timestamp="20200131 11:53:43.507" level="DEBUG">server-2 is initialized</msg>
<msg timestamp="20200131 11:53:43.507" level="DEBUG">server-3 is initialized</msg>
<msg timestamp="20200131 11:53:43.507" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.507" endtime="20200131 11:53:43.507"></status>
</kw>
<msg timestamp="20200131 11:53:43.507" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.507" endtime="20200131 11:53:43.507"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>initialize database</arg>
<arg>${db_name}</arg>
</arguments>
<assign>
<var>${keyword_one_with_args}</var>
</assign>
<msg timestamp="20200131 11:53:43.508" level="TRACE">Arguments: [ 'initialize database' | 'My Cool Database' ]</msg>
<msg timestamp="20200131 11:53:43.508" level="TRACE">Return: ['initialize database', 'My Cool Database']</msg>
<msg timestamp="20200131 11:53:43.508" level="INFO">${keyword_one_with_args} = ['initialize database', 'My Cool Database']</msg>
<status status="PASS" starttime="20200131 11:53:43.507" endtime="20200131 11:53:43.508"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>start servers</arg>
<arg>@{servers}</arg>
</arguments>
<assign>
<var>${keyword_two_with_args}</var>
</assign>
<msg timestamp="20200131 11:53:43.508" level="TRACE">Arguments: [ 'start servers' | 'server-1' | 'server-2' | 'server-3' ]</msg>
<msg timestamp="20200131 11:53:43.508" level="TRACE">Return: ['start servers', 'server-1', 'server-2', 'server-3']</msg>
<msg timestamp="20200131 11:53:43.508" level="INFO">${keyword_two_with_args} = ['start servers', 'server-1', 'server-2', 'server-3']</msg>
<status status="PASS" starttime="20200131 11:53:43.508" endtime="20200131 11:53:43.508"></status>
</kw>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>@{keyword_one_with_args}</arg>
<arg>AND</arg>
<arg>@{keyword_two_with_args}</arg>
</arguments>
<msg timestamp="20200131 11:53:43.509" level="TRACE">Arguments: [ '@{keyword_one_with_args}' | 'AND' | '@{keyword_two_with_args}' ]</msg>
<kw name="Initialize Database" library="Utils">
<arguments>
<arg>My Cool Database</arg>
</arguments>
<msg timestamp="20200131 11:53:43.510" level="TRACE">Arguments: [ 'My Cool Database' ]</msg>
<msg timestamp="20200131 11:53:43.510" level="DEBUG">My Cool Database is initialized</msg>
<msg timestamp="20200131 11:53:43.510" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.510" endtime="20200131 11:53:43.510"></status>
</kw>
<kw name="Start Servers" library="Utils">
<arguments>
<arg>server-1</arg>
<arg>server-2</arg>
<arg>server-3</arg>
</arguments>
<msg timestamp="20200131 11:53:43.510" level="TRACE">Arguments: [ 'server-1' | 'server-2' | 'server-3' ]</msg>
<msg timestamp="20200131 11:53:43.510" level="DEBUG">server-1 is initialized</msg>
<msg timestamp="20200131 11:53:43.510" level="DEBUG">server-2 is initialized</msg>
<msg timestamp="20200131 11:53:43.510" level="DEBUG">server-3 is initialized</msg>
<msg timestamp="20200131 11:53:43.510" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.510" endtime="20200131 11:53:43.510"></status>
</kw>
<msg timestamp="20200131 11:53:43.510" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.509" endtime="20200131 11:53:43.510"></status>
</kw>
<doc>Run Keywords *keywords
Keywords can also be run with arguments using upper case AND as a separator between keywords.
The keywords are executed so that the first argument is the first keyword and proceeding
arguments until the first AND are arguments to it. First argument after the first AND
is the second keyword and proceeding arguments until the next AND are its arguments. And so on.</doc>
<status status="PASS" starttime="20200131 11:53:43.503" endtime="20200131 11:53:43.510" critical="yes"></status>
</test>
<test id="s1-s1-t59" name="Use &quot;Set Global Variable&quot;">
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${DYNAMIC_GLOBAL_SCALAR}</arg>
<arg>dynamic global variable available across all tests suites (i.e. utilize-global-variable.robot)</arg>
</arguments>
<msg timestamp="20200131 11:53:43.513" level="TRACE">Arguments: [ '${DYNAMIC_GLOBAL_SCALAR}' | 'dynamic global variable available across all tests suites (i.e. utilize-global-variable.robot)' ]</msg>
<msg timestamp="20200131 11:53:43.514" level="INFO">${DYNAMIC_GLOBAL_SCALAR} = dynamic global variable available across all tests suites (i.e. utilize-global-variable.robot)</msg>
<msg timestamp="20200131 11:53:43.514" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.513" endtime="20200131 11:53:43.514"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>@{DYNAMIC_GLOBAL_LIST}</arg>
<arg>First item</arg>
<arg>Second Item</arg>
<arg>Third Item</arg>
</arguments>
<msg timestamp="20200131 11:53:43.514" level="TRACE">Arguments: [ '@{DYNAMIC_GLOBAL_LIST}' | 'First item' | 'Second Item' | 'Third Item' ]</msg>
<msg timestamp="20200131 11:53:43.515" level="INFO">@{DYNAMIC_GLOBAL_LIST} = [ First item | Second Item | Third Item ]</msg>
<msg timestamp="20200131 11:53:43.515" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.514" endtime="20200131 11:53:43.515"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>&amp;{DYNAMIC_GLOBAL_DICTIONARY}</arg>
<arg>key=value</arg>
</arguments>
<msg timestamp="20200131 11:53:43.515" level="TRACE">Arguments: [ '&amp;{DYNAMIC_GLOBAL_DICTIONARY}' | 'key=value' ]</msg>
<msg timestamp="20200131 11:53:43.515" level="INFO">&amp;{DYNAMIC_GLOBAL_DICTIONARY} = { key=value }</msg>
<msg timestamp="20200131 11:53:43.515" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.515" endtime="20200131 11:53:43.515"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${GLOBAL_VAR}</arg>
<arg>I am overridden and just became global</arg>
</arguments>
<msg timestamp="20200131 11:53:43.518" level="TRACE">Arguments: [ '${GLOBAL_VAR}' | 'I am overridden and just became global' ]</msg>
<msg timestamp="20200131 11:53:43.518" level="INFO">${GLOBAL_VAR} = I am overridden and just became global</msg>
<msg timestamp="20200131 11:53:43.518" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.517" endtime="20200131 11:53:43.518"></status>
</kw>
<doc>Makes a variable available globally in all tests and suites</doc>
<status status="PASS" starttime="20200131 11:53:43.510" endtime="20200131 11:53:43.518" critical="yes"></status>
</test>
<test id="s1-s1-t60" name="Use &quot;Set Library Search Order&quot;">
<kw name="Set Library Search Order" library="BuiltIn">
<doc>Sets the resolution order to use when a name matches multiple keywords.</doc>
<arguments>
<arg>LibraryTwoHavingAConflictingKeyword</arg>
<arg>LibraryOneHavingAConflictingKeyword</arg>
</arguments>
<assign>
<var>${original search order}</var>
</assign>
<msg timestamp="20200131 11:53:43.519" level="TRACE">Arguments: [ 'LibraryTwoHavingAConflictingKeyword' | 'LibraryOneHavingAConflictingKeyword' ]</msg>
<msg timestamp="20200131 11:53:43.519" level="TRACE">Return: ()</msg>
<msg timestamp="20200131 11:53:43.519" level="INFO">${original search order} = ()</msg>
<status status="PASS" starttime="20200131 11:53:43.519" endtime="20200131 11:53:43.519"></status>
</kw>
<kw name="Conflicting Keyword" library="LibraryTwoHavingAConflictingKeyword">
<assign>
<var>${library_name}</var>
</assign>
<msg timestamp="20200131 11:53:43.519" level="TRACE">Arguments: [  ]</msg>
<msg timestamp="20200131 11:53:43.519" level="DEBUG">I am from LibraryTwoHavingAConflictingKeyword.py</msg>
<msg timestamp="20200131 11:53:43.519" level="TRACE">Return: 'LibraryTwo'</msg>
<msg timestamp="20200131 11:53:43.519" level="INFO">${library_name} = LibraryTwo</msg>
<status status="PASS" starttime="20200131 11:53:43.519" endtime="20200131 11:53:43.519"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>$library_name=='LibraryTwo'</arg>
</arguments>
<msg timestamp="20200131 11:53:43.525" level="TRACE">Arguments: [ "$library_name=='LibraryTwo'" ]</msg>
<msg timestamp="20200131 11:53:43.525" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.524" endtime="20200131 11:53:43.525"></status>
</kw>
<kw name="Set Library Search Order" library="BuiltIn">
<doc>Sets the resolution order to use when a name matches multiple keywords.</doc>
<arguments>
<arg>LibraryOneHavingAConflictingKeyword</arg>
<arg>LibraryTwoHavingAConflictingKeyword</arg>
</arguments>
<msg timestamp="20200131 11:53:43.526" level="TRACE">Arguments: [ 'LibraryOneHavingAConflictingKeyword' | 'LibraryTwoHavingAConflictingKeyword' ]</msg>
<msg timestamp="20200131 11:53:43.526" level="TRACE">Return: ('LibraryTwoHavingAConflictingKeyword', 'LibraryOneHavingAConflictingKeyword')</msg>
<status status="PASS" starttime="20200131 11:53:43.526" endtime="20200131 11:53:43.526"></status>
</kw>
<kw name="Conflicting Keyword" library="LibraryOneHavingAConflictingKeyword">
<assign>
<var>${library_name}</var>
</assign>
<msg timestamp="20200131 11:53:43.526" level="TRACE">Arguments: [  ]</msg>
<msg timestamp="20200131 11:53:43.526" level="DEBUG">I am from LibraryOneHavingAConflictingKeyword.py</msg>
<msg timestamp="20200131 11:53:43.526" level="TRACE">Return: 'LibraryOne'</msg>
<msg timestamp="20200131 11:53:43.526" level="INFO">${library_name} = LibraryOne</msg>
<status status="PASS" starttime="20200131 11:53:43.526" endtime="20200131 11:53:43.526"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>$library_name=='LibraryOne'</arg>
</arguments>
<msg timestamp="20200131 11:53:43.526" level="TRACE">Arguments: [ "$library_name=='LibraryOne'" ]</msg>
<msg timestamp="20200131 11:53:43.527" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.526" endtime="20200131 11:53:43.527"></status>
</kw>
<kw name="Import Resource" library="BuiltIn">
<doc>Imports a resource file with the given path.</doc>
<arguments>
<arg>ResourceOneHavingAConflictingKeyword.resource</arg>
</arguments>
<msg timestamp="20200131 11:53:43.527" level="TRACE">Arguments: [ 'ResourceOneHavingAConflictingKeyword.resource' ]</msg>
<msg timestamp="20200131 11:53:43.531" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.527" endtime="20200131 11:53:43.531"></status>
</kw>
<kw name="Import Resource" library="BuiltIn">
<doc>Imports a resource file with the given path.</doc>
<arguments>
<arg>ResourceTwoHavingAConflictingKeyword.resource</arg>
</arguments>
<msg timestamp="20200131 11:53:43.531" level="TRACE">Arguments: [ 'ResourceTwoHavingAConflictingKeyword.resource' ]</msg>
<msg timestamp="20200131 11:53:43.532" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.531" endtime="20200131 11:53:43.532"></status>
</kw>
<kw name="Set Library Search Order" library="BuiltIn">
<doc>Sets the resolution order to use when a name matches multiple keywords.</doc>
<arguments>
<arg>ResourceTwoHavingAConflictingKeyword</arg>
<arg>ResourceOneHavingAConflictingKeyword</arg>
</arguments>
<msg timestamp="20200131 11:53:43.533" level="TRACE">Arguments: [ 'ResourceTwoHavingAConflictingKeyword' | 'ResourceOneHavingAConflictingKeyword' ]</msg>
<msg timestamp="20200131 11:53:43.533" level="TRACE">Return: ('LibraryOneHavingAConflictingKeyword', 'LibraryTwoHavingAConflictingKeyword')</msg>
<status status="PASS" starttime="20200131 11:53:43.532" endtime="20200131 11:53:43.533"></status>
</kw>
<kw name="Another Conflicting Keyword" library="ResourceTwoHavingAConflictingKeyword">
<assign>
<var>${library_name}</var>
</assign>
<msg timestamp="20200131 11:53:43.533" level="TRACE">Arguments: [  ]</msg>
<msg timestamp="20200131 11:53:43.533" level="TRACE">Return: 'Resource Two'</msg>
<msg timestamp="20200131 11:53:43.533" level="INFO">${library_name} = Resource Two</msg>
<status status="PASS" starttime="20200131 11:53:43.533" endtime="20200131 11:53:43.533"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>$library_name=='Resource Two'</arg>
</arguments>
<msg timestamp="20200131 11:53:43.533" level="TRACE">Arguments: [ "$library_name=='Resource Two'" ]</msg>
<msg timestamp="20200131 11:53:43.534" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.533" endtime="20200131 11:53:43.534"></status>
</kw>
<kw name="Set Library Search Order" library="BuiltIn">
<doc>Sets the resolution order to use when a name matches multiple keywords.</doc>
<arguments>
<arg>LibraryOneHavingAConflictingKeyword</arg>
<arg>LibraryTwoHavingAConflictingKeyword</arg>
<arg>ResourceTwoHavingAConflictingKeyword</arg>
<arg>ResourceOneHavingAConflictingKeyword</arg>
</arguments>
<msg timestamp="20200131 11:53:43.534" level="TRACE">Arguments: [ 'LibraryOneHavingAConflictingKeyword' | 'LibraryTwoHavingAConflictingKeyword' | 'ResourceTwoHavingAConflictingKeyword' | 'ResourceOneHavingAConflictingKeyword' ]</msg>
<msg timestamp="20200131 11:53:43.534" level="TRACE">Return: ('ResourceTwoHavingAConflictingKeyword', 'ResourceOneHavingAConflictingKeyword')</msg>
<status status="PASS" starttime="20200131 11:53:43.534" endtime="20200131 11:53:43.534"></status>
</kw>
<kw name="Third Conflicting Keyword" library="ResourceTwoHavingAConflictingKeyword">
<assign>
<var>${library_name}</var>
</assign>
<msg timestamp="20200131 11:53:43.538" level="TRACE">Arguments: [  ]</msg>
<msg timestamp="20200131 11:53:43.538" level="TRACE">Return: 'Resource Two'</msg>
<msg timestamp="20200131 11:53:43.538" level="INFO">${library_name} = Resource Two</msg>
<status status="PASS" starttime="20200131 11:53:43.538" endtime="20200131 11:53:43.538"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>$library_name=='Resource Two'</arg>
</arguments>
<msg timestamp="20200131 11:53:43.538" level="TRACE">Arguments: [ "$library_name=='Resource Two'" ]</msg>
<msg timestamp="20200131 11:53:43.539" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.538" endtime="20200131 11:53:43.539"></status>
</kw>
<doc>Set Library Search Order *search_order
Sets the resolution order to use when a name matches multiple keywords.
The library search order is used to resolve conflicts when a keyword name in the test data matches multiple keywords.
The first library (or resource, see below) containing the keyword is selected and that keyword implementation used.
Note: in *** Settings *** table, we import 2 libraries:
LibraryOneHavingAConflictingKeyword
LibraryTwoHavingAConflictingKeyword</doc>
<status status="PASS" starttime="20200131 11:53:43.518" endtime="20200131 11:53:43.539" critical="yes"></status>
</test>
<test id="s1-s1-t61" name="Use &quot;Set Log Level&quot;">
<kw name="Set Log Level" library="BuiltIn">
<doc>Sets the log threshold to the specified level and returns the old level.</doc>
<arguments>
<arg>ERROR</arg>
</arguments>
<msg timestamp="20200131 11:53:43.540" level="TRACE">Arguments: [ 'ERROR' ]</msg>
<status status="PASS" starttime="20200131 11:53:43.540" endtime="20200131 11:53:43.540"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Log level=ERROR</arg>
<arg>level=ERROR</arg>
</arguments>
<msg timestamp="20200131 11:53:43.540" level="ERROR">Log level=ERROR</msg>
<status status="PASS" starttime="20200131 11:53:43.540" endtime="20200131 11:53:43.540"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Log level=WARN</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" starttime="20200131 11:53:43.540" endtime="20200131 11:53:43.540"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Log level=INFO</arg>
<arg>level=INFO</arg>
</arguments>
<status status="PASS" starttime="20200131 11:53:43.540" endtime="20200131 11:53:43.541"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Log level=DEBUG</arg>
<arg>level=DEBUG</arg>
</arguments>
<status status="PASS" starttime="20200131 11:53:43.542" endtime="20200131 11:53:43.542"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Log level=TRACE</arg>
<arg>level=TRACE</arg>
</arguments>
<status status="PASS" starttime="20200131 11:53:43.542" endtime="20200131 11:53:43.543"></status>
</kw>
<kw name="Set Log Level" library="BuiltIn">
<doc>Sets the log threshold to the specified level and returns the old level.</doc>
<arguments>
<arg>WARN</arg>
</arguments>
<status status="PASS" starttime="20200131 11:53:43.543" endtime="20200131 11:53:43.543"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Log level=ERROR</arg>
<arg>level=ERROR</arg>
</arguments>
<msg timestamp="20200131 11:53:43.543" level="ERROR">Log level=ERROR</msg>
<status status="PASS" starttime="20200131 11:53:43.543" endtime="20200131 11:53:43.543"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Log level=WARN</arg>
<arg>level=WARN</arg>
</arguments>
<msg timestamp="20200131 11:53:43.543" level="WARN">Log level=WARN</msg>
<status status="PASS" starttime="20200131 11:53:43.543" endtime="20200131 11:53:43.548"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Log level=INFO</arg>
<arg>level=INFO</arg>
</arguments>
<status status="PASS" starttime="20200131 11:53:43.549" endtime="20200131 11:53:43.549"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Log level=DEBUG</arg>
<arg>level=DEBUG</arg>
</arguments>
<status status="PASS" starttime="20200131 11:53:43.549" endtime="20200131 11:53:43.549"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Log level=TRACE</arg>
<arg>level=TRACE</arg>
</arguments>
<status status="PASS" starttime="20200131 11:53:43.549" endtime="20200131 11:53:43.549"></status>
</kw>
<kw name="Set Log Level" library="BuiltIn">
<doc>Sets the log threshold to the specified level and returns the old level.</doc>
<arguments>
<arg>INFO</arg>
</arguments>
<msg timestamp="20200131 11:53:43.549" level="INFO">Log level changed from WARN to INFO.</msg>
<status status="PASS" starttime="20200131 11:53:43.549" endtime="20200131 11:53:43.549"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Log level=ERROR</arg>
<arg>level=ERROR</arg>
</arguments>
<msg timestamp="20200131 11:53:43.550" level="ERROR">Log level=ERROR</msg>
<status status="PASS" starttime="20200131 11:53:43.550" endtime="20200131 11:53:43.550"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Log level=WARN</arg>
<arg>level=WARN</arg>
</arguments>
<msg timestamp="20200131 11:53:43.550" level="WARN">Log level=WARN</msg>
<status status="PASS" starttime="20200131 11:53:43.550" endtime="20200131 11:53:43.550"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Log level=INFO</arg>
<arg>level=INFO</arg>
</arguments>
<msg timestamp="20200131 11:53:43.550" level="INFO">Log level=INFO</msg>
<status status="PASS" starttime="20200131 11:53:43.550" endtime="20200131 11:53:43.550"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Log level=DEBUG</arg>
<arg>level=DEBUG</arg>
</arguments>
<status status="PASS" starttime="20200131 11:53:43.550" endtime="20200131 11:53:43.550"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Log level=TRACE</arg>
<arg>level=TRACE</arg>
</arguments>
<status status="PASS" starttime="20200131 11:53:43.550" endtime="20200131 11:53:43.551"></status>
</kw>
<kw name="Set Log Level" library="BuiltIn">
<doc>Sets the log threshold to the specified level and returns the old level.</doc>
<arguments>
<arg>DEBUG</arg>
</arguments>
<msg timestamp="20200131 11:53:43.551" level="INFO">Log level changed from INFO to DEBUG.</msg>
<status status="PASS" starttime="20200131 11:53:43.551" endtime="20200131 11:53:43.551"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Log level=ERROR</arg>
<arg>level=ERROR</arg>
</arguments>
<msg timestamp="20200131 11:53:43.551" level="ERROR">Log level=ERROR</msg>
<status status="PASS" starttime="20200131 11:53:43.551" endtime="20200131 11:53:43.551"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Log level=WARN</arg>
<arg>level=WARN</arg>
</arguments>
<msg timestamp="20200131 11:53:43.551" level="WARN">Log level=WARN</msg>
<status status="PASS" starttime="20200131 11:53:43.551" endtime="20200131 11:53:43.551"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Log level=INFO</arg>
<arg>level=INFO</arg>
</arguments>
<msg timestamp="20200131 11:53:43.552" level="INFO">Log level=INFO</msg>
<status status="PASS" starttime="20200131 11:53:43.551" endtime="20200131 11:53:43.552"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Log level=DEBUG</arg>
<arg>level=DEBUG</arg>
</arguments>
<msg timestamp="20200131 11:53:43.552" level="DEBUG">Log level=DEBUG</msg>
<status status="PASS" starttime="20200131 11:53:43.552" endtime="20200131 11:53:43.552"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Log level=TRACE</arg>
<arg>level=TRACE</arg>
</arguments>
<status status="PASS" starttime="20200131 11:53:43.552" endtime="20200131 11:53:43.553"></status>
</kw>
<kw name="Set Log Level" library="BuiltIn">
<doc>Sets the log threshold to the specified level and returns the old level.</doc>
<arguments>
<arg>TRACE</arg>
</arguments>
<msg timestamp="20200131 11:53:43.553" level="INFO">Log level changed from DEBUG to TRACE.</msg>
<msg timestamp="20200131 11:53:43.553" level="TRACE">Return: 'DEBUG'</msg>
<status status="PASS" starttime="20200131 11:53:43.553" endtime="20200131 11:53:43.553"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Log level=ERROR</arg>
<arg>level=ERROR</arg>
</arguments>
<msg timestamp="20200131 11:53:43.553" level="TRACE">Arguments: [ 'Log level=ERROR' | level='ERROR' ]</msg>
<msg timestamp="20200131 11:53:43.553" level="ERROR">Log level=ERROR</msg>
<msg timestamp="20200131 11:53:43.553" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.553" endtime="20200131 11:53:43.553"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Log level=WARN</arg>
<arg>level=WARN</arg>
</arguments>
<msg timestamp="20200131 11:53:43.553" level="TRACE">Arguments: [ 'Log level=WARN' | level='WARN' ]</msg>
<msg timestamp="20200131 11:53:43.553" level="WARN">Log level=WARN</msg>
<msg timestamp="20200131 11:53:43.555" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.553" endtime="20200131 11:53:43.555"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Log level=INFO</arg>
<arg>level=INFO</arg>
</arguments>
<msg timestamp="20200131 11:53:43.556" level="TRACE">Arguments: [ 'Log level=INFO' | level='INFO' ]</msg>
<msg timestamp="20200131 11:53:43.556" level="INFO">Log level=INFO</msg>
<msg timestamp="20200131 11:53:43.556" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.555" endtime="20200131 11:53:43.556"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Log level=DEBUG</arg>
<arg>level=DEBUG</arg>
</arguments>
<msg timestamp="20200131 11:53:43.559" level="TRACE">Arguments: [ 'Log level=DEBUG' | level='DEBUG' ]</msg>
<msg timestamp="20200131 11:53:43.559" level="DEBUG">Log level=DEBUG</msg>
<msg timestamp="20200131 11:53:43.559" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.559" endtime="20200131 11:53:43.559"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Log level=TRACE</arg>
<arg>level=TRACE</arg>
</arguments>
<msg timestamp="20200131 11:53:43.559" level="TRACE">Arguments: [ 'Log level=TRACE' | level='TRACE' ]</msg>
<msg timestamp="20200131 11:53:43.559" level="TRACE">Log level=TRACE</msg>
<msg timestamp="20200131 11:53:43.559" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.559" endtime="20200131 11:53:43.560"></status>
</kw>
<doc>Set Log Level level

IMPORTANT! The behaviour of Log command is not consistent with the documentation
Refer to the test implementation to see actual behaviour

Documentation for the keyword says:
Sets the log threshold to the specified level and returns the old level.
Messages below the level will not logged. The default logging level is INFO, but
it can be overridden with the command line option --loglevel.
The available levels: TRACE (lowest), DEBUG, INFO (default), WARN, ERROR and NONE (highest, no logging).</doc>
<status status="PASS" starttime="20200131 11:53:43.539" endtime="20200131 11:53:43.560" critical="yes"></status>
</test>
<test id="s1-s1-t62" name="Use &quot;Set Suite Documentation&quot;">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>This sentence is added to the suite documentation</arg>
</arguments>
<assign>
<var>${to be appended}</var>
</assign>
<msg timestamp="20200131 11:53:43.560" level="TRACE">Arguments: [ 'This sentence is added to the suite documentation' ]</msg>
<msg timestamp="20200131 11:53:43.561" level="TRACE">Return: 'This sentence is added to the suite documentation'</msg>
<msg timestamp="20200131 11:53:43.561" level="INFO">${to be appended} = This sentence is added to the suite documentation</msg>
<status status="PASS" starttime="20200131 11:53:43.560" endtime="20200131 11:53:43.561"></status>
</kw>
<kw name="Set Suite Documentation" library="BuiltIn">
<doc>Sets documentation for the current test suite.</doc>
<arguments>
<arg>${to be appended}</arg>
<arg>append=True</arg>
</arguments>
<msg timestamp="20200131 11:53:43.562" level="TRACE">Arguments: [ 'This sentence is added to the suite documentation' | append=True ]</msg>
<msg timestamp="20200131 11:53:43.562" level="INFO">Set suite documentation to:
Checking out the built-in library's capabilities. This sentence is added to the suite documentation</msg>
<msg timestamp="20200131 11:53:43.562" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.562" endtime="20200131 11:53:43.562"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>"${to be appended}" in "${SUITE DOCUMENTATION}"</arg>
</arguments>
<msg timestamp="20200131 11:53:43.562" level="TRACE">Arguments: [ '"This sentence is added to the suite documentation" in "Checking out the built-in library\'s capabilities. This sentence is added to the suite documentation"' ]</msg>
<msg timestamp="20200131 11:53:43.562" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.562" endtime="20200131 11:53:43.562"></status>
</kw>
<doc>Set Suite Documentation doc, append=False, top=False
Sets documentation for the current test suite.
By default the possible existing documentation is overwritten,
but this can be changed using the optional append argument.</doc>
<status status="PASS" starttime="20200131 11:53:43.560" endtime="20200131 11:53:43.562" critical="yes"></status>
</test>
<test id="s1-s1-t63" name="Use &quot;Set Suite Metadata&quot;">
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${SUITE METADATA}</arg>
</arguments>
<msg timestamp="20200131 11:53:43.566" level="TRACE">Arguments: [ &lt;robot.utils.normalizing.NormalizedDict object at 0x7fd4ffa4b590&gt; ]</msg>
<msg timestamp="20200131 11:53:43.566" level="INFO">{}</msg>
<msg timestamp="20200131 11:53:43.566" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.566" endtime="20200131 11:53:43.566"></status>
</kw>
<kw name="Set Suite Metadata" library="BuiltIn">
<doc>Sets metadata for the current test suite.</doc>
<arguments>
<arg>key1</arg>
<arg>value</arg>
<arg>append=True</arg>
</arguments>
<msg timestamp="20200131 11:53:43.566" level="TRACE">Arguments: [ 'key1' | 'value' | append=True ]</msg>
<msg timestamp="20200131 11:53:43.566" level="INFO">Set suite metadata 'key1' to value 'value'.</msg>
<msg timestamp="20200131 11:53:43.566" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.566" endtime="20200131 11:53:43.566"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${SUITE METADATA}</arg>
</arguments>
<msg timestamp="20200131 11:53:43.566" level="TRACE">Arguments: [ &lt;robot.utils.normalizing.NormalizedDict object at 0x7fd4ffc41c10&gt; ]</msg>
<msg timestamp="20200131 11:53:43.566" level="INFO">{'key1': 'value'}</msg>
<msg timestamp="20200131 11:53:43.566" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.566" endtime="20200131 11:53:43.566"></status>
</kw>
<kw name="Set Suite Metadata" library="BuiltIn">
<doc>Sets metadata for the current test suite.</doc>
<arguments>
<arg>key2</arg>
<arg>${6}</arg>
<arg>append=True</arg>
</arguments>
<msg timestamp="20200131 11:53:43.567" level="TRACE">Arguments: [ 'key2' | 6 | append=True ]</msg>
<msg timestamp="20200131 11:53:43.567" level="INFO">Set suite metadata 'key2' to value '6'.</msg>
<msg timestamp="20200131 11:53:43.567" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.566" endtime="20200131 11:53:43.567"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${SUITE METADATA}</arg>
</arguments>
<msg timestamp="20200131 11:53:43.569" level="TRACE">Arguments: [ &lt;robot.utils.normalizing.NormalizedDict object at 0x7fd4ff617650&gt; ]</msg>
<msg timestamp="20200131 11:53:43.569" level="INFO">{'key1': 'value', 'key2': '6'}</msg>
<msg timestamp="20200131 11:53:43.569" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.568" endtime="20200131 11:53:43.569"></status>
</kw>
<doc>Set Suite Metadata name, value, append=False, top=False
Sets metadata for the current test suite.
The metadata of the current suite is available as a built-in variable {}
in a Python dictionary. Notice that modifying this variable directly has no effect on the
actual metadata the suite has</doc>
<status status="PASS" starttime="20200131 11:53:43.565" endtime="20200131 11:53:43.569" critical="yes"></status>
</test>
<test id="s1-s1-t64" name="(Test 1/3) Use &quot;Set Suite Variable&quot;">
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>@{PARENT-SUITE-ONLY-LIST}</arg>
<arg>Item 1</arg>
<arg>${2}</arg>
<arg>Item 3</arg>
</arguments>
<msg timestamp="20200131 11:53:43.570" level="TRACE">Arguments: [ '@{PARENT-SUITE-ONLY-LIST}' | 'Item 1' | '${2}' | 'Item 3' ]</msg>
<msg timestamp="20200131 11:53:43.571" level="INFO">@{PARENT-SUITE-ONLY-LIST} = [ Item 1 | 2 | Item 3 ]</msg>
<msg timestamp="20200131 11:53:43.571" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.570" endtime="20200131 11:53:43.571"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>&amp;{ALSO-CHILD-SUITE-ACCESSIBLE-DICT}</arg>
<arg>key=value</arg>
<arg>children=True</arg>
</arguments>
<msg timestamp="20200131 11:53:43.574" level="TRACE">Arguments: [ '&amp;{ALSO-CHILD-SUITE-ACCESSIBLE-DICT}' | 'key=value' | 'children=True' ]</msg>
<msg timestamp="20200131 11:53:43.574" level="INFO">&amp;{ALSO-CHILD-SUITE-ACCESSIBLE-DICT} = { key=value }</msg>
<msg timestamp="20200131 11:53:43.574" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.574" endtime="20200131 11:53:43.574"></status>
</kw>
<doc>https://robotframework.org/robotframework/latest/libraries/BuiltIn.html#Set%20Suite%20Variable
Set Suite Variable name, *values
Makes a variable available everywhere within the scope of the current suit</doc>
<status status="PASS" starttime="20200131 11:53:43.570" endtime="20200131 11:53:43.575" critical="yes"></status>
</test>
<test id="s1-s1-t65" name="(Test 2/3) Use &quot;Set Suite Variable&quot;">
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>@{PARENT-SUITE-ONLY-LIST}</arg>
</arguments>
<msg timestamp="20200131 11:53:43.575" level="TRACE">Arguments: [ '@{PARENT-SUITE-ONLY-LIST}' ]</msg>
<msg timestamp="20200131 11:53:43.575" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.575" endtime="20200131 11:53:43.575"></status>
</kw>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>&amp;{ALSO-CHILD-SUITE-ACCESSIBLE-DICT}</arg>
</arguments>
<msg timestamp="20200131 11:53:43.577" level="TRACE">Arguments: [ '&amp;{ALSO-CHILD-SUITE-ACCESSIBLE-DICT}' ]</msg>
<msg timestamp="20200131 11:53:43.577" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.577" endtime="20200131 11:53:43.577"></status>
</kw>
<status status="PASS" starttime="20200131 11:53:43.575" endtime="20200131 11:53:43.577" critical="yes"></status>
</test>
<test id="s1-s1-t66" name="(Test 3/3) Child Test Suite Accessing Variable &quot;ALSO-CHILD-SUITE-ACCESSIBLE-DICT&quot;">
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>Should Be Implemented</arg>
</arguments>
<msg timestamp="20200131 11:53:43.579" level="TRACE">Arguments: [ 'Should Be Implemented' ]</msg>
<msg timestamp="20200131 11:53:43.580" level="FAIL">Should Be Implemented</msg>
<msg timestamp="20200131 11:53:43.580" level="DEBUG">Traceback (most recent call last):
  None</msg>
<status status="FAIL" starttime="20200131 11:53:43.579" endtime="20200131 11:53:43.580"></status>
</kw>
<doc>https://stackoverflow.com/questions/59929794/robot-fw-builtin-module-set-suite-variable-how-to-pass-the-suite-variabl
The goal is to have and is to call a simple child test suite, which checks the following:
['Item 1', 2, 'Item 3'] is NOT availabe in the child test suite
{'key': 'value'} is indeed available in the child test suite</doc>
<tags>
<tag>not-understood</tag>
</tags>
<status status="FAIL" starttime="20200131 11:53:43.578" endtime="20200131 11:53:43.580" critical="yes">Should Be Implemented</status>
</test>
<test id="s1-s1-t67" name="(Test 1/3) Use &quot;Set Suite Variable&quot;: Override A Variable In The Test Case Scope">
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${var}</arg>
<arg>test</arg>
</arguments>
<msg timestamp="20200131 11:53:43.580" level="TRACE">Arguments: [ '${var}' | 'test' ]</msg>
<msg timestamp="20200131 11:53:43.581" level="INFO">${var} = test</msg>
<msg timestamp="20200131 11:53:43.581" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.580" endtime="20200131 11:53:43.581"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${var}</arg>
<arg>test</arg>
</arguments>
<msg timestamp="20200131 11:53:43.583" level="TRACE">Arguments: [ 'test' | 'test' ]</msg>
<msg timestamp="20200131 11:53:43.583" level="DEBUG">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20200131 11:53:43.583" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.583" endtime="20200131 11:53:43.583"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${var}</arg>
<arg>suite</arg>
</arguments>
<msg timestamp="20200131 11:53:43.584" level="TRACE">Arguments: [ '${var}' | 'suite' ]</msg>
<msg timestamp="20200131 11:53:43.584" level="INFO">${var} = suite</msg>
<msg timestamp="20200131 11:53:43.584" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.584" endtime="20200131 11:53:43.584"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${var}</arg>
<arg>suite</arg>
</arguments>
<msg timestamp="20200131 11:53:43.584" level="TRACE">Arguments: [ 'suite' | 'suite' ]</msg>
<msg timestamp="20200131 11:53:43.584" level="DEBUG">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20200131 11:53:43.584" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.584" endtime="20200131 11:53:43.584"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${var2}</arg>
<arg>suite</arg>
</arguments>
<msg timestamp="20200131 11:53:43.584" level="TRACE">Arguments: [ '${var2}' | 'suite' ]</msg>
<msg timestamp="20200131 11:53:43.585" level="INFO">${var2} = suite</msg>
<msg timestamp="20200131 11:53:43.585" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.584" endtime="20200131 11:53:43.585"></status>
</kw>
<doc>https://stackoverflow.com/questions/59933909/robot-fw-builtin-module-set-suite-variable-how-to-overwrite-the-newly-crea
"If a variable already exists within the new scope, its value will be overwritten."
"If a variable already exists within the test case scope, its value will be overridden"
Otherwise a new variable is created.</doc>
<status status="PASS" starttime="20200131 11:53:43.580" endtime="20200131 11:53:43.586" critical="yes"></status>
</test>
<test id="s1-s1-t68" name="(Test 2/3) Use &quot;Set Suite Variable&quot;: Override A Variable In The Test Case Scope">
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${var}</arg>
<arg>suite</arg>
</arguments>
<msg timestamp="20200131 11:53:43.589" level="TRACE">Arguments: [ 'suite' | 'suite' ]</msg>
<msg timestamp="20200131 11:53:43.589" level="DEBUG">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20200131 11:53:43.589" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.589" endtime="20200131 11:53:43.589"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${var2}</arg>
<arg>suite</arg>
</arguments>
<msg timestamp="20200131 11:53:43.590" level="TRACE">Arguments: [ 'suite' | 'suite' ]</msg>
<msg timestamp="20200131 11:53:43.590" level="DEBUG">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20200131 11:53:43.590" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.590" endtime="20200131 11:53:43.590"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${var}</arg>
<arg>test</arg>
</arguments>
<msg timestamp="20200131 11:53:43.593" level="TRACE">Arguments: [ '${var}' | 'test' ]</msg>
<msg timestamp="20200131 11:53:43.593" level="INFO">${var} = test</msg>
<msg timestamp="20200131 11:53:43.593" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.593" endtime="20200131 11:53:43.593"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${var}</arg>
<arg>test</arg>
</arguments>
<msg timestamp="20200131 11:53:43.594" level="TRACE">Arguments: [ 'test' | 'test' ]</msg>
<msg timestamp="20200131 11:53:43.594" level="DEBUG">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20200131 11:53:43.594" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.593" endtime="20200131 11:53:43.594"></status>
</kw>
<status status="PASS" starttime="20200131 11:53:43.588" endtime="20200131 11:53:43.594" critical="yes"></status>
</test>
<test id="s1-s1-t69" name="(Test 3/3) Use &quot;Set Suite Variable&quot;: What does var have in this test?">
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${var}</arg>
<arg>suite</arg>
</arguments>
<msg timestamp="20200131 11:53:43.594" level="TRACE">Arguments: [ 'suite' | 'suite' ]</msg>
<msg timestamp="20200131 11:53:43.594" level="DEBUG">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20200131 11:53:43.594" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.594" endtime="20200131 11:53:43.594"></status>
</kw>
<status status="PASS" starttime="20200131 11:53:43.594" endtime="20200131 11:53:43.595" critical="yes"></status>
</test>
<test id="s1-s1-t70" name="(Test 1/2) Use &quot;Set Suite Variable&quot; : Set Locally Scoped Variable As Suite Scoped">
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${local_to_suite_scoped}</arg>
<arg>${3}</arg>
</arguments>
<msg timestamp="20200131 11:53:43.595" level="TRACE">Arguments: [ '${local_to_suite_scoped}' | '${3}' ]</msg>
<msg timestamp="20200131 11:53:43.596" level="INFO">${local_to_suite_scoped} = 3</msg>
<msg timestamp="20200131 11:53:43.596" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.595" endtime="20200131 11:53:43.596"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${local_to_suite_scoped}</arg>
</arguments>
<msg timestamp="20200131 11:53:43.599" level="TRACE">Arguments: [ '${local_to_suite_scoped}' ]</msg>
<msg timestamp="20200131 11:53:43.599" level="INFO">${local_to_suite_scoped} = 3</msg>
<msg timestamp="20200131 11:53:43.599" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.599" endtime="20200131 11:53:43.600"></status>
</kw>
<doc>https://stackoverflow.com/questions/59945461/robot-fw-buitlin-library-set-suite-variable-how-to-pass-the-variable-withi/59946962#59946962
Set Suite Variable:
If a variable already exists within the current scope (i.e. Test 1/2), the value can be left empty and
the variable within the new scope (i.e. Test 2/2) gets the value within the current scope
(i.e Test 1/2)</doc>
<status status="PASS" starttime="20200131 11:53:43.595" endtime="20200131 11:53:43.600" critical="yes"></status>
</test>
<test id="s1-s1-t71" name="(Test 2/2) Use &quot;Set Suite Variable&quot; : Use local_to_suite_scoped in this test">
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${local_to_suite_scoped}</arg>
</arguments>
<msg timestamp="20200131 11:53:43.600" level="TRACE">Arguments: [ '${local_to_suite_scoped}' ]</msg>
<msg timestamp="20200131 11:53:43.600" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.600" endtime="20200131 11:53:43.600"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${local_to_suite_scoped}</arg>
<arg>${3}</arg>
</arguments>
<msg timestamp="20200131 11:53:43.601" level="TRACE">Arguments: [ 3 | 3 ]</msg>
<msg timestamp="20200131 11:53:43.601" level="DEBUG">Argument types are:
&lt;class 'int'&gt;
&lt;class 'int'&gt;</msg>
<msg timestamp="20200131 11:53:43.601" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.600" endtime="20200131 11:53:43.601"></status>
</kw>
<status status="PASS" starttime="20200131 11:53:43.600" endtime="20200131 11:53:43.601" critical="yes"></status>
</test>
<test id="s1-s1-t72" name="(Test 1/2) Use &quot;Set Suite Variable&quot; : The Variable Has Value, Which Itself Is A Variable">
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${var}</arg>
<arg>suite</arg>
</arguments>
<msg timestamp="20200131 11:53:43.601" level="TRACE">Arguments: [ 'suite' | 'suite' ]</msg>
<msg timestamp="20200131 11:53:43.601" level="DEBUG">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20200131 11:53:43.601" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.601" endtime="20200131 11:53:43.602"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>\${var}</arg>
</arguments>
<assign>
<var>${NAME}</var>
</assign>
<msg timestamp="20200131 11:53:43.602" level="TRACE">Arguments: [ '${var}' ]</msg>
<msg timestamp="20200131 11:53:43.602" level="TRACE">Return: '${var}'</msg>
<msg timestamp="20200131 11:53:43.602" level="INFO">${NAME} = ${var}</msg>
<status status="PASS" starttime="20200131 11:53:43.602" endtime="20200131 11:53:43.602"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${NAME}</arg>
<arg>\${var}</arg>
</arguments>
<msg timestamp="20200131 11:53:43.606" level="TRACE">Arguments: [ '${var}' | '${var}' ]</msg>
<msg timestamp="20200131 11:53:43.606" level="DEBUG">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20200131 11:53:43.606" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.605" endtime="20200131 11:53:43.606"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${NAME}</arg>
<arg>X</arg>
</arguments>
<msg timestamp="20200131 11:53:43.606" level="TRACE">Arguments: [ '${NAME}' | 'X' ]</msg>
<msg timestamp="20200131 11:53:43.606" level="INFO">${var} = X</msg>
<msg timestamp="20200131 11:53:43.606" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.606" endtime="20200131 11:53:43.606"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${var}</arg>
<arg>X</arg>
</arguments>
<msg timestamp="20200131 11:53:43.606" level="TRACE">Arguments: [ 'X' | 'X' ]</msg>
<msg timestamp="20200131 11:53:43.607" level="DEBUG">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20200131 11:53:43.607" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.606" endtime="20200131 11:53:43.607"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>\${NAME}</arg>
<arg>Y</arg>
</arguments>
<msg timestamp="20200131 11:53:43.607" level="TRACE">Arguments: [ '\\${NAME}' | 'Y' ]</msg>
<msg timestamp="20200131 11:53:43.607" level="INFO">${NAME} = Y</msg>
<msg timestamp="20200131 11:53:43.607" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.607" endtime="20200131 11:53:43.607"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${NAME}</arg>
<arg>Y</arg>
</arguments>
<msg timestamp="20200131 11:53:43.607" level="TRACE">Arguments: [ 'Y' | 'Y' ]</msg>
<msg timestamp="20200131 11:53:43.607" level="DEBUG">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20200131 11:53:43.607" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.607" endtime="20200131 11:53:43.607"></status>
</kw>
<doc>If the variable has value which itself is a variable (escaped or not),
you must always use the escaped format to set the variable</doc>
<status status="PASS" starttime="20200131 11:53:43.601" endtime="20200131 11:53:43.607" critical="yes"></status>
</test>
<test id="s1-s1-t73" name="(Test 2/2) Use &quot;Set Suite Variable&quot; : var should have value &quot;X&quot;">
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>$var=='X'</arg>
</arguments>
<msg timestamp="20200131 11:53:43.608" level="TRACE">Arguments: [ "$var=='X'" ]</msg>
<msg timestamp="20200131 11:53:43.608" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.608" endtime="20200131 11:53:43.608"></status>
</kw>
<status status="PASS" starttime="20200131 11:53:43.607" endtime="20200131 11:53:43.613" critical="yes"></status>
</test>
<test id="s1-s1-t74" name="Use &quot;Set Task Variable&quot;">
<kw name="Set Task Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current task.</doc>
<arguments>
<arg>@{ListX}</arg>
<arg>item1</arg>
<arg>item2</arg>
</arguments>
<msg timestamp="20200131 11:53:43.613" level="TRACE">Arguments: [ '@{ListX}' | 'item1' | 'item2' ]</msg>
<msg timestamp="20200131 11:53:43.614" level="INFO">@{ListX} = [ item1 | item2 ]</msg>
<msg timestamp="20200131 11:53:43.614" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.613" endtime="20200131 11:53:43.614"></status>
</kw>
<kw name="This Keyword Must Access ListX">
<doc>note that this keyword has no [Arguments] defined</doc>
<msg timestamp="20200131 11:53:43.614" level="TRACE">Arguments: [  ]</msg>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${ListX}</arg>
</arguments>
<msg timestamp="20200131 11:53:43.614" level="TRACE">Arguments: [ '${ListX}' ]</msg>
<msg timestamp="20200131 11:53:43.614" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.614" endtime="20200131 11:53:43.614"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>item1</arg>
<arg>item2</arg>
</arguments>
<assign>
<var>@{expected}</var>
</assign>
<msg timestamp="20200131 11:53:43.615" level="TRACE">Arguments: [ 'item1' | 'item2' ]</msg>
<msg timestamp="20200131 11:53:43.615" level="TRACE">Return: ['item1', 'item2']</msg>
<msg timestamp="20200131 11:53:43.615" level="INFO">@{expected} = [ item1 | item2 ]</msg>
<status status="PASS" starttime="20200131 11:53:43.615" endtime="20200131 11:53:43.615"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${expected}</arg>
<arg>${listX}</arg>
</arguments>
<msg timestamp="20200131 11:53:43.615" level="TRACE">Arguments: [ ['item1', 'item2'] | ['item1', 'item2'] ]</msg>
<msg timestamp="20200131 11:53:43.615" level="DEBUG">Argument types are:
&lt;class 'list'&gt;
&lt;class 'list'&gt;</msg>
<msg timestamp="20200131 11:53:43.615" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.615" endtime="20200131 11:53:43.615"></status>
</kw>
<msg timestamp="20200131 11:53:43.615" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.614" endtime="20200131 11:53:43.615"></status>
</kw>
<doc>"Set Task Variable" is an alias to "Set Test Variable". New to RF 3.1</doc>
<status status="PASS" starttime="20200131 11:53:43.613" endtime="20200131 11:53:43.615" critical="yes"></status>
</test>
<test id="s1-s1-t75" name="Use &quot;Set Test Documentation&quot;">
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${TEST DOCUMENTATION}</arg>
</arguments>
<msg timestamp="20200131 11:53:43.618" level="TRACE">Arguments: [ "Set Test Documentation doc, append=False\nSets documentation for the current test case.\nBy default the possible existing documentation is overwritten, but this can be changed using\nthe optional 'append' argument\nThe current test documentation is available as a built-in variable ${TEST DOCUMENTATION}" ]</msg>
<msg timestamp="20200131 11:53:43.618" level="INFO">Set Test Documentation doc, append=False
Sets documentation for the current test case.
By default the possible existing documentation is overwritten, but this can be changed using
the optional 'append' argument
The current test documentation is available as a built-in variable ${TEST DOCUMENTATION}</msg>
<msg timestamp="20200131 11:53:43.618" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.618" endtime="20200131 11:53:43.619"></status>
</kw>
<kw name="Set Test Documentation" library="BuiltIn">
<doc>Sets documentation for the current test case.</doc>
<arguments>
<arg>This overwrites the [Documentation]</arg>
</arguments>
<msg timestamp="20200131 11:53:43.619" level="TRACE">Arguments: [ 'This overwrites the [Documentation]' ]</msg>
<msg timestamp="20200131 11:53:43.619" level="INFO">Set test documentation to:
This overwrites the [Documentation]</msg>
<msg timestamp="20200131 11:53:43.619" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.619" endtime="20200131 11:53:43.619"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${TEST DOCUMENTATION}</arg>
</arguments>
<msg timestamp="20200131 11:53:43.619" level="TRACE">Arguments: [ 'This overwrites the [Documentation]' ]</msg>
<msg timestamp="20200131 11:53:43.619" level="INFO">This overwrites the [Documentation]</msg>
<msg timestamp="20200131 11:53:43.619" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.619" endtime="20200131 11:53:43.619"></status>
</kw>
<doc>This overwrites the [Documentation]</doc>
<status status="PASS" starttime="20200131 11:53:43.616" endtime="20200131 11:53:43.619" critical="yes"></status>
</test>
<test id="s1-s1-t76" name="(Test 1/3) Use &quot;Set Test Message&quot;">
<kw name="Set Test Message" library="BuiltIn">
<doc>Sets message for the current test case.</doc>
<arguments>
<arg>Test Message Begin</arg>
</arguments>
<msg timestamp="20200131 11:53:43.626" level="TRACE">Arguments: [ 'Test Message Begin' ]</msg>
<msg timestamp="20200131 11:53:43.626" level="INFO">Set test message to:
Test Message Begin</msg>
<msg timestamp="20200131 11:53:43.626" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.626" endtime="20200131 11:53:43.626"></status>
</kw>
<kw name="Set Test Message" library="BuiltIn">
<doc>Sets message for the current test case.</doc>
<arguments>
<arg>Test Message End</arg>
<arg>append=True</arg>
</arguments>
<msg timestamp="20200131 11:53:43.626" level="TRACE">Arguments: [ 'Test Message End' | append=True ]</msg>
<msg timestamp="20200131 11:53:43.627" level="INFO">Set test message to:
Test Message Begin Test Message End</msg>
<msg timestamp="20200131 11:53:43.627" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.626" endtime="20200131 11:53:43.627"></status>
</kw>
<kw name="(Test 1/3) Use &quot;Set Test Message&quot; - Teardown" type="teardown">
<msg timestamp="20200131 11:53:43.627" level="TRACE">Arguments: [  ]</msg>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${TEST MESSAGE}</arg>
</arguments>
<msg timestamp="20200131 11:53:43.627" level="TRACE">Arguments: [ 'Test Message Begin Test Message End' ]</msg>
<msg timestamp="20200131 11:53:43.627" level="INFO">Test Message Begin Test Message End</msg>
<msg timestamp="20200131 11:53:43.627" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.627" endtime="20200131 11:53:43.627"></status>
</kw>
<msg timestamp="20200131 11:53:43.627" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.627" endtime="20200131 11:53:43.627"></status>
</kw>
<doc>Set Test Message message, append=False
Sets message for the current test case
If the optional append argument is given a true value (see Boolean arguments),
the given message is added after the possible earlier message by joining the messages with a space.
Notice that in teardown the message is available as a built-in variable ${TEST MESSAGE}.</doc>
<status status="PASS" starttime="20200131 11:53:43.620" endtime="20200131 11:53:43.627" critical="yes">Test Message Begin Test Message End</status>
</test>
<test id="s1-s1-t77" name="(Test 2/3) Use &quot;Set Test Message&quot; In Teardown Overriding Failure Message">
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${False}</arg>
</arguments>
<msg timestamp="20200131 11:53:43.628" level="TRACE">Arguments: [ False ]</msg>
<msg timestamp="20200131 11:53:43.628" level="FAIL">'False' should be true.</msg>
<msg timestamp="20200131 11:53:43.628" level="DEBUG">Traceback (most recent call last):
  None</msg>
<status status="FAIL" starttime="20200131 11:53:43.628" endtime="20200131 11:53:43.628"></status>
</kw>
<kw name="(Test 2/3) Use &quot;Set Test Message&quot; - Teardown Overriding The Failure Message" type="teardown">
<msg timestamp="20200131 11:53:43.630" level="TRACE">Arguments: [  ]</msg>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${TEST MESSAGE}</arg>
</arguments>
<msg timestamp="20200131 11:53:43.630" level="TRACE">Arguments: [ "'False' should be true." ]</msg>
<msg timestamp="20200131 11:53:43.630" level="INFO">'False' should be true.</msg>
<msg timestamp="20200131 11:53:43.630" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.630" endtime="20200131 11:53:43.630"></status>
</kw>
<kw name="Set Test Message" library="BuiltIn">
<doc>Sets message for the current test case.</doc>
<arguments>
<arg>This overrides the failure message</arg>
</arguments>
<msg timestamp="20200131 11:53:43.630" level="TRACE">Arguments: [ 'This overrides the failure message' ]</msg>
<msg timestamp="20200131 11:53:43.630" level="INFO">Set test message to:
This overrides the failure message</msg>
<msg timestamp="20200131 11:53:43.630" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.630" endtime="20200131 11:53:43.630"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${TEST MESSAGE}</arg>
</arguments>
<msg timestamp="20200131 11:53:43.631" level="TRACE">Arguments: [ 'This overrides the failure message' ]</msg>
<msg timestamp="20200131 11:53:43.631" level="INFO">This overrides the failure message</msg>
<msg timestamp="20200131 11:53:43.631" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.631" endtime="20200131 11:53:43.631"></status>
</kw>
<msg timestamp="20200131 11:53:43.631" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.630" endtime="20200131 11:53:43.631"></status>
</kw>
<doc>In test teardown this keyword can alter the possible failure message</doc>
<tags>
<tag>failure-expected</tag>
</tags>
<status status="FAIL" starttime="20200131 11:53:43.628" endtime="20200131 11:53:43.633" critical="no">This overrides the failure message</status>
</test>
<test id="s1-s1-t78" name="(Test 3/3) Use &quot;Set Test Message&quot;">
<kw name="Set Test Message" library="BuiltIn">
<doc>Sets message for the current test case.</doc>
<arguments>
<arg>Test Message Begin</arg>
</arguments>
<msg timestamp="20200131 11:53:43.634" level="TRACE">Arguments: [ 'Test Message Begin' ]</msg>
<msg timestamp="20200131 11:53:43.634" level="INFO">Set test message to:
Test Message Begin</msg>
<msg timestamp="20200131 11:53:43.634" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.634" endtime="20200131 11:53:43.634"></status>
</kw>
<kw name="Set Test Message" library="BuiltIn">
<doc>Sets message for the current test case.</doc>
<arguments>
<arg>Test Message End</arg>
<arg>append=True</arg>
</arguments>
<msg timestamp="20200131 11:53:43.634" level="TRACE">Arguments: [ 'Test Message End' | append=True ]</msg>
<msg timestamp="20200131 11:53:43.634" level="INFO">Set test message to:
Test Message Begin Test Message End</msg>
<msg timestamp="20200131 11:53:43.634" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.634" endtime="20200131 11:53:43.634"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${False}</arg>
</arguments>
<msg timestamp="20200131 11:53:43.634" level="TRACE">Arguments: [ False ]</msg>
<msg timestamp="20200131 11:53:43.635" level="FAIL">'False' should be true.</msg>
<msg timestamp="20200131 11:53:43.635" level="DEBUG">Traceback (most recent call last):
  None</msg>
<status status="FAIL" starttime="20200131 11:53:43.634" endtime="20200131 11:53:43.635"></status>
</kw>
<kw name="(Test 1/3) Use &quot;Set Test Message&quot; - Teardown" type="teardown">
<msg timestamp="20200131 11:53:43.635" level="TRACE">Arguments: [  ]</msg>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${TEST MESSAGE}</arg>
</arguments>
<msg timestamp="20200131 11:53:43.635" level="TRACE">Arguments: [ "'False' should be true." ]</msg>
<msg timestamp="20200131 11:53:43.635" level="INFO">'False' should be true.</msg>
<msg timestamp="20200131 11:53:43.635" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.635" endtime="20200131 11:53:43.635"></status>
</kw>
<msg timestamp="20200131 11:53:43.635" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.635" endtime="20200131 11:53:43.636"></status>
</kw>
<doc>In case this keyword is used and after that a failure occurs, the failure overrides
the message set by this keyword</doc>
<tags>
<tag>failure-expected</tag>
</tags>
<status status="FAIL" starttime="20200131 11:53:43.633" endtime="20200131 11:53:43.636" critical="no">'False' should be true.</status>
</test>
<test id="s1-s1-t79" name="Use &quot;Set Test Variable&quot;">
<kw name="Keyword Creating A Test Variable">
<msg timestamp="20200131 11:53:43.640" level="TRACE">Arguments: [  ]</msg>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${test-scoped-var}</arg>
<arg>test scoped</arg>
</arguments>
<msg timestamp="20200131 11:53:43.641" level="TRACE">Arguments: [ '${test-scoped-var}' | 'test scoped' ]</msg>
<msg timestamp="20200131 11:53:43.641" level="INFO">${test-scoped-var} = test scoped</msg>
<msg timestamp="20200131 11:53:43.641" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.640" endtime="20200131 11:53:43.641"></status>
</kw>
<msg timestamp="20200131 11:53:43.641" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.640" endtime="20200131 11:53:43.641"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${test-scoped-var}</arg>
</arguments>
<msg timestamp="20200131 11:53:43.643" level="TRACE">Arguments: [ 'test scoped' ]</msg>
<msg timestamp="20200131 11:53:43.643" level="INFO">test scoped</msg>
<msg timestamp="20200131 11:53:43.643" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.643" endtime="20200131 11:53:43.644"></status>
</kw>
<kw name="Keyword Logging The Test Variable">
<msg timestamp="20200131 11:53:43.644" level="TRACE">Arguments: [  ]</msg>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${test-scoped-var}</arg>
</arguments>
<msg timestamp="20200131 11:53:43.644" level="TRACE">Arguments: [ 'test scoped' ]</msg>
<msg timestamp="20200131 11:53:43.644" level="INFO">test scoped</msg>
<msg timestamp="20200131 11:53:43.644" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.644" endtime="20200131 11:53:43.644"></status>
</kw>
<msg timestamp="20200131 11:53:43.644" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.644" endtime="20200131 11:53:43.644"></status>
</kw>
<doc>Set Test Variable name, *values
Makes a variable available everywhere within the scope of the current test.
Variables set with this keyword are available everywhere within the scope of the currently
executed test case. For example, if you set a variable in a user keyword, it is available
both in the test case level and also in all other user keywords used in the current test.
Other test cases will not see variables set with this keyword.</doc>
<status status="PASS" starttime="20200131 11:53:43.639" endtime="20200131 11:53:43.644" critical="yes"></status>
</test>
<test id="s1-s1-t80" name="Use &quot;Set Variable&quot;">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>Value of suite var is ${var}</arg>
</arguments>
<assign>
<var>${local_scalar}</var>
</assign>
<msg timestamp="20200131 11:53:43.646" level="TRACE">Arguments: [ 'Value of suite var is X' ]</msg>
<msg timestamp="20200131 11:53:43.646" level="TRACE">Return: 'Value of suite var is X'</msg>
<msg timestamp="20200131 11:53:43.646" level="INFO">${local_scalar} = Value of suite var is X</msg>
<status status="PASS" starttime="20200131 11:53:43.645" endtime="20200131 11:53:43.646"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${1}</arg>
<arg>${2}</arg>
<arg>${3}</arg>
</arguments>
<assign>
<var>${local_list}</var>
</assign>
<msg timestamp="20200131 11:53:43.650" level="TRACE">Arguments: [ 1 | 2 | 3 ]</msg>
<msg timestamp="20200131 11:53:43.650" level="TRACE">Return: [1, 2, 3]</msg>
<msg timestamp="20200131 11:53:43.650" level="INFO">${local_list} = [1, 2, 3]</msg>
<status status="PASS" starttime="20200131 11:53:43.649" endtime="20200131 11:53:43.650"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${local_list}</arg>
</arguments>
<assign>
<var>@{local_list_2}</var>
</assign>
<msg timestamp="20200131 11:53:43.650" level="TRACE">Arguments: [ [1, 2, 3] ]</msg>
<msg timestamp="20200131 11:53:43.650" level="TRACE">Return: [1, 2, 3]</msg>
<msg timestamp="20200131 11:53:43.650" level="INFO">@{local_list_2} = [ 1 | 2 | 3 ]</msg>
<status status="PASS" starttime="20200131 11:53:43.650" endtime="20200131 11:53:43.650"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${local_list}</arg>
</arguments>
<assign>
<var>${item1}</var>
<var>${item2}</var>
<var>${item3}</var>
</assign>
<msg timestamp="20200131 11:53:43.650" level="TRACE">Arguments: [ [1, 2, 3] ]</msg>
<msg timestamp="20200131 11:53:43.650" level="TRACE">Return: [1, 2, 3]</msg>
<msg timestamp="20200131 11:53:43.650" level="INFO">${item1} = 1</msg>
<msg timestamp="20200131 11:53:43.650" level="INFO">${item2} = 2</msg>
<msg timestamp="20200131 11:53:43.650" level="INFO">${item3} = 3</msg>
<status status="PASS" starttime="20200131 11:53:43.650" endtime="20200131 11:53:43.650"></status>
</kw>
<doc>Set Variable *values
Returns the given values which can then be assigned to a variables.
This keyword is mainly used for setting scalar variables.</doc>
<status status="PASS" starttime="20200131 11:53:43.644" endtime="20200131 11:53:43.650" critical="yes"></status>
</test>
<test id="s1-s1-t81" name="Use &quot;Set Variable If&quot;">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${0}</arg>
</arguments>
<assign>
<var>${x}</var>
</assign>
<msg timestamp="20200131 11:53:43.651" level="TRACE">Arguments: [ 0 ]</msg>
<msg timestamp="20200131 11:53:43.651" level="TRACE">Return: 0</msg>
<msg timestamp="20200131 11:53:43.651" level="INFO">${x} = 0</msg>
<status status="PASS" starttime="20200131 11:53:43.651" endtime="20200131 11:53:43.652"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>${x} == 0</arg>
<arg>zero</arg>
<arg>nonzero</arg>
</arguments>
<assign>
<var>${var1}</var>
</assign>
<msg timestamp="20200131 11:53:43.652" level="TRACE">Arguments: [ '0 == 0' | 'zero' | 'nonzero' ]</msg>
<msg timestamp="20200131 11:53:43.652" level="TRACE">Return: 'zero'</msg>
<msg timestamp="20200131 11:53:43.652" level="INFO">${var1} = zero</msg>
<status status="PASS" starttime="20200131 11:53:43.652" endtime="20200131 11:53:43.652"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>$var1=='zero'</arg>
</arguments>
<msg timestamp="20200131 11:53:43.652" level="TRACE">Arguments: [ "$var1=='zero'" ]</msg>
<msg timestamp="20200131 11:53:43.653" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.652" endtime="20200131 11:53:43.656"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>${x} &gt; 0</arg>
<arg>value1</arg>
<arg>value2</arg>
</arguments>
<assign>
<var>${var2}</var>
</assign>
<msg timestamp="20200131 11:53:43.656" level="TRACE">Arguments: [ '0 &gt; 0' | 'value1' | 'value2' ]</msg>
<msg timestamp="20200131 11:53:43.657" level="TRACE">Return: 'value2'</msg>
<msg timestamp="20200131 11:53:43.657" level="INFO">${var2} = value2</msg>
<status status="PASS" starttime="20200131 11:53:43.656" endtime="20200131 11:53:43.657"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>$var2=='value2'</arg>
</arguments>
<msg timestamp="20200131 11:53:43.657" level="TRACE">Arguments: [ "$var2=='value2'" ]</msg>
<msg timestamp="20200131 11:53:43.658" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.657" endtime="20200131 11:53:43.658"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>${x} &gt; 0</arg>
<arg>whatever</arg>
</arguments>
<assign>
<var>${var3}</var>
</assign>
<msg timestamp="20200131 11:53:43.659" level="TRACE">Arguments: [ '0 &gt; 0' | 'whatever' ]</msg>
<msg timestamp="20200131 11:53:43.660" level="TRACE">Return: None</msg>
<msg timestamp="20200131 11:53:43.660" level="INFO">${var3} = None</msg>
<status status="PASS" starttime="20200131 11:53:43.659" endtime="20200131 11:53:43.660"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>$var3==None</arg>
</arguments>
<msg timestamp="20200131 11:53:43.660" level="TRACE">Arguments: [ '$var3==None' ]</msg>
<msg timestamp="20200131 11:53:43.661" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.660" endtime="20200131 11:53:43.661"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>${x} == 0</arg>
<arg>zero</arg>
<arg>${x} &gt; 0</arg>
<arg>greater than zero</arg>
<arg>less then zero</arg>
</arguments>
<assign>
<var>${var}</var>
</assign>
<msg timestamp="20200131 11:53:43.662" level="TRACE">Arguments: [ '0 == 0' | 'zero' | '${x} &gt; 0' | 'greater than zero' | 'less then zero' ]</msg>
<msg timestamp="20200131 11:53:43.662" level="TRACE">Return: 'zero'</msg>
<msg timestamp="20200131 11:53:43.662" level="INFO">${var} = zero</msg>
<status status="PASS" starttime="20200131 11:53:43.662" endtime="20200131 11:53:43.662"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>$var=='zero'</arg>
</arguments>
<msg timestamp="20200131 11:53:43.665" level="TRACE">Arguments: [ "$var=='zero'" ]</msg>
<msg timestamp="20200131 11:53:43.666" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.665" endtime="20200131 11:53:43.666"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${-1}</arg>
</arguments>
<assign>
<var>${x}</var>
</assign>
<msg timestamp="20200131 11:53:43.666" level="TRACE">Arguments: [ -1 ]</msg>
<msg timestamp="20200131 11:53:43.666" level="TRACE">Return: -1</msg>
<msg timestamp="20200131 11:53:43.666" level="INFO">${x} = -1</msg>
<status status="PASS" starttime="20200131 11:53:43.666" endtime="20200131 11:53:43.666"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>${x} == 0</arg>
<arg>zero</arg>
<arg>${x} == 1</arg>
<arg>one</arg>
<arg>${x} == 2</arg>
<arg>two</arg>
<arg>${x} &gt; 2</arg>
<arg>greater than two</arg>
<arg>${x} &lt; 0</arg>
<arg>less than zero</arg>
</arguments>
<assign>
<var>${var}</var>
</assign>
<msg timestamp="20200131 11:53:43.666" level="TRACE">Arguments: [ '-1 == 0' | 'zero' | '${x} == 1' | 'one' | '${x} == 2' | 'two' | '${x} &gt; 2' | 'greater than two' | '${x} &lt; 0' | 'less than zero' ]</msg>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>${x} == 1</arg>
<arg>one</arg>
<arg>${x} == 2</arg>
<arg>two</arg>
<arg>${x} &gt; 2</arg>
<arg>greater than two</arg>
<arg>${x} &lt; 0</arg>
<arg>less than zero</arg>
</arguments>
<msg timestamp="20200131 11:53:43.667" level="TRACE">Arguments: [ '-1 == 1' | 'one' | '${x} == 2' | 'two' | '${x} &gt; 2' | 'greater than two' | '${x} &lt; 0' | 'less than zero' ]</msg>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>${x} == 2</arg>
<arg>two</arg>
<arg>${x} &gt; 2</arg>
<arg>greater than two</arg>
<arg>${x} &lt; 0</arg>
<arg>less than zero</arg>
</arguments>
<msg timestamp="20200131 11:53:43.667" level="TRACE">Arguments: [ '-1 == 2' | 'two' | '${x} &gt; 2' | 'greater than two' | '${x} &lt; 0' | 'less than zero' ]</msg>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>${x} &gt; 2</arg>
<arg>greater than two</arg>
<arg>${x} &lt; 0</arg>
<arg>less than zero</arg>
</arguments>
<msg timestamp="20200131 11:53:43.667" level="TRACE">Arguments: [ '-1 &gt; 2' | 'greater than two' | '${x} &lt; 0' | 'less than zero' ]</msg>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>${x} &lt; 0</arg>
<arg>less than zero</arg>
</arguments>
<msg timestamp="20200131 11:53:43.667" level="TRACE">Arguments: [ '-1 &lt; 0' | 'less than zero' ]</msg>
<msg timestamp="20200131 11:53:43.667" level="TRACE">Return: 'less than zero'</msg>
<status status="PASS" starttime="20200131 11:53:43.667" endtime="20200131 11:53:43.667"></status>
</kw>
<msg timestamp="20200131 11:53:43.667" level="TRACE">Return: 'less than zero'</msg>
<status status="PASS" starttime="20200131 11:53:43.667" endtime="20200131 11:53:43.667"></status>
</kw>
<msg timestamp="20200131 11:53:43.667" level="TRACE">Return: 'less than zero'</msg>
<status status="PASS" starttime="20200131 11:53:43.667" endtime="20200131 11:53:43.667"></status>
</kw>
<msg timestamp="20200131 11:53:43.668" level="TRACE">Return: 'less than zero'</msg>
<status status="PASS" starttime="20200131 11:53:43.666" endtime="20200131 11:53:43.668"></status>
</kw>
<msg timestamp="20200131 11:53:43.668" level="TRACE">Return: 'less than zero'</msg>
<msg timestamp="20200131 11:53:43.668" level="INFO">${var} = less than zero</msg>
<status status="PASS" starttime="20200131 11:53:43.666" endtime="20200131 11:53:43.668"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>$var=='less than zero'</arg>
</arguments>
<msg timestamp="20200131 11:53:43.670" level="TRACE">Arguments: [ "$var=='less than zero'" ]</msg>
<msg timestamp="20200131 11:53:43.670" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.669" endtime="20200131 11:53:43.670"></status>
</kw>
<doc>Set Variable If condition, *values
Sets variable based on the given condition.
The basic usage is giving a condition and two values. The given condition is first
evaluated the same way as with the Should Be True keyword. If the condition is true,
then the first value is returned, and otherwise the second value is returned.
The second value can also be omitted, in which case it has a default value None.</doc>
<status status="PASS" starttime="20200131 11:53:43.651" endtime="20200131 11:53:43.672" critical="yes"></status>
</test>
<test id="s1-s1-t82" name="Use &quot;Should Be Empty&quot;">
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{lst}</var>
</assign>
<msg timestamp="20200131 11:53:43.673" level="TRACE">Arguments: [  ]</msg>
<msg timestamp="20200131 11:53:43.673" level="TRACE">Return: []</msg>
<msg timestamp="20200131 11:53:43.673" level="INFO">@{lst} = [ ]</msg>
<status status="PASS" starttime="20200131 11:53:43.673" endtime="20200131 11:53:43.673"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${lst}</arg>
<arg>msg='Length is indeed zero'</arg>
</arguments>
<msg timestamp="20200131 11:53:43.680" level="TRACE">Arguments: [ [] | msg="'Length is indeed zero'" ]</msg>
<msg timestamp="20200131 11:53:43.680" level="INFO">Length is 0</msg>
<msg timestamp="20200131 11:53:43.680" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.679" endtime="20200131 11:53:43.680"></status>
</kw>
<doc>Should Be Empty item, msg=None
Verifies that the given item is empty.
The length of the item is got using the 'Get Length' keyword.
The default error message can be overridden with the msg argument</doc>
<status status="PASS" starttime="20200131 11:53:43.672" endtime="20200131 11:53:43.680" critical="yes"></status>
</test>
<test id="s1-s1-t83" name="Use &quot;Should Be Equal&quot;">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>first</arg>
<arg>second</arg>
</arguments>
<msg timestamp="20200131 11:53:43.681" level="TRACE">Arguments: [ 'Should Be Equal' | 'first' | 'second' ]</msg>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>first</arg>
<arg>second</arg>
</arguments>
<msg timestamp="20200131 11:53:43.681" level="TRACE">Arguments: [ 'first' | 'second' ]</msg>
<msg timestamp="20200131 11:53:43.681" level="DEBUG">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20200131 11:53:43.682" level="FAIL">first != second</msg>
<msg timestamp="20200131 11:53:43.682" level="DEBUG">Traceback (most recent call last):
  None</msg>
<status status="FAIL" starttime="20200131 11:53:43.681" endtime="20200131 11:53:43.682"></status>
</kw>
<msg timestamp="20200131 11:53:43.682" level="TRACE">Return: ('FAIL', 'first != second')</msg>
<status status="PASS" starttime="20200131 11:53:43.681" endtime="20200131 11:53:43.682"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>first</arg>
<arg>second</arg>
<arg>msg='This is the error message'</arg>
</arguments>
<msg timestamp="20200131 11:53:43.682" level="TRACE">Arguments: [ 'Should Be Equal' | 'first' | 'second' | "msg='This is the error message'" ]</msg>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>first</arg>
<arg>second</arg>
<arg>msg='This is the error message'</arg>
</arguments>
<msg timestamp="20200131 11:53:43.682" level="TRACE">Arguments: [ 'first' | 'second' | msg="'This is the error message'" ]</msg>
<msg timestamp="20200131 11:53:43.682" level="DEBUG">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20200131 11:53:43.682" level="FAIL">'This is the error message': first != second</msg>
<msg timestamp="20200131 11:53:43.682" level="DEBUG">Traceback (most recent call last):
  None</msg>
<status status="FAIL" starttime="20200131 11:53:43.682" endtime="20200131 11:53:43.682"></status>
</kw>
<msg timestamp="20200131 11:53:43.682" level="TRACE">Return: ('FAIL', "'This is the error message': first != second")</msg>
<status status="PASS" starttime="20200131 11:53:43.682" endtime="20200131 11:53:43.682"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>first</arg>
<arg>second</arg>
<arg>msg='This is the error message'</arg>
<arg>values=False</arg>
</arguments>
<msg timestamp="20200131 11:53:43.682" level="TRACE">Arguments: [ 'Should Be Equal' | 'first' | 'second' | "msg='This is the error message'" | 'values=False' ]</msg>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>first</arg>
<arg>second</arg>
<arg>msg='This is the error message'</arg>
<arg>values=False</arg>
</arguments>
<msg timestamp="20200131 11:53:43.683" level="TRACE">Arguments: [ 'first' | 'second' | msg="'This is the error message'" | values=False ]</msg>
<msg timestamp="20200131 11:53:43.683" level="DEBUG">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20200131 11:53:43.683" level="FAIL">'This is the error message'</msg>
<msg timestamp="20200131 11:53:43.683" level="DEBUG">Traceback (most recent call last):
  None</msg>
<status status="FAIL" starttime="20200131 11:53:43.683" endtime="20200131 11:53:43.683"></status>
</kw>
<msg timestamp="20200131 11:53:43.683" level="TRACE">Return: ('FAIL', "'This is the error message'")</msg>
<status status="PASS" starttime="20200131 11:53:43.682" endtime="20200131 11:53:43.683"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>iGnoRE Case</arg>
<arg>ignore case</arg>
<arg>ignore_case=True</arg>
</arguments>
<msg timestamp="20200131 11:53:43.683" level="TRACE">Arguments: [ 'iGnoRE Case' | 'ignore case' | ignore_case=True ]</msg>
<msg timestamp="20200131 11:53:43.683" level="DEBUG">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20200131 11:53:43.683" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.683" endtime="20200131 11:53:43.683"></status>
</kw>
<doc>Should Be Equal first, second, msg=None, values=True, ignore_case=False, formatter=str
Fails if the given objects are unequal.
Optional msg, values and formatter arguments specify how to construct the error message
if this keyword fails:</doc>
<status status="PASS" starttime="20200131 11:53:43.680" endtime="20200131 11:53:43.683" critical="yes"></status>
</test>
<test id="s1-s1-t84" name="Use &quot;Should Be Equal As Integers&quot;">
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>42</arg>
<arg>${42}</arg>
</arguments>
<msg timestamp="20200131 11:53:43.684" level="TRACE">Arguments: [ '42' | 42 ]</msg>
<msg timestamp="20200131 11:53:43.684" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;class 'int'&gt;</msg>
<msg timestamp="20200131 11:53:43.684" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.684" endtime="20200131 11:53:43.684"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>0xA</arg>
<arg>0xA</arg>
</arguments>
<msg timestamp="20200131 11:53:43.684" level="TRACE">Arguments: [ '0xA' | '0xA' ]</msg>
<msg timestamp="20200131 11:53:43.685" level="DEBUG">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20200131 11:53:43.685" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.684" endtime="20200131 11:53:43.685"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Be Equal As Integers</arg>
<arg>0b1011</arg>
<arg>0b1000</arg>
<arg>msg='After converting to int'</arg>
</arguments>
<msg timestamp="20200131 11:53:43.685" level="TRACE">Arguments: [ 'Should Be Equal As Integers' | '0b1011' | '0b1000' | "msg='After converting to int'" ]</msg>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>0b1011</arg>
<arg>0b1000</arg>
<arg>msg='After converting to int'</arg>
</arguments>
<msg timestamp="20200131 11:53:43.685" level="TRACE">Arguments: [ '0b1011' | '0b1000' | msg="'After converting to int'" ]</msg>
<msg timestamp="20200131 11:53:43.685" level="DEBUG">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20200131 11:53:43.685" level="FAIL">'After converting to int': 11 != 8</msg>
<msg timestamp="20200131 11:53:43.685" level="DEBUG">Traceback (most recent call last):
  None</msg>
<status status="FAIL" starttime="20200131 11:53:43.685" endtime="20200131 11:53:43.685"></status>
</kw>
<msg timestamp="20200131 11:53:43.685" level="TRACE">Return: ('FAIL', "'After converting to int': 11 != 8")</msg>
<status status="PASS" starttime="20200131 11:53:43.685" endtime="20200131 11:53:43.685"></status>
</kw>
<doc>Should Be Equal As Integers first, second, msg=None, values=True, base=None
Fails if objects are unequal after converting them to integers.</doc>
<status status="PASS" starttime="20200131 11:53:43.684" endtime="20200131 11:53:43.687" critical="yes"></status>
</test>
<test id="s1-s1-t85" name="Use &quot;Should Be Equal As (Real) Numbers&quot;">
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${x}</arg>
<arg>${1.1}</arg>
</arguments>
<msg timestamp="20200131 11:53:43.689" level="TRACE">Arguments: [ '${x}' | '${1.1}' ]</msg>
<msg timestamp="20200131 11:53:43.689" level="INFO">${x} = 1.1</msg>
<msg timestamp="20200131 11:53:43.689" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.688" endtime="20200131 11:53:43.689"></status>
</kw>
<kw name="Should Be Equal As Numbers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<arguments>
<arg>${x}</arg>
<arg>1.1</arg>
</arguments>
<msg timestamp="20200131 11:53:43.692" level="TRACE">Arguments: [ 1.1 | '1.1' ]</msg>
<msg timestamp="20200131 11:53:43.692" level="INFO">Argument types are:
&lt;class 'float'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20200131 11:53:43.692" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.692" endtime="20200131 11:53:43.692"></status>
</kw>
<kw name="Should Be Equal As Numbers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<arguments>
<arg>1.123</arg>
<arg>1.1</arg>
<arg>precision=1</arg>
</arguments>
<msg timestamp="20200131 11:53:43.693" level="TRACE">Arguments: [ '1.123' | '1.1' | precision=1 ]</msg>
<msg timestamp="20200131 11:53:43.693" level="DEBUG">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20200131 11:53:43.693" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.692" endtime="20200131 11:53:43.693"></status>
</kw>
<kw name="Should Be Equal As Numbers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<arguments>
<arg>1.123</arg>
<arg>1.4</arg>
<arg>precision=0</arg>
</arguments>
<msg timestamp="20200131 11:53:43.693" level="TRACE">Arguments: [ '1.123' | '1.4' | precision=0 ]</msg>
<msg timestamp="20200131 11:53:43.693" level="DEBUG">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20200131 11:53:43.693" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.693" endtime="20200131 11:53:43.693"></status>
</kw>
<kw name="Should Be Equal As Numbers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<arguments>
<arg>112.3</arg>
<arg>75</arg>
<arg>precision=-2</arg>
</arguments>
<msg timestamp="20200131 11:53:43.695" level="TRACE">Arguments: [ '112.3' | '75' | precision=-2 ]</msg>
<msg timestamp="20200131 11:53:43.695" level="DEBUG">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20200131 11:53:43.695" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.695" endtime="20200131 11:53:43.695"></status>
</kw>
<doc>Should Be Equal As Numbers first, second, msg=None, values=True, precision=6
Fails if objects are unequal after converting them to real numbers.
The conversion is done with Convert To Number keyword using the given precision.</doc>
<status status="PASS" starttime="20200131 11:53:43.688" endtime="20200131 11:53:43.695" critical="yes"></status>
</test>
<test id="s1-s1-t86" name="Use &quot;Should Be Equal As Strings&quot;">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>Lorem Ipsum</arg>
</arguments>
<assign>
<var>${string_one}</var>
</assign>
<msg timestamp="20200131 11:53:43.697" level="TRACE">Arguments: [ 'Lorem Ipsum' ]</msg>
<msg timestamp="20200131 11:53:43.697" level="TRACE">Return: 'Lorem Ipsum'</msg>
<msg timestamp="20200131 11:53:43.697" level="INFO">${string_one} = Lorem Ipsum</msg>
<status status="PASS" starttime="20200131 11:53:43.696" endtime="20200131 11:53:43.697"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>lorem ipsum</arg>
</arguments>
<assign>
<var>${string_two}</var>
</assign>
<msg timestamp="20200131 11:53:43.698" level="TRACE">Arguments: [ 'lorem ipsum' ]</msg>
<msg timestamp="20200131 11:53:43.698" level="TRACE">Return: 'lorem ipsum'</msg>
<msg timestamp="20200131 11:53:43.698" level="INFO">${string_two} = lorem ipsum</msg>
<status status="PASS" starttime="20200131 11:53:43.698" endtime="20200131 11:53:43.698"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${string_one}</arg>
<arg>${string_two}</arg>
</arguments>
<msg timestamp="20200131 11:53:43.698" level="TRACE">Arguments: [ 'Should Be Equal As Strings' | '${string_one}' | '${string_two}' ]</msg>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${string_one}</arg>
<arg>${string_two}</arg>
</arguments>
<msg timestamp="20200131 11:53:43.698" level="TRACE">Arguments: [ 'Lorem Ipsum' | 'lorem ipsum' ]</msg>
<msg timestamp="20200131 11:53:43.698" level="DEBUG">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20200131 11:53:43.698" level="FAIL">Lorem Ipsum != lorem ipsum</msg>
<msg timestamp="20200131 11:53:43.698" level="DEBUG">Traceback (most recent call last):
  None</msg>
<status status="FAIL" starttime="20200131 11:53:43.698" endtime="20200131 11:53:43.698"></status>
</kw>
<msg timestamp="20200131 11:53:43.698" level="TRACE">Return: ('FAIL', 'Lorem Ipsum != lorem ipsum')</msg>
<status status="PASS" starttime="20200131 11:53:43.698" endtime="20200131 11:53:43.699"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${string_one}</arg>
<arg>${string_two}</arg>
<arg>ignore_case=True</arg>
</arguments>
<msg timestamp="20200131 11:53:43.701" level="TRACE">Arguments: [ 'Lorem Ipsum' | 'lorem ipsum' | ignore_case=True ]</msg>
<msg timestamp="20200131 11:53:43.701" level="DEBUG">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20200131 11:53:43.701" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.701" endtime="20200131 11:53:43.701"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>os.linesep</arg>
<arg>modules=os</arg>
</arguments>
<assign>
<var>${line_seperator}</var>
</assign>
<msg timestamp="20200131 11:53:43.701" level="TRACE">Arguments: [ 'os.linesep' | modules='os' ]</msg>
<msg timestamp="20200131 11:53:43.701" level="TRACE">Return: '\n'</msg>
<msg timestamp="20200131 11:53:43.702" level="INFO">${line_seperator} = 
</msg>
<status status="PASS" starttime="20200131 11:53:43.701" endtime="20200131 11:53:43.702"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=${line_seperator}</arg>
<arg>Not in second</arg>
<arg>Same</arg>
<arg>Differs</arg>
<arg>Same</arg>
</arguments>
<assign>
<var>${multi_line_string_one}</var>
</assign>
<msg timestamp="20200131 11:53:43.702" level="TRACE">Arguments: [ 'SEPARATOR=\n' | 'Not in second' | 'Same' | 'Differs' | 'Same' ]</msg>
<msg timestamp="20200131 11:53:43.702" level="TRACE">Return: 'Not in second\nSame\nDiffers\nSame'</msg>
<msg timestamp="20200131 11:53:43.702" level="INFO">${multi_line_string_one} = Not in second
Same
Differs
Same</msg>
<status status="PASS" starttime="20200131 11:53:43.702" endtime="20200131 11:53:43.702"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=${line_seperator}</arg>
<arg>Same</arg>
<arg>Differs2</arg>
<arg>Same</arg>
<arg>Not in first</arg>
</arguments>
<assign>
<var>${multi_line_string_two}</var>
</assign>
<msg timestamp="20200131 11:53:43.702" level="TRACE">Arguments: [ 'SEPARATOR=\n' | 'Same' | 'Differs2' | 'Same' | 'Not in first' ]</msg>
<msg timestamp="20200131 11:53:43.702" level="TRACE">Return: 'Same\nDiffers2\nSame\nNot in first'</msg>
<msg timestamp="20200131 11:53:43.702" level="INFO">${multi_line_string_two} = Same
Differs2
Same
Not in first</msg>
<status status="PASS" starttime="20200131 11:53:43.702" endtime="20200131 11:53:43.702"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${multi_line_string_one}</arg>
<arg>${multi_line_string_one}</arg>
</arguments>
<msg timestamp="20200131 11:53:43.706" level="TRACE">Arguments: [ 'Not in second\nSame\nDiffers\nSame' | 'Not in second\nSame\nDiffers\nSame' ]</msg>
<msg timestamp="20200131 11:53:43.706" level="DEBUG">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20200131 11:53:43.706" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.706" endtime="20200131 11:53:43.706"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${multi_line_string_one}</arg>
<arg>${multi_line_string_two}</arg>
</arguments>
<msg timestamp="20200131 11:53:43.706" level="TRACE">Arguments: [ 'Should Be Equal As Strings' | '${multi_line_string_one}' | '${multi_line_string_two}' ]</msg>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${multi_line_string_one}</arg>
<arg>${multi_line_string_two}</arg>
</arguments>
<msg timestamp="20200131 11:53:43.706" level="TRACE">Arguments: [ 'Not in second\nSame\nDiffers\nSame' | 'Same\nDiffers2\nSame\nNot in first' ]</msg>
<msg timestamp="20200131 11:53:43.706" level="DEBUG">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20200131 11:53:43.707" level="INFO">Not in second
Same
Differs
Same

!=

Same
Differs2
Same
Not in first</msg>
<msg timestamp="20200131 11:53:43.707" level="FAIL">Multiline strings are different:
--- first
+++ second
@@ -1,4 +1,4 @@
-Not in second
 Same
-Differs
-Same
+Differs2
+Same
+Not in first</msg>
<msg timestamp="20200131 11:53:43.707" level="DEBUG">Traceback (most recent call last):
  None</msg>
<status status="FAIL" starttime="20200131 11:53:43.706" endtime="20200131 11:53:43.707"></status>
</kw>
<msg timestamp="20200131 11:53:43.707" level="TRACE">Return: ('FAIL',
 'Multiline strings are different:\n--- first\n+++ second\n@@ -1,4 +1,4 @@\n-Not in second\n Same\n-Differs\n-Same\n+Differs2\n+Same\n+Not in first')</msg>
<status status="PASS" starttime="20200131 11:53:43.706" endtime="20200131 11:53:43.707"></status>
</kw>
<doc>Should Be Equal As Strings first, second, msg=None, values=True, ignore_case=False, formatter=str
Fails if objects are unequal after converting them to strings.
See Should Be Equal for an explanation on how to override the default error
message with msg, values and formatter.
If ignore_case is given a true value (see Boolean arguments), comparison is done case-insensitively.</doc>
<status status="PASS" starttime="20200131 11:53:43.696" endtime="20200131 11:53:43.707" critical="yes"></status>
</test>
<test id="s1-s1-t87" name="(Test 1/3): Use &quot;Should Be True&quot;">
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>a</arg>
<arg>b</arg>
<arg>c</arg>
</arguments>
<assign>
<var>@{list}</var>
</assign>
<msg timestamp="20200131 11:53:43.707" level="TRACE">Arguments: [ 'a' | 'b' | 'c' ]</msg>
<msg timestamp="20200131 11:53:43.708" level="TRACE">Return: ['a', 'b', 'c']</msg>
<msg timestamp="20200131 11:53:43.708" level="INFO">@{list} = [ a | b | c ]</msg>
<status status="PASS" starttime="20200131 11:53:43.707" endtime="20200131 11:53:43.708"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${list} == ['a', 'b', 'c']</arg>
</arguments>
<msg timestamp="20200131 11:53:43.708" level="TRACE">Arguments: [ "['a', 'b', 'c'] == ['a', 'b', 'c']" ]</msg>
<msg timestamp="20200131 11:53:43.708" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.708" endtime="20200131 11:53:43.708"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${1}</arg>
<arg>${2}</arg>
<arg>${3}</arg>
</arguments>
<assign>
<var>${list}</var>
</assign>
<msg timestamp="20200131 11:53:43.708" level="TRACE">Arguments: [ 1 | 2 | 3 ]</msg>
<msg timestamp="20200131 11:53:43.708" level="TRACE">Return: [1, 2, 3]</msg>
<msg timestamp="20200131 11:53:43.708" level="INFO">${list} = [1, 2, 3]</msg>
<status status="PASS" starttime="20200131 11:53:43.708" endtime="20200131 11:53:43.708"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>$list == [1, 2, 3]</arg>
</arguments>
<msg timestamp="20200131 11:53:43.708" level="TRACE">Arguments: [ '$list == [1, 2, 3]' ]</msg>
<msg timestamp="20200131 11:53:43.709" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.708" endtime="20200131 11:53:43.709"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>os.linesep == '\\n'</arg>
</arguments>
<msg timestamp="20200131 11:53:43.713" level="TRACE">Arguments: [ "os.linesep == '\\n'" ]</msg>
<msg timestamp="20200131 11:53:43.713" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.713" endtime="20200131 11:53:43.713"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>sys.platform == 'linux'</arg>
</arguments>
<msg timestamp="20200131 11:53:43.713" level="TRACE">Arguments: [ "sys.platform == 'linux'" ]</msg>
<msg timestamp="20200131 11:53:43.714" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.713" endtime="20200131 11:53:43.714"></status>
</kw>
<status status="PASS" starttime="20200131 11:53:43.707" endtime="20200131 11:53:43.714" critical="yes"></status>
</test>
<test id="s1-s1-t88" name="(Test 2/3): Use &quot;Should Be True&quot;">
<kw name="Convert To Hex" library="BuiltIn">
<doc>Converts the given item to a hexadecimal string.</doc>
<arguments>
<arg>255</arg>
<arg>base=10</arg>
<arg>prefix=0x</arg>
</arguments>
<assign>
<var>${hex_value}</var>
</assign>
<msg timestamp="20200131 11:53:43.715" level="TRACE">Arguments: [ '255' | base='10' | prefix='0x' ]</msg>
<msg timestamp="20200131 11:53:43.715" level="DEBUG">Argument types are:
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20200131 11:53:43.715" level="TRACE">Return: '0xFF'</msg>
<msg timestamp="20200131 11:53:43.715" level="INFO">${hex_value} = 0xFF</msg>
<status status="PASS" starttime="20200131 11:53:43.714" endtime="20200131 11:53:43.715"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${hex_value}==${0xFF}</arg>
</arguments>
<msg timestamp="20200131 11:53:43.715" level="TRACE">Arguments: [ '0xFF==255' ]</msg>
<msg timestamp="20200131 11:53:43.715" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.715" endtime="20200131 11:53:43.715"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>0xFF==${0xFF}</arg>
</arguments>
<msg timestamp="20200131 11:53:43.715" level="TRACE">Arguments: [ '0xFF==255' ]</msg>
<msg timestamp="20200131 11:53:43.715" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.715" endtime="20200131 11:53:43.715"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>0xFF==255</arg>
</arguments>
<msg timestamp="20200131 11:53:43.718" level="TRACE">Arguments: [ '0xFF==255' ]</msg>
<msg timestamp="20200131 11:53:43.718" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.718" endtime="20200131 11:53:43.718"></status>
</kw>
<doc>This is an example to the following question
https://stackoverflow.com/questions/59788997/what-are-the-steps-behind-should-be-true-hex-value-0xff-expression-in-r</doc>
<status status="PASS" starttime="20200131 11:53:43.714" endtime="20200131 11:53:43.718" critical="yes"></status>
</test>
<test id="s1-s1-t89" name="(Test 3/3): Use &quot;Should Be True&quot;">
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>a</arg>
<arg>b</arg>
<arg>c</arg>
</arguments>
<assign>
<var>@{list}</var>
</assign>
<msg timestamp="20200131 11:53:43.718" level="TRACE">Arguments: [ 'a' | 'b' | 'c' ]</msg>
<msg timestamp="20200131 11:53:43.719" level="TRACE">Return: ['a', 'b', 'c']</msg>
<msg timestamp="20200131 11:53:43.719" level="INFO">@{list} = [ a | b | c ]</msg>
<status status="PASS" starttime="20200131 11:53:43.718" endtime="20200131 11:53:43.719"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${list} == ['a', 'b', 'c']</arg>
</arguments>
<msg timestamp="20200131 11:53:43.719" level="TRACE">Arguments: [ "['a', 'b', 'c'] == ['a', 'b', 'c']" ]</msg>
<msg timestamp="20200131 11:53:43.719" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.719" endtime="20200131 11:53:43.719"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>$list == ['a', 'b', 'c']</arg>
</arguments>
<msg timestamp="20200131 11:53:43.719" level="TRACE">Arguments: [ "$list == ['a', 'b', 'c']" ]</msg>
<msg timestamp="20200131 11:53:43.720" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.719" endtime="20200131 11:53:43.720"></status>
</kw>
<doc>Example to the question:
https://stackoverflow.com/questions/59791437/what-is-the-difference-between-should-be-true-list-a-b-c-ands</doc>
<status status="PASS" starttime="20200131 11:53:43.718" endtime="20200131 11:53:43.725" critical="yes"></status>
</test>
<test id="s1-s1-t90" name="Use &quot;Should Contain&quot;">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>Lorem Ipsum</arg>
</arguments>
<assign>
<var>${s}</var>
</assign>
<msg timestamp="20200131 11:53:43.726" level="TRACE">Arguments: [ 'Lorem Ipsum' ]</msg>
<msg timestamp="20200131 11:53:43.727" level="TRACE">Return: 'Lorem Ipsum'</msg>
<msg timestamp="20200131 11:53:43.727" level="INFO">${s} = Lorem Ipsum</msg>
<status status="PASS" starttime="20200131 11:53:43.726" endtime="20200131 11:53:43.727"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>lorem</arg>
</arguments>
<assign>
<var>${search}</var>
</assign>
<msg timestamp="20200131 11:53:43.727" level="TRACE">Arguments: [ 'lorem' ]</msg>
<msg timestamp="20200131 11:53:43.727" level="TRACE">Return: 'lorem'</msg>
<msg timestamp="20200131 11:53:43.727" level="INFO">${search} = lorem</msg>
<status status="PASS" starttime="20200131 11:53:43.727" endtime="20200131 11:53:43.727"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>container=${s}</arg>
<arg>item=${search}</arg>
</arguments>
<msg timestamp="20200131 11:53:43.727" level="TRACE">Arguments: [ 'Should Contain' | 'container=${s}' | 'item=${search}' ]</msg>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>container=${s}</arg>
<arg>item=${search}</arg>
</arguments>
<msg timestamp="20200131 11:53:43.727" level="TRACE">Arguments: [ container='Lorem Ipsum' | item='lorem' ]</msg>
<msg timestamp="20200131 11:53:43.727" level="FAIL">'Lorem Ipsum' does not contain 'lorem'</msg>
<msg timestamp="20200131 11:53:43.727" level="DEBUG">Traceback (most recent call last):
  None</msg>
<status status="FAIL" starttime="20200131 11:53:43.727" endtime="20200131 11:53:43.728"></status>
</kw>
<msg timestamp="20200131 11:53:43.728" level="TRACE">Return: ('FAIL', "'Lorem Ipsum' does not contain 'lorem'")</msg>
<status status="PASS" starttime="20200131 11:53:43.727" endtime="20200131 11:53:43.728"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>container=${s}</arg>
<arg>item=${search}</arg>
<arg>ignore_case=True</arg>
</arguments>
<msg timestamp="20200131 11:53:43.728" level="TRACE">Arguments: [ container='Lorem Ipsum' | item='lorem' | ignore_case=True ]</msg>
<msg timestamp="20200131 11:53:43.728" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.728" endtime="20200131 11:53:43.728"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${1}</arg>
<arg>${2}</arg>
<arg>${3}</arg>
</arguments>
<assign>
<var>${l}</var>
</assign>
<msg timestamp="20200131 11:53:43.728" level="TRACE">Arguments: [ 1 | 2 | 3 ]</msg>
<msg timestamp="20200131 11:53:43.728" level="TRACE">Return: [1, 2, 3]</msg>
<msg timestamp="20200131 11:53:43.728" level="INFO">${l} = [1, 2, 3]</msg>
<status status="PASS" starttime="20200131 11:53:43.728" endtime="20200131 11:53:43.728"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${2}</arg>
</arguments>
<assign>
<var>${search}</var>
</assign>
<msg timestamp="20200131 11:53:43.729" level="TRACE">Arguments: [ 2 ]</msg>
<msg timestamp="20200131 11:53:43.729" level="TRACE">Return: 2</msg>
<msg timestamp="20200131 11:53:43.729" level="INFO">${search} = 2</msg>
<status status="PASS" starttime="20200131 11:53:43.729" endtime="20200131 11:53:43.729"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>container=${l}</arg>
<arg>item=${search}</arg>
</arguments>
<msg timestamp="20200131 11:53:43.729" level="TRACE">Arguments: [ container=[1, 2, 3] | item=2 ]</msg>
<msg timestamp="20200131 11:53:43.729" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.729" endtime="20200131 11:53:43.729"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>container=${l}</arg>
<arg>item=${100}</arg>
</arguments>
<msg timestamp="20200131 11:53:43.729" level="TRACE">Arguments: [ 'Should Contain' | 'container=${l}' | 'item=${100}' ]</msg>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>container=${l}</arg>
<arg>item=${100}</arg>
</arguments>
<msg timestamp="20200131 11:53:43.729" level="TRACE">Arguments: [ container=[1, 2, 3] | item=100 ]</msg>
<msg timestamp="20200131 11:53:43.730" level="FAIL">'[1, 2, 3]' does not contain '100'</msg>
<msg timestamp="20200131 11:53:43.730" level="DEBUG">Traceback (most recent call last):
  None</msg>
<status status="FAIL" starttime="20200131 11:53:43.729" endtime="20200131 11:53:43.730"></status>
</kw>
<msg timestamp="20200131 11:53:43.730" level="TRACE">Return: ('FAIL', "'[1, 2, 3]' does not contain '100'")</msg>
<status status="PASS" starttime="20200131 11:53:43.729" endtime="20200131 11:53:43.730"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>key1=value1</arg>
<arg>key2=value2</arg>
</arguments>
<assign>
<var>${d}</var>
</assign>
<msg timestamp="20200131 11:53:43.730" level="TRACE">Arguments: [ 'key1=value1' | 'key2=value2' ]</msg>
<msg timestamp="20200131 11:53:43.730" level="TRACE">Return: {'key1': 'value1', 'key2': 'value2'}</msg>
<msg timestamp="20200131 11:53:43.730" level="INFO">${d} = {'key1': 'value1', 'key2': 'value2'}</msg>
<status status="PASS" starttime="20200131 11:53:43.730" endtime="20200131 11:53:43.730"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>key1</arg>
</arguments>
<assign>
<var>${search}</var>
</assign>
<msg timestamp="20200131 11:53:43.730" level="TRACE">Arguments: [ 'key1' ]</msg>
<msg timestamp="20200131 11:53:43.730" level="TRACE">Return: 'key1'</msg>
<msg timestamp="20200131 11:53:43.730" level="INFO">${search} = key1</msg>
<status status="PASS" starttime="20200131 11:53:43.730" endtime="20200131 11:53:43.730"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>container=${d}</arg>
<arg>item=${search}</arg>
</arguments>
<msg timestamp="20200131 11:53:43.732" level="TRACE">Arguments: [ container={'key1': 'value1', 'key2': 'value2'} | item='key1' ]</msg>
<msg timestamp="20200131 11:53:43.732" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.732" endtime="20200131 11:53:43.732"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>container=${d}</arg>
<arg>item=key3</arg>
</arguments>
<msg timestamp="20200131 11:53:43.732" level="TRACE">Arguments: [ 'Should Contain' | 'container=${d}' | 'item=key3' ]</msg>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>container=${d}</arg>
<arg>item=key3</arg>
</arguments>
<msg timestamp="20200131 11:53:43.733" level="TRACE">Arguments: [ container={'key1': 'value1', 'key2': 'value2'} | item='key3' ]</msg>
<msg timestamp="20200131 11:53:43.733" level="FAIL">'{'key1': 'value1', 'key2': 'value2'}' does not contain 'key3'</msg>
<msg timestamp="20200131 11:53:43.733" level="DEBUG">Traceback (most recent call last):
  None</msg>
<status status="FAIL" starttime="20200131 11:53:43.733" endtime="20200131 11:53:43.733"></status>
</kw>
<msg timestamp="20200131 11:53:43.733" level="TRACE">Return: ('FAIL', "'{'key1': 'value1', 'key2': 'value2'}' does not contain 'key3'")</msg>
<status status="PASS" starttime="20200131 11:53:43.732" endtime="20200131 11:53:43.733"></status>
</kw>
<doc>Should Contain container, item, msg=None, values=True, ignore_case=False
Fails if container does not contain item one or more times
Works with strings, lists, dictionaries and anything that supports Python's in operator.</doc>
<status status="PASS" starttime="20200131 11:53:43.726" endtime="20200131 11:53:43.733" critical="yes"></status>
</test>
<test id="s1-s1-t91" name="Use &quot;Should Contain Any&quot;">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>Lorem Ipsum</arg>
</arguments>
<assign>
<var>${s}</var>
</assign>
<msg timestamp="20200131 11:53:43.736" level="TRACE">Arguments: [ 'Lorem Ipsum' ]</msg>
<msg timestamp="20200131 11:53:43.736" level="TRACE">Return: 'Lorem Ipsum'</msg>
<msg timestamp="20200131 11:53:43.736" level="INFO">${s} = Lorem Ipsum</msg>
<status status="PASS" starttime="20200131 11:53:43.736" endtime="20200131 11:53:43.736"></status>
</kw>
<kw name="Should Contain Any" library="BuiltIn">
<doc>Fails if ``container`` does not contain any of the ``*items``.</doc>
<arguments>
<arg>${s}</arg>
<arg>REM</arg>
<arg>xx</arg>
<arg>msg='Overwriding msg'</arg>
<arg>values=True</arg>
<arg>ignore_case=True</arg>
</arguments>
<msg timestamp="20200131 11:53:43.736" level="TRACE">Arguments: [ 'Lorem Ipsum' | 'REM' | 'xx' | msg="'Overwriding msg'" | values='True' | ignore_case='True' ]</msg>
<msg timestamp="20200131 11:53:43.736" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.736" endtime="20200131 11:53:43.736"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain Any</arg>
<arg>${s}</arg>
<arg>REM</arg>
<arg>xx</arg>
<arg>msg='Overwriding msg'</arg>
<arg>values=True</arg>
<arg>ignore_case=False</arg>
</arguments>
<msg timestamp="20200131 11:53:43.736" level="TRACE">Arguments: [ 'Should Contain Any' | '${s}' | 'REM' | 'xx' | "msg='Overwriding msg'" | 'values=True' | 'ignore_case=False' ]</msg>
<kw name="Should Contain Any" library="BuiltIn">
<doc>Fails if ``container`` does not contain any of the ``*items``.</doc>
<arguments>
<arg>${s}</arg>
<arg>REM</arg>
<arg>xx</arg>
<arg>msg='Overwriding msg'</arg>
<arg>values=True</arg>
<arg>ignore_case=False</arg>
</arguments>
<msg timestamp="20200131 11:53:43.737" level="TRACE">Arguments: [ 'Lorem Ipsum' | 'REM' | 'xx' | msg="'Overwriding msg'" | values='True' | ignore_case='False' ]</msg>
<msg timestamp="20200131 11:53:43.737" level="FAIL">'Overwriding msg': 'Lorem Ipsum' does not contain any of 'REM' or 'xx'</msg>
<msg timestamp="20200131 11:53:43.737" level="DEBUG">Traceback (most recent call last):
  None</msg>
<status status="FAIL" starttime="20200131 11:53:43.737" endtime="20200131 11:53:43.737"></status>
</kw>
<msg timestamp="20200131 11:53:43.737" level="TRACE">Return: ('FAIL',
 "'Overwriding msg': 'Lorem Ipsum' does not contain any of 'REM' or 'xx'")</msg>
<status status="PASS" starttime="20200131 11:53:43.736" endtime="20200131 11:53:43.737"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${1}</arg>
<arg>${2}</arg>
<arg>${3}</arg>
</arguments>
<assign>
<var>${l}</var>
</assign>
<msg timestamp="20200131 11:53:43.739" level="TRACE">Arguments: [ 1 | 2 | 3 ]</msg>
<msg timestamp="20200131 11:53:43.739" level="TRACE">Return: [1, 2, 3]</msg>
<msg timestamp="20200131 11:53:43.739" level="INFO">${l} = [1, 2, 3]</msg>
<status status="PASS" starttime="20200131 11:53:43.738" endtime="20200131 11:53:43.739"></status>
</kw>
<kw name="Should Contain Any" library="BuiltIn">
<doc>Fails if ``container`` does not contain any of the ``*items``.</doc>
<arguments>
<arg>${l}</arg>
<arg>${2}</arg>
</arguments>
<msg timestamp="20200131 11:53:43.739" level="TRACE">Arguments: [ [1, 2, 3] | 2 ]</msg>
<msg timestamp="20200131 11:53:43.739" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.739" endtime="20200131 11:53:43.739"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain Any</arg>
<arg>${l}</arg>
<arg>${100}</arg>
<arg>${200}</arg>
<arg>${300}</arg>
</arguments>
<msg timestamp="20200131 11:53:43.741" level="TRACE">Arguments: [ 'Should Contain Any' | '${l}' | '${100}' | '${200}' | '${300}' ]</msg>
<kw name="Should Contain Any" library="BuiltIn">
<doc>Fails if ``container`` does not contain any of the ``*items``.</doc>
<arguments>
<arg>${l}</arg>
<arg>${100}</arg>
<arg>${200}</arg>
<arg>${300}</arg>
</arguments>
<msg timestamp="20200131 11:53:43.741" level="TRACE">Arguments: [ [1, 2, 3] | 100 | 200 | 300 ]</msg>
<msg timestamp="20200131 11:53:43.741" level="FAIL">'[1, 2, 3]' does not contain any of '100', '200' or '300'</msg>
<msg timestamp="20200131 11:53:43.741" level="DEBUG">Traceback (most recent call last):
  None</msg>
<status status="FAIL" starttime="20200131 11:53:43.741" endtime="20200131 11:53:43.741"></status>
</kw>
<msg timestamp="20200131 11:53:43.742" level="TRACE">Return: ('FAIL', "'[1, 2, 3]' does not contain any of '100', '200' or '300'")</msg>
<status status="PASS" starttime="20200131 11:53:43.741" endtime="20200131 11:53:43.742"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>key1=value1</arg>
<arg>key2=value2</arg>
</arguments>
<assign>
<var>${d}</var>
</assign>
<msg timestamp="20200131 11:53:43.742" level="TRACE">Arguments: [ 'key1=value1' | 'key2=value2' ]</msg>
<msg timestamp="20200131 11:53:43.742" level="TRACE">Return: {'key1': 'value1', 'key2': 'value2'}</msg>
<msg timestamp="20200131 11:53:43.742" level="INFO">${d} = {'key1': 'value1', 'key2': 'value2'}</msg>
<status status="PASS" starttime="20200131 11:53:43.742" endtime="20200131 11:53:43.742"></status>
</kw>
<kw name="Should Contain Any" library="BuiltIn">
<doc>Fails if ``container`` does not contain any of the ``*items``.</doc>
<arguments>
<arg>${d}</arg>
<arg>key1</arg>
<arg>key5</arg>
</arguments>
<msg timestamp="20200131 11:53:43.742" level="TRACE">Arguments: [ {'key1': 'value1', 'key2': 'value2'} | 'key1' | 'key5' ]</msg>
<msg timestamp="20200131 11:53:43.742" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.742" endtime="20200131 11:53:43.742"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain Any</arg>
<arg>${d}</arg>
<arg>key5</arg>
<arg>key7</arg>
</arguments>
<msg timestamp="20200131 11:53:43.745" level="TRACE">Arguments: [ 'Should Contain Any' | '${d}' | 'key5' | 'key7' ]</msg>
<kw name="Should Contain Any" library="BuiltIn">
<doc>Fails if ``container`` does not contain any of the ``*items``.</doc>
<arguments>
<arg>${d}</arg>
<arg>key5</arg>
<arg>key7</arg>
</arguments>
<msg timestamp="20200131 11:53:43.746" level="TRACE">Arguments: [ {'key1': 'value1', 'key2': 'value2'} | 'key5' | 'key7' ]</msg>
<msg timestamp="20200131 11:53:43.746" level="FAIL">'{'key1': 'value1', 'key2': 'value2'}' does not contain any of 'key5' or 'key7'</msg>
<msg timestamp="20200131 11:53:43.746" level="DEBUG">Traceback (most recent call last):
  None</msg>
<status status="FAIL" starttime="20200131 11:53:43.746" endtime="20200131 11:53:43.746"></status>
</kw>
<msg timestamp="20200131 11:53:43.746" level="TRACE">Return: ('FAIL',
 "'{'key1': 'value1', 'key2': 'value2'}' does not contain any of 'key5' or 'key7'")</msg>
<status status="PASS" starttime="20200131 11:53:43.745" endtime="20200131 11:53:43.746"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>item\=1</arg>
<arg>item\=2</arg>
<arg>item\=3</arg>
</arguments>
<assign>
<var>${l}</var>
</assign>
<msg timestamp="20200131 11:53:43.746" level="TRACE">Arguments: [ 'item=1' | 'item=2' | 'item=3' ]</msg>
<msg timestamp="20200131 11:53:43.746" level="TRACE">Return: ['item=1', 'item=2', 'item=3']</msg>
<msg timestamp="20200131 11:53:43.746" level="INFO">${l} = ['item=1', 'item=2', 'item=3']</msg>
<status status="PASS" starttime="20200131 11:53:43.746" endtime="20200131 11:53:43.746"></status>
</kw>
<kw name="Should Contain Any" library="BuiltIn">
<doc>Fails if ``container`` does not contain any of the ``*items``.</doc>
<arguments>
<arg>${l}</arg>
<arg>foo\=bar</arg>
<arg>item\=3</arg>
</arguments>
<msg timestamp="20200131 11:53:43.747" level="TRACE">Arguments: [ ['item=1', 'item=2', 'item=3'] | 'foo=bar' | 'item=3' ]</msg>
<msg timestamp="20200131 11:53:43.747" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.747" endtime="20200131 11:53:43.747"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain Any</arg>
<arg>${l}</arg>
<arg>foo\=bar</arg>
<arg>item\=4</arg>
<arg>msg='Overwriting msg'</arg>
<arg>values=True</arg>
<arg>ignore_case=False</arg>
</arguments>
<msg timestamp="20200131 11:53:43.747" level="TRACE">Arguments: [ 'Should Contain Any' | '${l}' | 'foo\\=bar' | 'item\\=4' | "msg='Overwriting msg'" | 'values=True' | 'ignore_case=False' ]</msg>
<kw name="Should Contain Any" library="BuiltIn">
<doc>Fails if ``container`` does not contain any of the ``*items``.</doc>
<arguments>
<arg>${l}</arg>
<arg>foo\=bar</arg>
<arg>item\=4</arg>
<arg>msg='Overwriting msg'</arg>
<arg>values=True</arg>
<arg>ignore_case=False</arg>
</arguments>
<msg timestamp="20200131 11:53:43.747" level="TRACE">Arguments: [ ['item=1', 'item=2', 'item=3'] | 'foo=bar' | 'item=4' | msg="'Overwriting msg'" | values='True' | ignore_case='False' ]</msg>
<msg timestamp="20200131 11:53:43.747" level="FAIL">'Overwriting msg': '['item=1', 'item=2', 'item=3']' does not contain any of 'foo=bar' or 'item=4'</msg>
<msg timestamp="20200131 11:53:43.747" level="DEBUG">Traceback (most recent call last):
  None</msg>
<status status="FAIL" starttime="20200131 11:53:43.747" endtime="20200131 11:53:43.747"></status>
</kw>
<msg timestamp="20200131 11:53:43.747" level="TRACE">Return: ('FAIL',
 "'Overwriting msg': '['item=1', 'item=2', 'item=3']' does not contain any of 'foo=bar' or 'item=4'")</msg>
<status status="PASS" starttime="20200131 11:53:43.747" endtime="20200131 11:53:43.747"></status>
</kw>
<doc>Should Contain Any container, *items, **configuration
Works with strings, lists, dictionaries and anything that supports Python's in operator.
Supports additional configuration parameters msg, values and ignore_case, which have exactly
the same semantics as arguments with same names have with Should Contain. These arguments must
always be given using name=value syntax after all items.
New in Robot Framework 3.0.1.</doc>
<status status="PASS" starttime="20200131 11:53:43.733" endtime="20200131 11:53:43.747" critical="yes"></status>
</test>
<test id="s1-s1-t92" name="Use &quot;Should Contain X Times&quot;">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>Lorem Ipsum Lorem Ipsum Lorem Ipsum</arg>
</arguments>
<assign>
<var>${s}</var>
</assign>
<msg timestamp="20200131 11:53:43.748" level="TRACE">Arguments: [ 'Lorem Ipsum Lorem Ipsum Lorem Ipsum' ]</msg>
<msg timestamp="20200131 11:53:43.748" level="TRACE">Return: 'Lorem Ipsum Lorem Ipsum Lorem Ipsum'</msg>
<msg timestamp="20200131 11:53:43.748" level="INFO">${s} = Lorem Ipsum Lorem Ipsum Lorem Ipsum</msg>
<status status="PASS" starttime="20200131 11:53:43.748" endtime="20200131 11:53:43.749"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain X Times</arg>
<arg>${s}</arg>
<arg>lorem ipsum</arg>
<arg>count=${3}</arg>
</arguments>
<msg timestamp="20200131 11:53:43.752" level="TRACE">Arguments: [ 'Should Contain X Times' | '${s}' | 'lorem ipsum' | 'count=${3}' ]</msg>
<kw name="Should Contain X Times" library="BuiltIn">
<doc>Fails if ``item1`` does not contain ``item2`` ``count`` times.</doc>
<arguments>
<arg>${s}</arg>
<arg>lorem ipsum</arg>
<arg>count=${3}</arg>
</arguments>
<msg timestamp="20200131 11:53:43.752" level="TRACE">Arguments: [ 'Lorem Ipsum Lorem Ipsum Lorem Ipsum' | 'lorem ipsum' | count=3 ]</msg>
<msg timestamp="20200131 11:53:43.752" level="INFO">Item found from the first item 0 times</msg>
<msg timestamp="20200131 11:53:43.752" level="DEBUG">Argument types are:
&lt;class 'int'&gt;
&lt;class 'int'&gt;</msg>
<msg timestamp="20200131 11:53:43.752" level="FAIL">'Lorem Ipsum Lorem Ipsum Lorem Ipsum' contains 'lorem ipsum' 0 times, not 3 times.</msg>
<msg timestamp="20200131 11:53:43.752" level="DEBUG">Traceback (most recent call last):
  None</msg>
<status status="FAIL" starttime="20200131 11:53:43.752" endtime="20200131 11:53:43.752"></status>
</kw>
<msg timestamp="20200131 11:53:43.752" level="TRACE">Return: ('FAIL',
 "'Lorem Ipsum Lorem Ipsum Lorem Ipsum' contains 'lorem ipsum' 0 times, not 3 times.")</msg>
<status status="PASS" starttime="20200131 11:53:43.751" endtime="20200131 11:53:43.752"></status>
</kw>
<kw name="Should Contain X Times" library="BuiltIn">
<doc>Fails if ``item1`` does not contain ``item2`` ``count`` times.</doc>
<arguments>
<arg>${s}</arg>
<arg>lorem ipsum</arg>
<arg>count=3</arg>
<arg>msg='The new error msg'</arg>
<arg>ignore_case=True</arg>
</arguments>
<msg timestamp="20200131 11:53:43.753" level="TRACE">Arguments: [ 'Lorem Ipsum Lorem Ipsum Lorem Ipsum' | 'lorem ipsum' | count='3' | msg="'The new error msg'" | ignore_case=True ]</msg>
<msg timestamp="20200131 11:53:43.753" level="INFO">Item found from the first item 3 times</msg>
<msg timestamp="20200131 11:53:43.753" level="DEBUG">Argument types are:
&lt;class 'int'&gt;
&lt;class 'int'&gt;</msg>
<msg timestamp="20200131 11:53:43.753" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.752" endtime="20200131 11:53:43.753"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain X Times</arg>
<arg>${s}</arg>
<arg>lorem ipsum</arg>
<arg>count=2</arg>
<arg>msg='The new error msg'</arg>
<arg>ignore_case=True</arg>
</arguments>
<msg timestamp="20200131 11:53:43.753" level="TRACE">Arguments: [ 'Should Contain X Times' | '${s}' | 'lorem ipsum' | 'count=2' | "msg='The new error msg'" | 'ignore_case=True' ]</msg>
<kw name="Should Contain X Times" library="BuiltIn">
<doc>Fails if ``item1`` does not contain ``item2`` ``count`` times.</doc>
<arguments>
<arg>${s}</arg>
<arg>lorem ipsum</arg>
<arg>count=2</arg>
<arg>msg='The new error msg'</arg>
<arg>ignore_case=True</arg>
</arguments>
<msg timestamp="20200131 11:53:43.753" level="TRACE">Arguments: [ 'Lorem Ipsum Lorem Ipsum Lorem Ipsum' | 'lorem ipsum' | count='2' | msg="'The new error msg'" | ignore_case=True ]</msg>
<msg timestamp="20200131 11:53:43.753" level="INFO">Item found from the first item 3 times</msg>
<msg timestamp="20200131 11:53:43.753" level="DEBUG">Argument types are:
&lt;class 'int'&gt;
&lt;class 'int'&gt;</msg>
<msg timestamp="20200131 11:53:43.754" level="FAIL">'The new error msg'</msg>
<msg timestamp="20200131 11:53:43.754" level="DEBUG">Traceback (most recent call last):
  None</msg>
<status status="FAIL" starttime="20200131 11:53:43.753" endtime="20200131 11:53:43.754"></status>
</kw>
<msg timestamp="20200131 11:53:43.754" level="TRACE">Return: ('FAIL', "'The new error msg'")</msg>
<status status="PASS" starttime="20200131 11:53:43.753" endtime="20200131 11:53:43.754"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${2}</arg>
<arg>${2}</arg>
<arg>${2}</arg>
</arguments>
<assign>
<var>${lst}</var>
</assign>
<msg timestamp="20200131 11:53:43.756" level="TRACE">Arguments: [ 2 | 2 | 2 ]</msg>
<msg timestamp="20200131 11:53:43.756" level="TRACE">Return: [2, 2, 2]</msg>
<msg timestamp="20200131 11:53:43.756" level="INFO">${lst} = [2, 2, 2]</msg>
<status status="PASS" starttime="20200131 11:53:43.756" endtime="20200131 11:53:43.756"></status>
</kw>
<kw name="Should Contain X Times" library="BuiltIn">
<doc>Fails if ``item1`` does not contain ``item2`` ``count`` times.</doc>
<arguments>
<arg>${lst}</arg>
<arg>${2}</arg>
<arg>count=${3}</arg>
</arguments>
<msg timestamp="20200131 11:53:43.756" level="TRACE">Arguments: [ [2, 2, 2] | 2 | count=3 ]</msg>
<msg timestamp="20200131 11:53:43.756" level="INFO">Item found from the first item 3 times</msg>
<msg timestamp="20200131 11:53:43.756" level="DEBUG">Argument types are:
&lt;class 'int'&gt;
&lt;class 'int'&gt;</msg>
<msg timestamp="20200131 11:53:43.756" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.756" endtime="20200131 11:53:43.756"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain X Times</arg>
<arg>${lst}</arg>
<arg>${5}</arg>
<arg>count=${2}</arg>
<arg>msg='The overwriting error msg'</arg>
</arguments>
<msg timestamp="20200131 11:53:43.757" level="TRACE">Arguments: [ 'Should Contain X Times' | '${lst}' | '${5}' | 'count=${2}' | "msg='The overwriting error msg'" ]</msg>
<kw name="Should Contain X Times" library="BuiltIn">
<doc>Fails if ``item1`` does not contain ``item2`` ``count`` times.</doc>
<arguments>
<arg>${lst}</arg>
<arg>${5}</arg>
<arg>count=${2}</arg>
<arg>msg='The overwriting error msg'</arg>
</arguments>
<msg timestamp="20200131 11:53:43.757" level="TRACE">Arguments: [ [2, 2, 2] | 5 | count=2 | msg="'The overwriting error msg'" ]</msg>
<msg timestamp="20200131 11:53:43.757" level="INFO">Item found from the first item 0 times</msg>
<msg timestamp="20200131 11:53:43.758" level="DEBUG">Argument types are:
&lt;class 'int'&gt;
&lt;class 'int'&gt;</msg>
<msg timestamp="20200131 11:53:43.758" level="FAIL">'The overwriting error msg'</msg>
<msg timestamp="20200131 11:53:43.758" level="DEBUG">Traceback (most recent call last):
  None</msg>
<status status="FAIL" starttime="20200131 11:53:43.757" endtime="20200131 11:53:43.758"></status>
</kw>
<msg timestamp="20200131 11:53:43.758" level="TRACE">Return: ('FAIL', "'The overwriting error msg'")</msg>
<status status="PASS" starttime="20200131 11:53:43.757" endtime="20200131 11:53:43.758"></status>
</kw>
<kw name="Get Tuple" library="Utils">
<assign>
<var>${t}</var>
</assign>
<msg timestamp="20200131 11:53:43.761" level="TRACE">Arguments: [  ]</msg>
<msg timestamp="20200131 11:53:43.761" level="TRACE">Return: ('a', 'b', 'a', 'c', 1, 0, 3, 1, 2, 1)</msg>
<msg timestamp="20200131 11:53:43.761" level="INFO">${t} = ('a', 'b', 'a', 'c', 1, 0, 3, 1, 2, 1)</msg>
<status status="PASS" starttime="20200131 11:53:43.761" endtime="20200131 11:53:43.761"></status>
</kw>
<kw name="Should Contain X Times" library="BuiltIn">
<doc>Fails if ``item1`` does not contain ``item2`` ``count`` times.</doc>
<arguments>
<arg>${t}</arg>
<arg>a</arg>
<arg>count=${2}</arg>
</arguments>
<msg timestamp="20200131 11:53:43.762" level="TRACE">Arguments: [ ('a', 'b', 'a', 'c', 1, 0, 3, 1, 2, 1) | 'a' | count=2 ]</msg>
<msg timestamp="20200131 11:53:43.762" level="INFO">Item found from the first item 2 times</msg>
<msg timestamp="20200131 11:53:43.762" level="DEBUG">Argument types are:
&lt;class 'int'&gt;
&lt;class 'int'&gt;</msg>
<msg timestamp="20200131 11:53:43.762" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.761" endtime="20200131 11:53:43.762"></status>
</kw>
<kw name="Should Contain X Times" library="BuiltIn">
<doc>Fails if ``item1`` does not contain ``item2`` ``count`` times.</doc>
<arguments>
<arg>${t}</arg>
<arg>${1}</arg>
<arg>count=${3}</arg>
</arguments>
<msg timestamp="20200131 11:53:43.762" level="TRACE">Arguments: [ ('a', 'b', 'a', 'c', 1, 0, 3, 1, 2, 1) | 1 | count=3 ]</msg>
<msg timestamp="20200131 11:53:43.762" level="INFO">Item found from the first item 3 times</msg>
<msg timestamp="20200131 11:53:43.762" level="DEBUG">Argument types are:
&lt;class 'int'&gt;
&lt;class 'int'&gt;</msg>
<msg timestamp="20200131 11:53:43.762" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.762" endtime="20200131 11:53:43.762"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>key1=value1</arg>
<arg>key2=value2</arg>
</arguments>
<assign>
<var>${d}</var>
</assign>
<msg timestamp="20200131 11:53:43.762" level="TRACE">Arguments: [ 'key1=value1' | 'key2=value2' ]</msg>
<msg timestamp="20200131 11:53:43.763" level="TRACE">Return: {'key1': 'value1', 'key2': 'value2'}</msg>
<msg timestamp="20200131 11:53:43.763" level="INFO">${d} = {'key1': 'value1', 'key2': 'value2'}</msg>
<status status="PASS" starttime="20200131 11:53:43.762" endtime="20200131 11:53:43.763"></status>
</kw>
<kw name="Should Contain X Times" library="BuiltIn">
<doc>Fails if ``item1`` does not contain ``item2`` ``count`` times.</doc>
<arguments>
<arg>${d}</arg>
<arg>key1</arg>
<arg>count=${1}</arg>
</arguments>
<msg timestamp="20200131 11:53:43.763" level="TRACE">Arguments: [ {'key1': 'value1', 'key2': 'value2'} | 'key1' | count=1 ]</msg>
<msg timestamp="20200131 11:53:43.763" level="INFO">Item found from the first item 1 time</msg>
<msg timestamp="20200131 11:53:43.763" level="DEBUG">Argument types are:
&lt;class 'int'&gt;
&lt;class 'int'&gt;</msg>
<msg timestamp="20200131 11:53:43.763" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.763" endtime="20200131 11:53:43.763"></status>
</kw>
<kw name="Should Contain X Times" library="BuiltIn">
<doc>Fails if ``item1`` does not contain ``item2`` ``count`` times.</doc>
<arguments>
<arg>${d}</arg>
<arg>key5</arg>
<arg>count=${0}</arg>
</arguments>
<msg timestamp="20200131 11:53:43.765" level="TRACE">Arguments: [ {'key1': 'value1', 'key2': 'value2'} | 'key5' | count=0 ]</msg>
<msg timestamp="20200131 11:53:43.766" level="INFO">Item found from the first item 0 times</msg>
<msg timestamp="20200131 11:53:43.766" level="DEBUG">Argument types are:
&lt;class 'int'&gt;
&lt;class 'int'&gt;</msg>
<msg timestamp="20200131 11:53:43.766" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.765" endtime="20200131 11:53:43.766"></status>
</kw>
<doc>Should Contain X Times item1, item2, count, msg=None, ignore_case=False
Fails if item1 does not contain item2 count times.
Works with strings, lists, tuples and dictionaries and all objects that Get Count works with.
(Get Count works with all Python objects that can be converted to a list)
The default error message can be overridden with msg and the actual count is always logged.</doc>
<status status="PASS" starttime="20200131 11:53:43.748" endtime="20200131 11:53:43.766" critical="yes"></status>
</test>
<test id="s1-s1-t93" name="Use &quot;Should End With&quot;">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>Lorem Ipsum</arg>
</arguments>
<assign>
<var>${s}</var>
</assign>
<msg timestamp="20200131 11:53:43.767" level="TRACE">Arguments: [ 'Lorem Ipsum' ]</msg>
<msg timestamp="20200131 11:53:43.767" level="TRACE">Return: 'Lorem Ipsum'</msg>
<msg timestamp="20200131 11:53:43.767" level="INFO">${s} = Lorem Ipsum</msg>
<status status="PASS" starttime="20200131 11:53:43.767" endtime="20200131 11:53:43.767"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>ipsum</arg>
</arguments>
<assign>
<var>${search}</var>
</assign>
<msg timestamp="20200131 11:53:43.767" level="TRACE">Arguments: [ 'ipsum' ]</msg>
<msg timestamp="20200131 11:53:43.767" level="TRACE">Return: 'ipsum'</msg>
<msg timestamp="20200131 11:53:43.767" level="INFO">${search} = ipsum</msg>
<status status="PASS" starttime="20200131 11:53:43.767" endtime="20200131 11:53:43.767"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should End With</arg>
<arg>${s}</arg>
<arg>${search}</arg>
</arguments>
<msg timestamp="20200131 11:53:43.767" level="TRACE">Arguments: [ 'Should End With' | '${s}' | '${search}' ]</msg>
<kw name="Should End With" library="BuiltIn">
<doc>Fails if the string ``str1`` does not end with the string ``str2``.</doc>
<arguments>
<arg>${s}</arg>
<arg>${search}</arg>
</arguments>
<msg timestamp="20200131 11:53:43.768" level="TRACE">Arguments: [ 'Lorem Ipsum' | 'ipsum' ]</msg>
<msg timestamp="20200131 11:53:43.768" level="FAIL">'Lorem Ipsum' does not end with 'ipsum'</msg>
<msg timestamp="20200131 11:53:43.768" level="DEBUG">Traceback (most recent call last):
  None</msg>
<status status="FAIL" starttime="20200131 11:53:43.767" endtime="20200131 11:53:43.768"></status>
</kw>
<msg timestamp="20200131 11:53:43.768" level="TRACE">Return: ('FAIL', "'Lorem Ipsum' does not end with 'ipsum'")</msg>
<status status="PASS" starttime="20200131 11:53:43.767" endtime="20200131 11:53:43.768"></status>
</kw>
<kw name="Should End With" library="BuiltIn">
<doc>Fails if the string ``str1`` does not end with the string ``str2``.</doc>
<arguments>
<arg>${s}</arg>
<arg>${search}</arg>
<arg>ignore_case=True</arg>
</arguments>
<msg timestamp="20200131 11:53:43.770" level="TRACE">Arguments: [ 'Lorem Ipsum' | 'ipsum' | ignore_case=True ]</msg>
<msg timestamp="20200131 11:53:43.771" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.770" endtime="20200131 11:53:43.771"></status>
</kw>
<doc>Should End With str1, str2, msg=None, values=True, ignore_case=False
Fails if the string str1 does not end with the string str2.
See Should Be Equal for an explanation on how to override the default error message with msg
and values, as well as for semantics of the ignore_case option.</doc>
<status status="PASS" starttime="20200131 11:53:43.766" endtime="20200131 11:53:43.771" critical="yes"></status>
</test>
<test id="s1-s1-t94" name="Use &quot;Should Match&quot;">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Match</arg>
<arg>string=Cannot find anything here</arg>
<arg>pattern=*not found*</arg>
<arg>msg='The overwriting msg'</arg>
</arguments>
<msg timestamp="20200131 11:53:43.774" level="TRACE">Arguments: [ 'Should Match' | 'string=Cannot find anything here' | 'pattern=*not found*' | "msg='The overwriting msg'" ]</msg>
<kw name="Should Match" library="BuiltIn">
<doc>Fails if the given ``string`` does not match the given ``pattern``.</doc>
<arguments>
<arg>string=Cannot find anything here</arg>
<arg>pattern=*not found*</arg>
<arg>msg='The overwriting msg'</arg>
</arguments>
<msg timestamp="20200131 11:53:43.774" level="TRACE">Arguments: [ string='Cannot find anything here' | pattern='*not found*' | msg="'The overwriting msg'" ]</msg>
<msg timestamp="20200131 11:53:43.775" level="FAIL">'The overwriting msg': 'Cannot find anything here' does not match '*not found*'</msg>
<msg timestamp="20200131 11:53:43.775" level="DEBUG">Traceback (most recent call last):
  None</msg>
<status status="FAIL" starttime="20200131 11:53:43.774" endtime="20200131 11:53:43.775"></status>
</kw>
<msg timestamp="20200131 11:53:43.775" level="TRACE">Return: ('FAIL',
 "'The overwriting msg': 'Cannot find anything here' does not match '*not found*'")</msg>
<status status="PASS" starttime="20200131 11:53:43.774" endtime="20200131 11:53:43.775"></status>
</kw>
<kw name="Should Match" library="BuiltIn">
<doc>Fails if the given ``string`` does not match the given ``pattern``.</doc>
<arguments>
<arg>string=Can find me here</arg>
<arg>pattern=*me*</arg>
<arg>msg='The overwriting error'</arg>
</arguments>
<msg timestamp="20200131 11:53:43.778" level="TRACE">Arguments: [ string='Can find me here' | pattern='*me*' | msg="'The overwriting error'" ]</msg>
<msg timestamp="20200131 11:53:43.778" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.778" endtime="20200131 11:53:43.778"></status>
</kw>
<kw name="Should Match" library="BuiltIn">
<doc>Fails if the given ``string`` does not match the given ``pattern``.</doc>
<arguments>
<arg>string=Will match with star</arg>
<arg>pattern=*</arg>
</arguments>
<msg timestamp="20200131 11:53:43.778" level="TRACE">Arguments: [ string='Will match with star' | pattern='*' ]</msg>
<msg timestamp="20200131 11:53:43.778" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.778" endtime="20200131 11:53:43.778"></status>
</kw>
<kw name="Should Match" library="BuiltIn">
<doc>Fails if the given ``string`` does not match the given ``pattern``.</doc>
<arguments>
<arg>string=Will match this</arg>
<arg>pattern=*[atx]his</arg>
</arguments>
<msg timestamp="20200131 11:53:43.779" level="TRACE">Arguments: [ string='Will match this' | pattern='*[atx]his' ]</msg>
<msg timestamp="20200131 11:53:43.779" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.779" endtime="20200131 11:53:43.779"></status>
</kw>
<kw name="Should Match" library="BuiltIn">
<doc>Fails if the given ``string`` does not match the given ``pattern``.</doc>
<arguments>
<arg>string=Will match with keyword</arg>
<arg>pattern=*?eyword</arg>
</arguments>
<msg timestamp="20200131 11:53:43.779" level="TRACE">Arguments: [ string='Will match with keyword' | pattern='*?eyword' ]</msg>
<msg timestamp="20200131 11:53:43.779" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.779" endtime="20200131 11:53:43.779"></status>
</kw>
<doc>https://stackoverflow.com/questions/59967941/robot-framework-builtin-library-should-match-how-to-pass-a-pattern-paramet
Should Match string, pattern, msg=None, values=True, ignore_case=False
Fails if the given string does not match the given pattern.
Pattern matching is similar as matching files in a shell with *, ? and [chars] acting as
wildcards. See the Glob patterns section for more information.
When using "Should Match" the pattern needs to match the whole string, not just part of the string.
If you want the first pattern to pass, you need to change it to *me*. The first star will match
everything up to the word "me", and the second star will match everything after.
The same is true for the other patterns. If you're looking for a pattern inside a larger
string you need to add * on either side of the pattern to match all of the other characters</doc>
<status status="PASS" starttime="20200131 11:53:43.771" endtime="20200131 11:53:43.779" critical="yes"></status>
</test>
<test id="s1-s1-t95" name="Use &quot;Should Match Regexp&quot;">
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>Test needs to be implemented</arg>
</arguments>
<msg timestamp="20200131 11:53:43.782" level="TRACE">Arguments: [ 'Test needs to be implemented' ]</msg>
<msg timestamp="20200131 11:53:43.782" level="FAIL">Test needs to be implemented</msg>
<msg timestamp="20200131 11:53:43.782" level="DEBUG">Traceback (most recent call last):
  None</msg>
<status status="FAIL" starttime="20200131 11:53:43.782" endtime="20200131 11:53:43.782"></status>
</kw>
<doc>Come back here once studied regular expressions in Python</doc>
<tags>
<tag>not-understood</tag>
</tags>
<status status="FAIL" starttime="20200131 11:53:43.779" endtime="20200131 11:53:43.782" critical="yes">Test needs to be implemented</status>
</test>
<test id="s1-s1-t96" name="Use &quot;Should Not Be Empty&quot;">
<kw name="Get List" library="Utils">
<assign>
<var>@{list}</var>
</assign>
<msg timestamp="20200131 11:53:43.783" level="TRACE">Arguments: [  ]</msg>
<msg timestamp="20200131 11:53:43.783" level="TRACE">Return: ['a', 'b', 'a', 'c', 1, 0, 3, 1, 2, 1]</msg>
<msg timestamp="20200131 11:53:43.783" level="INFO">@{list} = [ a | b | a | c | 1 | 0 | 3 | 1 | 2 | 1 ]</msg>
<status status="PASS" starttime="20200131 11:53:43.783" endtime="20200131 11:53:43.783"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${list}</arg>
<arg>msg='This msg wont show as there is no error'</arg>
</arguments>
<msg timestamp="20200131 11:53:43.783" level="TRACE">Arguments: [ ['a', 'b', 'a', 'c', 1, 0, 3, 1, 2, 1] | msg="'This msg wont show as there is no error'" ]</msg>
<msg timestamp="20200131 11:53:43.783" level="INFO">Length is 10</msg>
<msg timestamp="20200131 11:53:43.783" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.783" endtime="20200131 11:53:43.783"></status>
</kw>
<kw name="Get String Wrapper" library="Utils">
<arguments>
<arg>I am a string of length 26</arg>
</arguments>
<assign>
<var>${string_wrapper}</var>
</assign>
<msg timestamp="20200131 11:53:43.785" level="TRACE">Arguments: [ 'I am a string of length 26' ]</msg>
<msg timestamp="20200131 11:53:43.785" level="TRACE">Return: &lt;Utils.StringUtils object at 0x7fd4ff626110&gt;</msg>
<msg timestamp="20200131 11:53:43.785" level="INFO">${string_wrapper} = &lt;Utils.StringUtils object at 0x7fd4ff626110&gt;</msg>
<status status="PASS" starttime="20200131 11:53:43.785" endtime="20200131 11:53:43.785"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>item=${string_wrapper}</arg>
<arg>msg='This msg wont show as there is no error'</arg>
</arguments>
<msg timestamp="20200131 11:53:43.786" level="TRACE">Arguments: [ item=&lt;Utils.StringUtils object at 0x7fd4ff626110&gt; | msg="'This msg wont show as there is no error'" ]</msg>
<msg timestamp="20200131 11:53:43.786" level="INFO">Length is 26</msg>
<msg timestamp="20200131 11:53:43.786" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.786" endtime="20200131 11:53:43.786"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>item=${utility_object}</arg>
<arg>msg='This msg wont show as there is no error'</arg>
</arguments>
<msg timestamp="20200131 11:53:43.786" level="TRACE">Arguments: [ item=&lt;Utils.Util object at 0x7fd4ff6bfe90&gt; | msg="'This msg wont show as there is no error'" ]</msg>
<msg timestamp="20200131 11:53:43.786" level="INFO">Length is 5</msg>
<msg timestamp="20200131 11:53:43.786" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.786" endtime="20200131 11:53:43.786"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Not Be Empty</arg>
<arg>${5}</arg>
<arg>msg='The overwriting error msg'</arg>
</arguments>
<msg timestamp="20200131 11:53:43.786" level="TRACE">Arguments: [ 'Should Not Be Empty' | '${5}' | "msg='The overwriting error msg'" ]</msg>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${5}</arg>
<arg>msg='The overwriting error msg'</arg>
</arguments>
<msg timestamp="20200131 11:53:43.787" level="TRACE">Arguments: [ 5 | msg="'The overwriting error msg'" ]</msg>
<msg timestamp="20200131 11:53:43.787" level="FAIL">Could not get length of '5'.</msg>
<msg timestamp="20200131 11:53:43.787" level="DEBUG">Traceback (most recent call last):
  None</msg>
<status status="FAIL" starttime="20200131 11:53:43.787" endtime="20200131 11:53:43.787"></status>
</kw>
<msg timestamp="20200131 11:53:43.787" level="TRACE">Return: ('FAIL', "Could not get length of '5'.")</msg>
<status status="PASS" starttime="20200131 11:53:43.786" endtime="20200131 11:53:43.787"></status>
</kw>
<doc>Should Not Be Empty item, msg=None
Verifies that the given item is not empty.
The length of the item is got using the Get Length keyword.
The default error message can be overridden with the msg argument.</doc>
<status status="PASS" starttime="20200131 11:53:43.782" endtime="20200131 11:53:43.790" critical="yes"></status>
</test>
<test id="s1-s1-t97" name="Use &quot;Should Not Be Equal&quot;">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Not Be Equal</arg>
<arg>Case insensitive String</arg>
<arg>case insensitive string</arg>
<arg>ignore_case=True</arg>
<arg>msg='Overwriting error msg'</arg>
</arguments>
<msg timestamp="20200131 11:53:43.792" level="TRACE">Arguments: [ 'Should Not Be Equal' | 'Case insensitive String' | 'case insensitive string' | 'ignore_case=True' | "msg='Overwriting error msg'" ]</msg>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>Case insensitive String</arg>
<arg>case insensitive string</arg>
<arg>ignore_case=True</arg>
<arg>msg='Overwriting error msg'</arg>
</arguments>
<msg timestamp="20200131 11:53:43.792" level="TRACE">Arguments: [ 'Case insensitive String' | 'case insensitive string' | ignore_case=True | msg="'Overwriting error msg'" ]</msg>
<msg timestamp="20200131 11:53:43.792" level="DEBUG">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20200131 11:53:43.793" level="FAIL">'Overwriting error msg': case insensitive string == case insensitive string</msg>
<msg timestamp="20200131 11:53:43.793" level="DEBUG">Traceback (most recent call last):
  None</msg>
<status status="FAIL" starttime="20200131 11:53:43.792" endtime="20200131 11:53:43.793"></status>
</kw>
<msg timestamp="20200131 11:53:43.793" level="TRACE">Return: ('FAIL',
 "'Overwriting error msg': case insensitive string == case insensitive string")</msg>
<status status="PASS" starttime="20200131 11:53:43.792" endtime="20200131 11:53:43.793"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>Case insensitive String</arg>
<arg>case insensitive string</arg>
<arg>ignore_case=False</arg>
</arguments>
<msg timestamp="20200131 11:53:43.795" level="TRACE">Arguments: [ 'Case insensitive String' | 'case insensitive string' | ignore_case=False ]</msg>
<msg timestamp="20200131 11:53:43.795" level="DEBUG">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20200131 11:53:43.796" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.795" endtime="20200131 11:53:43.796"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>0b1011</arg>
<arg>11</arg>
</arguments>
<msg timestamp="20200131 11:53:43.796" level="TRACE">Arguments: [ '0b1011' | '11' ]</msg>
<msg timestamp="20200131 11:53:43.796" level="DEBUG">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20200131 11:53:43.796" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.796" endtime="20200131 11:53:43.796"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>0b1011</arg>
<arg>0xB</arg>
</arguments>
<msg timestamp="20200131 11:53:43.796" level="TRACE">Arguments: [ '0b1011' | '0xB' ]</msg>
<msg timestamp="20200131 11:53:43.796" level="DEBUG">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20200131 11:53:43.796" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.796" endtime="20200131 11:53:43.796"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Not Be Equal</arg>
<arg>${0b1011}</arg>
<arg>${0xB}</arg>
</arguments>
<msg timestamp="20200131 11:53:43.796" level="TRACE">Arguments: [ 'Should Not Be Equal' | '${0b1011}' | '${0xB}' ]</msg>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${0b1011}</arg>
<arg>${0xB}</arg>
</arguments>
<msg timestamp="20200131 11:53:43.796" level="TRACE">Arguments: [ 11 | 11 ]</msg>
<msg timestamp="20200131 11:53:43.797" level="DEBUG">Argument types are:
&lt;class 'int'&gt;
&lt;class 'int'&gt;</msg>
<msg timestamp="20200131 11:53:43.797" level="FAIL">11 == 11</msg>
<msg timestamp="20200131 11:53:43.797" level="DEBUG">Traceback (most recent call last):
  None</msg>
<status status="FAIL" starttime="20200131 11:53:43.796" endtime="20200131 11:53:43.797"></status>
</kw>
<msg timestamp="20200131 11:53:43.797" level="TRACE">Return: ('FAIL', '11 == 11')</msg>
<status status="PASS" starttime="20200131 11:53:43.796" endtime="20200131 11:53:43.797"></status>
</kw>
<doc>Should Not Be Equal first, second, msg=None, values=True, ignore_case=False
Fails if the given objects are equal.
See Should Be Equal for an explanation on how to override the default error message with msg and values.
If ignore_case is given a true value (see Boolean arguments) and both arguments are strings,
comparison is done case-insensitively. New option in Robot Framework 3.0.1.</doc>
<status status="PASS" starttime="20200131 11:53:43.790" endtime="20200131 11:53:43.798" critical="yes"></status>
</test>
<test id="s1-s1-t98" name="Use &quot;Should Not Be Equal As Integers&quot;">
<kw name="Should Not Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are equal after converting them to integers.</doc>
<arguments>
<arg>10</arg>
<arg>11</arg>
</arguments>
<msg timestamp="20200131 11:53:43.799" level="TRACE">Arguments: [ '10' | '11' ]</msg>
<msg timestamp="20200131 11:53:43.799" level="DEBUG">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20200131 11:53:43.799" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.799" endtime="20200131 11:53:43.799"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Not Be Equal As Integers</arg>
<arg>0b1011</arg>
<arg>11</arg>
</arguments>
<msg timestamp="20200131 11:53:43.801" level="TRACE">Arguments: [ 'Should Not Be Equal As Integers' | '0b1011' | '11' ]</msg>
<kw name="Should Not Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are equal after converting them to integers.</doc>
<arguments>
<arg>0b1011</arg>
<arg>11</arg>
</arguments>
<msg timestamp="20200131 11:53:43.801" level="TRACE">Arguments: [ '0b1011' | '11' ]</msg>
<msg timestamp="20200131 11:53:43.801" level="DEBUG">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20200131 11:53:43.801" level="FAIL">11 == 11</msg>
<msg timestamp="20200131 11:53:43.801" level="DEBUG">Traceback (most recent call last):
  None</msg>
<status status="FAIL" starttime="20200131 11:53:43.801" endtime="20200131 11:53:43.801"></status>
</kw>
<msg timestamp="20200131 11:53:43.801" level="TRACE">Return: ('FAIL', '11 == 11')</msg>
<status status="PASS" starttime="20200131 11:53:43.801" endtime="20200131 11:53:43.801"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Not Be Equal As Integers</arg>
<arg>0b1011</arg>
<arg>0xB</arg>
</arguments>
<msg timestamp="20200131 11:53:43.802" level="TRACE">Arguments: [ 'Should Not Be Equal As Integers' | '0b1011' | '0xB' ]</msg>
<kw name="Should Not Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are equal after converting them to integers.</doc>
<arguments>
<arg>0b1011</arg>
<arg>0xB</arg>
</arguments>
<msg timestamp="20200131 11:53:43.802" level="TRACE">Arguments: [ '0b1011' | '0xB' ]</msg>
<msg timestamp="20200131 11:53:43.802" level="DEBUG">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20200131 11:53:43.802" level="FAIL">11 == 11</msg>
<msg timestamp="20200131 11:53:43.802" level="DEBUG">Traceback (most recent call last):
  None</msg>
<status status="FAIL" starttime="20200131 11:53:43.802" endtime="20200131 11:53:43.802"></status>
</kw>
<msg timestamp="20200131 11:53:43.802" level="TRACE">Return: ('FAIL', '11 == 11')</msg>
<status status="PASS" starttime="20200131 11:53:43.802" endtime="20200131 11:53:43.802"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Not Be Equal As Integers</arg>
<arg>0b1011</arg>
<arg>0b1011</arg>
<arg>msg='Overriding error msg'</arg>
<arg>values=True</arg>
</arguments>
<msg timestamp="20200131 11:53:43.806" level="TRACE">Arguments: [ 'Should Not Be Equal As Integers' | '0b1011' | '0b1011' | "msg='Overriding error msg'" | 'values=True' ]</msg>
<kw name="Should Not Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are equal after converting them to integers.</doc>
<arguments>
<arg>0b1011</arg>
<arg>0b1011</arg>
<arg>msg='Overriding error msg'</arg>
<arg>values=True</arg>
</arguments>
<msg timestamp="20200131 11:53:43.806" level="TRACE">Arguments: [ '0b1011' | '0b1011' | msg="'Overriding error msg'" | values=True ]</msg>
<msg timestamp="20200131 11:53:43.806" level="DEBUG">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20200131 11:53:43.806" level="FAIL">'Overriding error msg': 11 == 11</msg>
<msg timestamp="20200131 11:53:43.806" level="DEBUG">Traceback (most recent call last):
  None</msg>
<status status="FAIL" starttime="20200131 11:53:43.806" endtime="20200131 11:53:43.806"></status>
</kw>
<msg timestamp="20200131 11:53:43.806" level="TRACE">Return: ('FAIL', "'Overriding error msg': 11 == 11")</msg>
<status status="PASS" starttime="20200131 11:53:43.806" endtime="20200131 11:53:43.806"></status>
</kw>
<doc>https://stackoverflow.com/questions/59982565/robot-fw-builtin-library-should-not-be-equal-0b1011-11-passes-but-its-shoul
Should Not Be Equal As Integers first, second, msg=None, values=True, base=None
Fails if objects are equal after converting them to integers.
See Convert To Integer for information how to convert integers from other bases than 10
using base argument or 0b/0o/0x prefixes.
See Should Be Equal for an explanation on how to override the default error message with msg and values.</doc>
<status status="PASS" starttime="20200131 11:53:43.798" endtime="20200131 11:53:43.807" critical="yes"></status>
</test>
<test id="s1-s1-t99" name="Use &quot;Should Not Be Equal As Numbers&quot;">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Not Be Equal As Numbers</arg>
<arg>first=${1.123}</arg>
<arg>second=${1.345}</arg>
<arg>msg='The overwriting error msg'</arg>
<arg>precision=0</arg>
</arguments>
<msg timestamp="20200131 11:53:43.807" level="TRACE">Arguments: [ 'Should Not Be Equal As Numbers' | 'first=${1.123}' | 'second=${1.345}' | "msg='The overwriting error msg'" | 'precision=0' ]</msg>
<kw name="Should Not Be Equal As Numbers" library="BuiltIn">
<doc>Fails if objects are equal after converting them to real numbers.</doc>
<arguments>
<arg>first=${1.123}</arg>
<arg>second=${1.345}</arg>
<arg>msg='The overwriting error msg'</arg>
<arg>precision=0</arg>
</arguments>
<msg timestamp="20200131 11:53:43.808" level="TRACE">Arguments: [ first=1.123 | second=1.345 | msg="'The overwriting error msg'" | precision=0 ]</msg>
<msg timestamp="20200131 11:53:43.808" level="DEBUG">Argument types are:
&lt;class 'float'&gt;
&lt;class 'float'&gt;</msg>
<msg timestamp="20200131 11:53:43.808" level="FAIL">'The overwriting error msg': 1.0 == 1.0</msg>
<msg timestamp="20200131 11:53:43.808" level="DEBUG">Traceback (most recent call last):
  None</msg>
<status status="FAIL" starttime="20200131 11:53:43.807" endtime="20200131 11:53:43.808"></status>
</kw>
<msg timestamp="20200131 11:53:43.808" level="TRACE">Return: ('FAIL', "'The overwriting error msg': 1.0 == 1.0")</msg>
<status status="PASS" starttime="20200131 11:53:43.807" endtime="20200131 11:53:43.808"></status>
</kw>
<kw name="Should Not Be Equal As Numbers" library="BuiltIn">
<doc>Fails if objects are equal after converting them to real numbers.</doc>
<arguments>
<arg>first=${1.123}</arg>
<arg>second=${1.345}</arg>
<arg>msg='The overwriting error msg'</arg>
<arg>precision=1</arg>
</arguments>
<msg timestamp="20200131 11:53:43.808" level="TRACE">Arguments: [ first=1.123 | second=1.345 | msg="'The overwriting error msg'" | precision=1 ]</msg>
<msg timestamp="20200131 11:53:43.808" level="DEBUG">Argument types are:
&lt;class 'float'&gt;
&lt;class 'float'&gt;</msg>
<msg timestamp="20200131 11:53:43.808" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.808" endtime="20200131 11:53:43.808"></status>
</kw>
<doc>Should Not Be Equal As Numbers first, second, msg=None, values=True, precision=6
Fails if objects are equal after converting them to real numbers.</doc>
<status status="PASS" starttime="20200131 11:53:43.807" endtime="20200131 11:53:43.808" critical="yes"></status>
</test>
<test id="s1-s1-t100" name="Use &quot;Should Not Be Equal As Strings&quot;">
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>Implement this case</arg>
</arguments>
<msg timestamp="20200131 11:53:43.810" level="TRACE">Arguments: [ 'Implement this case' ]</msg>
<msg timestamp="20200131 11:53:43.810" level="FAIL">Implement this case</msg>
<msg timestamp="20200131 11:53:43.810" level="DEBUG">Traceback (most recent call last):
  None</msg>
<status status="FAIL" starttime="20200131 11:53:43.810" endtime="20200131 11:53:43.810"></status>
</kw>
<doc>Unclear keyword</doc>
<tags>
<tag>not-understood</tag>
</tags>
<status status="FAIL" starttime="20200131 11:53:43.810" endtime="20200131 11:53:43.810" critical="yes">Implement this case</status>
</test>
<test id="s1-s1-t101" name="Use &quot;Should Not Be True&quot;">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Not Be True</arg>
<arg>os.linesep == '\n'</arg>
<arg>msg='The expected overwriting error msg in Linux'</arg>
</arguments>
<msg timestamp="20200131 11:53:43.813" level="TRACE">Arguments: [ 'Should Not Be True' | "os.linesep == '\\n'" | "msg='The expected overwriting error msg in Linux'" ]</msg>
<kw name="Should Not Be True" library="BuiltIn">
<doc>Fails if the given condition is true.</doc>
<arguments>
<arg>os.linesep == '\n'</arg>
<arg>msg='The expected overwriting error msg in Linux'</arg>
</arguments>
<msg timestamp="20200131 11:53:43.813" level="TRACE">Arguments: [ "os.linesep == '\n'" | msg="'The expected overwriting error msg in Linux'" ]</msg>
<msg timestamp="20200131 11:53:43.815" level="FAIL">Evaluating expression 'os.linesep == '
'' failed: SyntaxError: EOL while scanning string literal (&lt;string&gt;, line 1)</msg>
<msg timestamp="20200131 11:53:43.815" level="DEBUG">Traceback (most recent call last):
  None</msg>
<status status="FAIL" starttime="20200131 11:53:43.813" endtime="20200131 11:53:43.815"></status>
</kw>
<msg timestamp="20200131 11:53:43.815" level="TRACE">Return: ('FAIL',
 "Evaluating expression 'os.linesep == '\n'' failed: SyntaxError: EOL while scanning string literal (&lt;string&gt;, line 1)")</msg>
<status status="PASS" starttime="20200131 11:53:43.813" endtime="20200131 11:53:43.815"></status>
</kw>
<doc>Should Not Be True condition, msg=None</doc>
<status status="PASS" starttime="20200131 11:53:43.812" endtime="20200131 11:53:43.815" critical="yes"></status>
</test>
<test id="s1-s1-t102" name="Use &quot;Should Not Contain&quot;">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>Lorem Ipsum</arg>
</arguments>
<assign>
<var>${s}</var>
</assign>
<msg timestamp="20200131 11:53:43.818" level="TRACE">Arguments: [ 'Lorem Ipsum' ]</msg>
<msg timestamp="20200131 11:53:43.818" level="TRACE">Return: 'Lorem Ipsum'</msg>
<msg timestamp="20200131 11:53:43.818" level="INFO">${s} = Lorem Ipsum</msg>
<status status="PASS" starttime="20200131 11:53:43.818" endtime="20200131 11:53:43.818"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>lorem</arg>
</arguments>
<assign>
<var>${search}</var>
</assign>
<msg timestamp="20200131 11:53:43.818" level="TRACE">Arguments: [ 'lorem' ]</msg>
<msg timestamp="20200131 11:53:43.818" level="TRACE">Return: 'lorem'</msg>
<msg timestamp="20200131 11:53:43.818" level="INFO">${search} = lorem</msg>
<status status="PASS" starttime="20200131 11:53:43.818" endtime="20200131 11:53:43.818"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>container=${s}</arg>
<arg>item=${search}</arg>
</arguments>
<msg timestamp="20200131 11:53:43.818" level="TRACE">Arguments: [ container='Lorem Ipsum' | item='lorem' ]</msg>
<msg timestamp="20200131 11:53:43.818" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.818" endtime="20200131 11:53:43.818"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Not Contain</arg>
<arg>container=${s}</arg>
<arg>item=${search}</arg>
<arg>ignore_case=True</arg>
</arguments>
<msg timestamp="20200131 11:53:43.819" level="TRACE">Arguments: [ 'Should Not Contain' | 'container=${s}' | 'item=${search}' | 'ignore_case=True' ]</msg>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>container=${s}</arg>
<arg>item=${search}</arg>
<arg>ignore_case=True</arg>
</arguments>
<msg timestamp="20200131 11:53:43.819" level="TRACE">Arguments: [ container='Lorem Ipsum' | item='lorem' | ignore_case=True ]</msg>
<msg timestamp="20200131 11:53:43.819" level="FAIL">'Lorem Ipsum' contains 'lorem'</msg>
<msg timestamp="20200131 11:53:43.819" level="DEBUG">Traceback (most recent call last):
  None</msg>
<status status="FAIL" starttime="20200131 11:53:43.819" endtime="20200131 11:53:43.819"></status>
</kw>
<msg timestamp="20200131 11:53:43.819" level="TRACE">Return: ('FAIL', "'Lorem Ipsum' contains 'lorem'")</msg>
<status status="PASS" starttime="20200131 11:53:43.819" endtime="20200131 11:53:43.819"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${1}</arg>
<arg>${2}</arg>
<arg>${3}</arg>
</arguments>
<assign>
<var>${l}</var>
</assign>
<msg timestamp="20200131 11:53:43.823" level="TRACE">Arguments: [ 1 | 2 | 3 ]</msg>
<msg timestamp="20200131 11:53:43.823" level="TRACE">Return: [1, 2, 3]</msg>
<msg timestamp="20200131 11:53:43.823" level="INFO">${l} = [1, 2, 3]</msg>
<status status="PASS" starttime="20200131 11:53:43.823" endtime="20200131 11:53:43.823"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${2}</arg>
</arguments>
<assign>
<var>${search}</var>
</assign>
<msg timestamp="20200131 11:53:43.823" level="TRACE">Arguments: [ 2 ]</msg>
<msg timestamp="20200131 11:53:43.823" level="TRACE">Return: 2</msg>
<msg timestamp="20200131 11:53:43.823" level="INFO">${search} = 2</msg>
<status status="PASS" starttime="20200131 11:53:43.823" endtime="20200131 11:53:43.823"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Not Contain</arg>
<arg>container=${l}</arg>
<arg>item=${search}</arg>
</arguments>
<msg timestamp="20200131 11:53:43.824" level="TRACE">Arguments: [ 'Should Not Contain' | 'container=${l}' | 'item=${search}' ]</msg>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>container=${l}</arg>
<arg>item=${search}</arg>
</arguments>
<msg timestamp="20200131 11:53:43.824" level="TRACE">Arguments: [ container=[1, 2, 3] | item=2 ]</msg>
<msg timestamp="20200131 11:53:43.824" level="FAIL">'[1, 2, 3]' contains '2'</msg>
<msg timestamp="20200131 11:53:43.824" level="DEBUG">Traceback (most recent call last):
  None</msg>
<status status="FAIL" starttime="20200131 11:53:43.824" endtime="20200131 11:53:43.824"></status>
</kw>
<msg timestamp="20200131 11:53:43.824" level="TRACE">Return: ('FAIL', "'[1, 2, 3]' contains '2'")</msg>
<status status="PASS" starttime="20200131 11:53:43.824" endtime="20200131 11:53:43.824"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>container=${l}</arg>
<arg>item=${100}</arg>
</arguments>
<msg timestamp="20200131 11:53:43.825" level="TRACE">Arguments: [ container=[1, 2, 3] | item=100 ]</msg>
<msg timestamp="20200131 11:53:43.826" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.825" endtime="20200131 11:53:43.826"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>key1=value1</arg>
<arg>key2=value2</arg>
</arguments>
<assign>
<var>${d}</var>
</assign>
<msg timestamp="20200131 11:53:43.830" level="TRACE">Arguments: [ 'key1=value1' | 'key2=value2' ]</msg>
<msg timestamp="20200131 11:53:43.830" level="TRACE">Return: {'key1': 'value1', 'key2': 'value2'}</msg>
<msg timestamp="20200131 11:53:43.830" level="INFO">${d} = {'key1': 'value1', 'key2': 'value2'}</msg>
<status status="PASS" starttime="20200131 11:53:43.830" endtime="20200131 11:53:43.830"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>key1</arg>
</arguments>
<assign>
<var>${search}</var>
</assign>
<msg timestamp="20200131 11:53:43.830" level="TRACE">Arguments: [ 'key1' ]</msg>
<msg timestamp="20200131 11:53:43.830" level="TRACE">Return: 'key1'</msg>
<msg timestamp="20200131 11:53:43.830" level="INFO">${search} = key1</msg>
<status status="PASS" starttime="20200131 11:53:43.830" endtime="20200131 11:53:43.830"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Not Contain</arg>
<arg>container=${d}</arg>
<arg>item=${search}</arg>
</arguments>
<msg timestamp="20200131 11:53:43.830" level="TRACE">Arguments: [ 'Should Not Contain' | 'container=${d}' | 'item=${search}' ]</msg>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>container=${d}</arg>
<arg>item=${search}</arg>
</arguments>
<msg timestamp="20200131 11:53:43.831" level="TRACE">Arguments: [ container={'key1': 'value1', 'key2': 'value2'} | item='key1' ]</msg>
<msg timestamp="20200131 11:53:43.831" level="FAIL">'{'key1': 'value1', 'key2': 'value2'}' contains 'key1'</msg>
<msg timestamp="20200131 11:53:43.831" level="DEBUG">Traceback (most recent call last):
  None</msg>
<status status="FAIL" starttime="20200131 11:53:43.831" endtime="20200131 11:53:43.831"></status>
</kw>
<msg timestamp="20200131 11:53:43.831" level="TRACE">Return: ('FAIL', "'{'key1': 'value1', 'key2': 'value2'}' contains 'key1'")</msg>
<status status="PASS" starttime="20200131 11:53:43.830" endtime="20200131 11:53:43.831"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>container=${d}</arg>
<arg>item=key3</arg>
</arguments>
<msg timestamp="20200131 11:53:43.831" level="TRACE">Arguments: [ container={'key1': 'value1', 'key2': 'value2'} | item='key3' ]</msg>
<msg timestamp="20200131 11:53:43.831" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.831" endtime="20200131 11:53:43.831"></status>
</kw>
<doc>Should Not Contain container, item, msg=None, values=True, ignore_case=False
Fails if container contains item one or more times
Works with strings, lists, dictionaries and anything that supports Python's in operator.</doc>
<status status="PASS" starttime="20200131 11:53:43.815" endtime="20200131 11:53:43.831" critical="yes"></status>
</test>
<test id="s1-s1-t103" name="Use &quot;Should Not Contain Any&quot;">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>Lorem Ipsum</arg>
</arguments>
<assign>
<var>${s}</var>
</assign>
<msg timestamp="20200131 11:53:43.833" level="TRACE">Arguments: [ 'Lorem Ipsum' ]</msg>
<msg timestamp="20200131 11:53:43.833" level="TRACE">Return: 'Lorem Ipsum'</msg>
<msg timestamp="20200131 11:53:43.833" level="INFO">${s} = Lorem Ipsum</msg>
<status status="PASS" starttime="20200131 11:53:43.833" endtime="20200131 11:53:43.833"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Not Contain Any</arg>
<arg>${s}</arg>
<arg>REM</arg>
<arg>xx</arg>
<arg>msg='Overwriding msg'</arg>
<arg>values=True</arg>
<arg>ignore_case=True</arg>
</arguments>
<msg timestamp="20200131 11:53:43.836" level="TRACE">Arguments: [ 'Should Not Contain Any' | '${s}' | 'REM' | 'xx' | "msg='Overwriding msg'" | 'values=True' | 'ignore_case=True' ]</msg>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${s}</arg>
<arg>REM</arg>
<arg>xx</arg>
<arg>msg='Overwriding msg'</arg>
<arg>values=True</arg>
<arg>ignore_case=True</arg>
</arguments>
<msg timestamp="20200131 11:53:43.836" level="TRACE">Arguments: [ 'Lorem Ipsum' | 'REM' | 'xx' | msg="'Overwriding msg'" | values='True' | ignore_case='True' ]</msg>
<msg timestamp="20200131 11:53:43.836" level="FAIL">'Overwriding msg': 'Lorem Ipsum' contains one or more of 'rem' or 'xx'</msg>
<msg timestamp="20200131 11:53:43.836" level="DEBUG">Traceback (most recent call last):
  None</msg>
<status status="FAIL" starttime="20200131 11:53:43.836" endtime="20200131 11:53:43.836"></status>
</kw>
<msg timestamp="20200131 11:53:43.836" level="TRACE">Return: ('FAIL',
 "'Overwriding msg': 'Lorem Ipsum' contains one or more of 'rem' or 'xx'")</msg>
<status status="PASS" starttime="20200131 11:53:43.835" endtime="20200131 11:53:43.836"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${s}</arg>
<arg>REM</arg>
<arg>xx</arg>
<arg>msg='This error msg wont show'</arg>
<arg>values=True</arg>
<arg>ignore_case=False</arg>
</arguments>
<msg timestamp="20200131 11:53:43.836" level="TRACE">Arguments: [ 'Lorem Ipsum' | 'REM' | 'xx' | msg="'This error msg wont show'" | values='True' | ignore_case='False' ]</msg>
<msg timestamp="20200131 11:53:43.837" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.836" endtime="20200131 11:53:43.837"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${1}</arg>
<arg>${2}</arg>
<arg>${3}</arg>
</arguments>
<assign>
<var>${l}</var>
</assign>
<msg timestamp="20200131 11:53:43.837" level="TRACE">Arguments: [ 1 | 2 | 3 ]</msg>
<msg timestamp="20200131 11:53:43.837" level="TRACE">Return: [1, 2, 3]</msg>
<msg timestamp="20200131 11:53:43.837" level="INFO">${l} = [1, 2, 3]</msg>
<status status="PASS" starttime="20200131 11:53:43.837" endtime="20200131 11:53:43.837"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Not Contain Any</arg>
<arg>${l}</arg>
<arg>${2}</arg>
</arguments>
<msg timestamp="20200131 11:53:43.837" level="TRACE">Arguments: [ 'Should Not Contain Any' | '${l}' | '${2}' ]</msg>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${l}</arg>
<arg>${2}</arg>
</arguments>
<msg timestamp="20200131 11:53:43.837" level="TRACE">Arguments: [ [1, 2, 3] | 2 ]</msg>
<msg timestamp="20200131 11:53:43.837" level="FAIL">'[1, 2, 3]' contains one or more of '2'</msg>
<msg timestamp="20200131 11:53:43.837" level="DEBUG">Traceback (most recent call last):
  None</msg>
<status status="FAIL" starttime="20200131 11:53:43.837" endtime="20200131 11:53:43.837"></status>
</kw>
<msg timestamp="20200131 11:53:43.837" level="TRACE">Return: ('FAIL', "'[1, 2, 3]' contains one or more of '2'")</msg>
<status status="PASS" starttime="20200131 11:53:43.837" endtime="20200131 11:53:43.838"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${l}</arg>
<arg>${100}</arg>
<arg>${200}</arg>
<arg>${300}</arg>
</arguments>
<msg timestamp="20200131 11:53:43.838" level="TRACE">Arguments: [ [1, 2, 3] | 100 | 200 | 300 ]</msg>
<msg timestamp="20200131 11:53:43.838" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.838" endtime="20200131 11:53:43.838"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>key1=value1</arg>
<arg>key2=value2</arg>
</arguments>
<assign>
<var>${d}</var>
</assign>
<msg timestamp="20200131 11:53:43.840" level="TRACE">Arguments: [ 'key1=value1' | 'key2=value2' ]</msg>
<msg timestamp="20200131 11:53:43.840" level="TRACE">Return: {'key1': 'value1', 'key2': 'value2'}</msg>
<msg timestamp="20200131 11:53:43.840" level="INFO">${d} = {'key1': 'value1', 'key2': 'value2'}</msg>
<status status="PASS" starttime="20200131 11:53:43.840" endtime="20200131 11:53:43.840"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Not Contain Any</arg>
<arg>${d}</arg>
<arg>key1</arg>
<arg>key5</arg>
</arguments>
<msg timestamp="20200131 11:53:43.840" level="TRACE">Arguments: [ 'Should Not Contain Any' | '${d}' | 'key1' | 'key5' ]</msg>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${d}</arg>
<arg>key1</arg>
<arg>key5</arg>
</arguments>
<msg timestamp="20200131 11:53:43.840" level="TRACE">Arguments: [ {'key1': 'value1', 'key2': 'value2'} | 'key1' | 'key5' ]</msg>
<msg timestamp="20200131 11:53:43.840" level="FAIL">'{'key1': 'value1', 'key2': 'value2'}' contains one or more of 'key1' or 'key5'</msg>
<msg timestamp="20200131 11:53:43.840" level="DEBUG">Traceback (most recent call last):
  None</msg>
<status status="FAIL" starttime="20200131 11:53:43.840" endtime="20200131 11:53:43.840"></status>
</kw>
<msg timestamp="20200131 11:53:43.840" level="TRACE">Return: ('FAIL',
 "'{'key1': 'value1', 'key2': 'value2'}' contains one or more of 'key1' or 'key5'")</msg>
<status status="PASS" starttime="20200131 11:53:43.840" endtime="20200131 11:53:43.840"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${d}</arg>
<arg>key5</arg>
<arg>key7</arg>
</arguments>
<msg timestamp="20200131 11:53:43.841" level="TRACE">Arguments: [ {'key1': 'value1', 'key2': 'value2'} | 'key5' | 'key7' ]</msg>
<msg timestamp="20200131 11:53:43.841" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.841" endtime="20200131 11:53:43.841"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>item\=1</arg>
<arg>item\=2</arg>
<arg>item\=3</arg>
</arguments>
<assign>
<var>${l}</var>
</assign>
<msg timestamp="20200131 11:53:43.842" level="TRACE">Arguments: [ 'item=1' | 'item=2' | 'item=3' ]</msg>
<msg timestamp="20200131 11:53:43.842" level="TRACE">Return: ['item=1', 'item=2', 'item=3']</msg>
<msg timestamp="20200131 11:53:43.842" level="INFO">${l} = ['item=1', 'item=2', 'item=3']</msg>
<status status="PASS" starttime="20200131 11:53:43.842" endtime="20200131 11:53:43.843"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Not Contain Any</arg>
<arg>${l}</arg>
<arg>foo\=bar</arg>
<arg>item\=3</arg>
</arguments>
<msg timestamp="20200131 11:53:43.843" level="TRACE">Arguments: [ 'Should Not Contain Any' | '${l}' | 'foo\\=bar' | 'item\\=3' ]</msg>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${l}</arg>
<arg>foo\=bar</arg>
<arg>item\=3</arg>
</arguments>
<msg timestamp="20200131 11:53:43.843" level="TRACE">Arguments: [ ['item=1', 'item=2', 'item=3'] | 'foo=bar' | 'item=3' ]</msg>
<msg timestamp="20200131 11:53:43.843" level="FAIL">'['item=1', 'item=2', 'item=3']' contains one or more of 'foo=bar' or 'item=3'</msg>
<msg timestamp="20200131 11:53:43.843" level="DEBUG">Traceback (most recent call last):
  None</msg>
<status status="FAIL" starttime="20200131 11:53:43.843" endtime="20200131 11:53:43.843"></status>
</kw>
<msg timestamp="20200131 11:53:43.843" level="TRACE">Return: ('FAIL',
 "'['item=1', 'item=2', 'item=3']' contains one or more of 'foo=bar' or 'item=3'")</msg>
<status status="PASS" starttime="20200131 11:53:43.843" endtime="20200131 11:53:43.843"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${l}</arg>
<arg>foo\=bar</arg>
<arg>item\=4</arg>
<arg>msg='This error msg wont show'</arg>
<arg>values=True</arg>
<arg>ignore_case=False</arg>
</arguments>
<msg timestamp="20200131 11:53:43.843" level="TRACE">Arguments: [ ['item=1', 'item=2', 'item=3'] | 'foo=bar' | 'item=4' | msg="'This error msg wont show'" | values='True' | ignore_case='False' ]</msg>
<msg timestamp="20200131 11:53:43.843" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.843" endtime="20200131 11:53:43.843"></status>
</kw>
<doc>Should Not Contain Any container, *items, **configuration
Works with strings, lists, dictionaries and anything that supports Python's in operator.
Supports additional configuration parameters msg, values and ignore_case, which have exactly
the same semantics as arguments with same names have with Should Contain. These arguments must
always be given using name=value syntax after all items.
New in Robot Framework 3.0.1.</doc>
<status status="PASS" starttime="20200131 11:53:43.832" endtime="20200131 11:53:43.846" critical="yes"></status>
</test>
<test id="s1-s1-t104" name="Use &quot;Should Not End With&quot;">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Not End With</arg>
<arg>Lorem ipsum</arg>
<arg>ipSum</arg>
<arg>msg='Overwriting error msg'</arg>
<arg>ignore_case=True</arg>
</arguments>
<msg timestamp="20200131 11:53:43.847" level="TRACE">Arguments: [ 'Should Not End With' | 'Lorem ipsum' | 'ipSum' | "msg='Overwriting error msg'" | 'ignore_case=True' ]</msg>
<kw name="Should Not End With" library="BuiltIn">
<doc>Fails if the string ``str1`` ends with the string ``str2``.</doc>
<arguments>
<arg>Lorem ipsum</arg>
<arg>ipSum</arg>
<arg>msg='Overwriting error msg'</arg>
<arg>ignore_case=True</arg>
</arguments>
<msg timestamp="20200131 11:53:43.847" level="TRACE">Arguments: [ 'Lorem ipsum' | 'ipSum' | msg="'Overwriting error msg'" | ignore_case=True ]</msg>
<msg timestamp="20200131 11:53:43.847" level="FAIL">'Overwriting error msg': 'lorem ipsum' ends with 'ipsum'</msg>
<msg timestamp="20200131 11:53:43.847" level="DEBUG">Traceback (most recent call last):
  None</msg>
<status status="FAIL" starttime="20200131 11:53:43.847" endtime="20200131 11:53:43.847"></status>
</kw>
<msg timestamp="20200131 11:53:43.847" level="TRACE">Return: ('FAIL', "'Overwriting error msg': 'lorem ipsum' ends with 'ipsum'")</msg>
<status status="PASS" starttime="20200131 11:53:43.847" endtime="20200131 11:53:43.847"></status>
</kw>
<kw name="Should Not End With" library="BuiltIn">
<doc>Fails if the string ``str1`` ends with the string ``str2``.</doc>
<arguments>
<arg>Lorem ipsum</arg>
<arg>ipSum</arg>
<arg>msg='Overwriting error msg'</arg>
<arg>ignore_case=False</arg>
</arguments>
<msg timestamp="20200131 11:53:43.847" level="TRACE">Arguments: [ 'Lorem ipsum' | 'ipSum' | msg="'Overwriting error msg'" | ignore_case=False ]</msg>
<msg timestamp="20200131 11:53:43.847" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.847" endtime="20200131 11:53:43.847"></status>
</kw>
<doc>Should Not End With str1, str2, msg=None, values=True, ignore_case=False
Fails if the string str1 ends with the string str2.
See Should Be Equal for an explanation on how to override the default error message with msg
and values, as well as for semantics of the ignore_case option.</doc>
<status status="PASS" starttime="20200131 11:53:43.846" endtime="20200131 11:53:43.847" critical="yes"></status>
</test>
<test id="s1-s1-t105" name="Use &quot;Should Not Match&quot;">
<kw name="Should Not Match" library="BuiltIn">
<doc>Fails if the given ``string`` matches the given ``pattern``.</doc>
<arguments>
<arg>string=Cannot find anything here</arg>
<arg>pattern=*not found*</arg>
<arg>msg='Wont show as there is no error'</arg>
</arguments>
<msg timestamp="20200131 11:53:43.850" level="TRACE">Arguments: [ string='Cannot find anything here' | pattern='*not found*' | msg="'Wont show as there is no error'" ]</msg>
<msg timestamp="20200131 11:53:43.850" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.850" endtime="20200131 11:53:43.850"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Not Match</arg>
<arg>string=Can find me here</arg>
<arg>pattern=*me*</arg>
<arg>msg='The overwriting error'</arg>
</arguments>
<msg timestamp="20200131 11:53:43.851" level="TRACE">Arguments: [ 'Should Not Match' | 'string=Can find me here' | 'pattern=*me*' | "msg='The overwriting error'" ]</msg>
<kw name="Should Not Match" library="BuiltIn">
<doc>Fails if the given ``string`` matches the given ``pattern``.</doc>
<arguments>
<arg>string=Can find me here</arg>
<arg>pattern=*me*</arg>
<arg>msg='The overwriting error'</arg>
</arguments>
<msg timestamp="20200131 11:53:43.851" level="TRACE">Arguments: [ string='Can find me here' | pattern='*me*' | msg="'The overwriting error'" ]</msg>
<msg timestamp="20200131 11:53:43.851" level="FAIL">'The overwriting error': 'Can find me here' matches '*me*'</msg>
<msg timestamp="20200131 11:53:43.851" level="DEBUG">Traceback (most recent call last):
  None</msg>
<status status="FAIL" starttime="20200131 11:53:43.851" endtime="20200131 11:53:43.851"></status>
</kw>
<msg timestamp="20200131 11:53:43.851" level="TRACE">Return: ('FAIL', "'The overwriting error': 'Can find me here' matches '*me*'")</msg>
<status status="PASS" starttime="20200131 11:53:43.851" endtime="20200131 11:53:43.851"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Not Match</arg>
<arg>string=Will match with star</arg>
<arg>pattern=*</arg>
</arguments>
<msg timestamp="20200131 11:53:43.851" level="TRACE">Arguments: [ 'Should Not Match' | 'string=Will match with star' | 'pattern=*' ]</msg>
<kw name="Should Not Match" library="BuiltIn">
<doc>Fails if the given ``string`` matches the given ``pattern``.</doc>
<arguments>
<arg>string=Will match with star</arg>
<arg>pattern=*</arg>
</arguments>
<msg timestamp="20200131 11:53:43.852" level="TRACE">Arguments: [ string='Will match with star' | pattern='*' ]</msg>
<msg timestamp="20200131 11:53:43.852" level="FAIL">'Will match with star' matches '*'</msg>
<msg timestamp="20200131 11:53:43.852" level="DEBUG">Traceback (most recent call last):
  None</msg>
<status status="FAIL" starttime="20200131 11:53:43.852" endtime="20200131 11:53:43.852"></status>
</kw>
<msg timestamp="20200131 11:53:43.852" level="TRACE">Return: ('FAIL', "'Will match with star' matches '*'")</msg>
<status status="PASS" starttime="20200131 11:53:43.851" endtime="20200131 11:53:43.852"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Not Match</arg>
<arg>string=Will match this</arg>
<arg>pattern=*[atx]his</arg>
</arguments>
<msg timestamp="20200131 11:53:43.854" level="TRACE">Arguments: [ 'Should Not Match' | 'string=Will match this' | 'pattern=*[atx]his' ]</msg>
<kw name="Should Not Match" library="BuiltIn">
<doc>Fails if the given ``string`` matches the given ``pattern``.</doc>
<arguments>
<arg>string=Will match this</arg>
<arg>pattern=*[atx]his</arg>
</arguments>
<msg timestamp="20200131 11:53:43.854" level="TRACE">Arguments: [ string='Will match this' | pattern='*[atx]his' ]</msg>
<msg timestamp="20200131 11:53:43.854" level="FAIL">'Will match this' matches '*[atx]his'</msg>
<msg timestamp="20200131 11:53:43.854" level="DEBUG">Traceback (most recent call last):
  None</msg>
<status status="FAIL" starttime="20200131 11:53:43.854" endtime="20200131 11:53:43.855"></status>
</kw>
<msg timestamp="20200131 11:53:43.855" level="TRACE">Return: ('FAIL', "'Will match this' matches '*[atx]his'")</msg>
<status status="PASS" starttime="20200131 11:53:43.854" endtime="20200131 11:53:43.855"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Not Match</arg>
<arg>string='Will match with keyword'</arg>
<arg>pattern=*?eyword*</arg>
</arguments>
<msg timestamp="20200131 11:53:43.857" level="TRACE">Arguments: [ 'Should Not Match' | "string='Will match with keyword'" | 'pattern=*?eyword*' ]</msg>
<kw name="Should Not Match" library="BuiltIn">
<doc>Fails if the given ``string`` matches the given ``pattern``.</doc>
<arguments>
<arg>string='Will match with keyword'</arg>
<arg>pattern=*?eyword*</arg>
</arguments>
<msg timestamp="20200131 11:53:43.857" level="TRACE">Arguments: [ string="'Will match with keyword'" | pattern='*?eyword*' ]</msg>
<msg timestamp="20200131 11:53:43.858" level="FAIL">''Will match with keyword'' matches '*?eyword*'</msg>
<msg timestamp="20200131 11:53:43.858" level="DEBUG">Traceback (most recent call last):
  None</msg>
<status status="FAIL" starttime="20200131 11:53:43.857" endtime="20200131 11:53:43.858"></status>
</kw>
<msg timestamp="20200131 11:53:43.858" level="TRACE">Return: ('FAIL', "''Will match with keyword'' matches '*?eyword*'")</msg>
<status status="PASS" starttime="20200131 11:53:43.857" endtime="20200131 11:53:43.858"></status>
</kw>
<doc>Should Not Match string, pattern, msg=None, values=True, ignore_case=False
Fails if the given string matches the given pattern
Fails if the given string matches the given pattern.
Pattern matching is similar as matching files in a shell with *, ? and [chars] acting as wildcards.
See the Glob patterns section for more information.
See Should Be Equal for an explanation on how to override the default error message with msg and values, as well as for semantics of the ignore_case option.</doc>
<status status="PASS" starttime="20200131 11:53:43.848" endtime="20200131 11:53:43.861" critical="yes"></status>
</test>
<test id="s1-s1-t106" name="Use &quot;Should Not Match Regexp&quot;">
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>Understand regex first and implement this</arg>
</arguments>
<msg timestamp="20200131 11:53:43.862" level="TRACE">Arguments: [ 'Understand regex first and implement this' ]</msg>
<msg timestamp="20200131 11:53:43.862" level="FAIL">Understand regex first and implement this</msg>
<msg timestamp="20200131 11:53:43.862" level="DEBUG">Traceback (most recent call last):
  None</msg>
<status status="FAIL" starttime="20200131 11:53:43.862" endtime="20200131 11:53:43.862"></status>
</kw>
<tags>
<tag>not-understood</tag>
</tags>
<status status="FAIL" starttime="20200131 11:53:43.861" endtime="20200131 11:53:43.862" critical="yes">Understand regex first and implement this</status>
</test>
<test id="s1-s1-t107" name="Use &quot;Should Not Start With&quot;">
<kw name="Should Not Start With" library="BuiltIn">
<doc>Fails if the string ``str1`` starts with the string ``str2``.</doc>
<arguments>
<arg>does not start with</arg>
<arg>X</arg>
<arg>msg=Wont show as there is no error</arg>
</arguments>
<msg timestamp="20200131 11:53:43.863" level="TRACE">Arguments: [ 'does not start with' | 'X' | msg='Wont show as there is no error' ]</msg>
<msg timestamp="20200131 11:53:43.863" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.863" endtime="20200131 11:53:43.863"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Not Start With</arg>
<arg>does start with</arg>
<arg>DOES</arg>
<arg>msg=Will show as there is error</arg>
<arg>ignore_case=True</arg>
</arguments>
<msg timestamp="20200131 11:53:43.865" level="TRACE">Arguments: [ 'Should Not Start With' | 'does start with' | 'DOES' | 'msg=Will show as there is error' | 'ignore_case=True' ]</msg>
<kw name="Should Not Start With" library="BuiltIn">
<doc>Fails if the string ``str1`` starts with the string ``str2``.</doc>
<arguments>
<arg>does start with</arg>
<arg>DOES</arg>
<arg>msg=Will show as there is error</arg>
<arg>ignore_case=True</arg>
</arguments>
<msg timestamp="20200131 11:53:43.865" level="TRACE">Arguments: [ 'does start with' | 'DOES' | msg='Will show as there is error' | ignore_case=True ]</msg>
<msg timestamp="20200131 11:53:43.865" level="FAIL">Will show as there is error: 'does start with' starts with 'does'</msg>
<msg timestamp="20200131 11:53:43.865" level="DEBUG">Traceback (most recent call last):
  None</msg>
<status status="FAIL" starttime="20200131 11:53:43.865" endtime="20200131 11:53:43.865"></status>
</kw>
<msg timestamp="20200131 11:53:43.865" level="TRACE">Return: ('FAIL', "Will show as there is error: 'does start with' starts with 'does'")</msg>
<status status="PASS" starttime="20200131 11:53:43.864" endtime="20200131 11:53:43.865"></status>
</kw>
<doc>Should Not Start With str1, str2, msg=None, values=True, ignore_case=False
Fails if the string str1 starts with the string str2.</doc>
<status status="PASS" starttime="20200131 11:53:43.862" endtime="20200131 11:53:43.865" critical="yes"></status>
</test>
<test id="s1-s1-t108" name="Use &quot;Should Start With&quot;">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Start With</arg>
<arg>does not start with</arg>
<arg>X</arg>
<arg>msg=Wont show as there is no error</arg>
</arguments>
<msg timestamp="20200131 11:53:43.868" level="TRACE">Arguments: [ 'Should Start With' | 'does not start with' | 'X' | 'msg=Wont show as there is no error' ]</msg>
<kw name="Should Start With" library="BuiltIn">
<doc>Fails if the string ``str1`` does not start with the string ``str2``.</doc>
<arguments>
<arg>does not start with</arg>
<arg>X</arg>
<arg>msg=Wont show as there is no error</arg>
</arguments>
<msg timestamp="20200131 11:53:43.868" level="TRACE">Arguments: [ 'does not start with' | 'X' | msg='Wont show as there is no error' ]</msg>
<msg timestamp="20200131 11:53:43.868" level="FAIL">Wont show as there is no error: 'does not start with' does not start with 'X'</msg>
<msg timestamp="20200131 11:53:43.868" level="DEBUG">Traceback (most recent call last):
  None</msg>
<status status="FAIL" starttime="20200131 11:53:43.868" endtime="20200131 11:53:43.868"></status>
</kw>
<msg timestamp="20200131 11:53:43.868" level="TRACE">Return: ('FAIL',
 "Wont show as there is no error: 'does not start with' does not start with 'X'")</msg>
<status status="PASS" starttime="20200131 11:53:43.868" endtime="20200131 11:53:43.868"></status>
</kw>
<kw name="Should Start With" library="BuiltIn">
<doc>Fails if the string ``str1`` does not start with the string ``str2``.</doc>
<arguments>
<arg>does start with</arg>
<arg>DOES</arg>
<arg>msg=Wont show as there is no error</arg>
<arg>ignore_case=True</arg>
</arguments>
<msg timestamp="20200131 11:53:43.868" level="TRACE">Arguments: [ 'does start with' | 'DOES' | msg='Wont show as there is no error' | ignore_case=True ]</msg>
<msg timestamp="20200131 11:53:43.868" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.868" endtime="20200131 11:53:43.868"></status>
</kw>
<doc>Should Start With str1, str2, msg=None, values=True, ignore_case=False
Fails if the string str1 does not start with the string str2.</doc>
<status status="PASS" starttime="20200131 11:53:43.865" endtime="20200131 11:53:43.869" critical="yes"></status>
</test>
<test id="s1-s1-t109" name="Use &quot;Sleep&quot;">
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>time_=1s</arg>
<arg>reason=Just to use Sleep</arg>
</arguments>
<msg timestamp="20200131 11:53:43.871" level="TRACE">Arguments: [ time_='1s' | reason='Just to use Sleep' ]</msg>
<msg timestamp="20200131 11:53:44.872" level="INFO">Slept 1 second</msg>
<msg timestamp="20200131 11:53:44.872" level="INFO">Just to use Sleep</msg>
<msg timestamp="20200131 11:53:44.872" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:43.871" endtime="20200131 11:53:44.872"></status>
</kw>
<doc>Sleep time_, reason=None
Pauses the test executed for the given time.
time may be either a number or a time string. Time strings are in a format such as 1 day
2 hours 3 minutes 4 seconds 5milliseconds or 1d 2h 3m 4s 5ms</doc>
<status status="PASS" starttime="20200131 11:53:43.869" endtime="20200131 11:53:44.872" critical="yes"></status>
</test>
<test id="s1-s1-t110" name="Use &quot;Variable Should Exist&quot;">
<kw name="Get Variables" library="BuiltIn">
<doc>Returns a dictionary containing all variables in the current scope.</doc>
<assign>
<var>&amp;{locally_available_variables}</var>
</assign>
<msg timestamp="20200131 11:53:44.874" level="TRACE">Arguments: [  ]</msg>
<msg timestamp="20200131 11:53:44.874" level="TRACE">Return: &lt;robot.utils.normalizing.NormalizedDict object at 0x7fd4ffc48890&gt;</msg>
<msg timestamp="20200131 11:53:44.875" level="INFO">&amp;{locally_available_variables} = { ${/}=/ | ${:}=: | ${\n}=
 | ${add_multiple_values}=&lt;function add_multiple_values at 0x7fd4ff64d320&gt; | ${BROWSER}=Firefox | ${BuiltIn}=&lt;class 'robot.libraries.BuiltIn.BuiltIn'&gt; | ${DEBUG_FILE}=NONE |...</msg>
<status status="PASS" starttime="20200131 11:53:44.874" endtime="20200131 11:53:44.875"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${locally_available_variables}</arg>
</arguments>
<msg timestamp="20200131 11:53:44.875" level="TRACE">Arguments: [ {'${/}': '/',
 '${:}': ':',
 '${BROWSER}': 'Firefox',
 '${BuiltIn}': &lt;class 'robot.libraries.BuiltIn.BuiltIn'&gt;,
 '${DEBUG_FILE}': 'NONE',
 '${DYNAMIC_GLOBAL_SCALAR}': 'dynamic global variable available across all tests suites (i.e. utilize-global-variable.robot)',
 '${EXECDIR}': '/home/hakan/Python/Robot/robot-fw-built-in-library-tests',
 '${False}': False,
 '${GLOBAL_VAR}': 'I am overridden and just became global',
 '${LOG_FILE}': '/home/hakan/Python/Robot/robot-fw-built-in-library-tests/Results/log.html',
 '${LOG_LEVEL}': 'TRACE',
 '${NAME}': 'Y',
 '${None}': None,
 '${OUTPUT_DIR}': '/home/hakan/Python/Robot/robot-fw-built-in-library-tests/Results',
 '${OUTPUT_FILE}': '/home/hakan/Python/Robot/robot-fw-built-in-library-tests/Results/output.xml',
 '${PREV_TEST_MESSAGE}': '',
 '${PREV_TEST_NAME}': 'Use "Sleep"',
 '${PREV_TEST_STATUS}': 'PASS',
 '${REPORT_FILE}': '/home/hakan/Python/Robot/robot-fw-built-in-library-tests/Results/report.html',
 '${SEARCH_TERM}': 'Ferrari 456',
 '${SPACE}': ' ',
 '${SUITE_DOCUMENTATION}': "Checking out the built-in library's capabilities. This sentence is added to the suite documentation",
 '${SUITE_NAME}': 'Built-In-Library-Test &amp; Utilize-Global-Variable.Built-In-Library-Test',
 '${SUITE_SOURCE}': '/home/hakan/Python/Robot/robot-fw-built-in-library-tests/Tests/built-in-library-test.robot',
 '${StringUtils}': &lt;class 'Utils.StringUtils'&gt;,
 '${TEMPDIR}': '/tmp',
 '${TEST_DOCUMENTATION}': 'Variable Should Exist name, msg=None\nFails unless the given variable exists within the current scope.\nThe name of the variable can be given either as a normal variable name (e.g. Y)\nor in escaped format (e.g. ${NAME}). Notice that the former has some limitations explained in Set Suite Variable.\nThe default error message can be overridden with the msg argument.',
 '${TEST_NAME}': 'Use "Variable Should Exist"',
 '${TITLE_TEXT}': 'Amazon',
 '${TOPNAV_SEARCH_BOX}': 'css=*[id=twotabsearchtextbox]',
 '${TestSetup}': 'Use Pass Execution Setup',
 '${TestTeardown}': 'Use Pass Execution Teardown',
 '${True}': True,
 '${URL}': 'https://www.amazon.com/',
 '${Util}': &lt;class 'Utils.Util'&gt;,
 '${VARIABLE}': '21',
 '${\\n}': '\n',
 '${add_multiple_values}': &lt;function add_multiple_values at 0x7fd4ff64d320&gt;,
 '${get_integer}': &lt;function get_integer at 0x7fd4ff64d200&gt;,
 '${get_list}': &lt;function get_list at 0x7fd4ff64d4d0&gt;,
 '${get_string_wrapper}': &lt;function get_string_wrapper at 0x7fd4ff64d830&gt;,
 '${get_tuple}': &lt;function get_tuple at 0x7fd4ff64d440&gt;,
 '${important-teardown}': 'Test Teardown Using "Run Keyword If Test Failed" And "Run Keyword If Test Passed"',
 '${initialize_database}': &lt;function initialize_database at 0x7fd4ff6bc440&gt;,
 '${is_float_in_python}': &lt;function is_float_in_python at 0x7fd4ff64d710&gt;,
 '${is_integer_in_python}': &lt;function is_integer_in_python at 0x7fd4ff64d680&gt;,
 '${is_list_in_python}': &lt;function is_list_in_python at 0x7fd4ff64d5f0&gt;,
 '${is_string_in_python}': &lt;function is_string_in_python at 0x7fd4ff64d560&gt;,
 '${keyword_to_run}': 'add multiple values',
 '${keyword}': &lt;function keyword at 0x7fd4ffa064d0&gt;,
 '${local_to_suite_scoped}': 3,
 '${logger}': &lt;module 'robot.api.logger' from '/home/hakan/anaconda3/lib/python3.7/site-packages/robot/api/logger.py'&gt;,
 '${not-important-setup}': 'Not Important Setup',
 '${null}': None,
 '${raise_type_error_in_python}': &lt;function raise_type_error_in_python at 0x7fd4ff64d290&gt;,
 '${start_servers}': &lt;function start_servers at 0x7fd4ff6bc4d0&gt;,
 '${title_should_start_with}': &lt;function title_should_start_with at 0x7fd4ff64d3b0&gt;,
 '${utility_function_one}': &lt;function utility_function_one at 0x7fd4ff64d7a0&gt;,
 '${utility_object}': &lt;Utils.Util object at 0x7fd4ff6bfe90&gt;,
 '${var2}': 'suite',
 '${var}': 'X',
 '&amp;{ALSO-CHILD-SUITE-ACCESSIBLE-DICT}': {'key': 'value'},
 '&amp;{DICTIONARY}': {'key1': 'value1', 'key2': 'value2', 'key3': 'value3'},
 '&amp;{DYNAMIC_GLOBAL_DICTIONARY}': {'key': 'value'},
 '&amp;{SUITE_METADATA}': {'key1': 'value', 'key2': '6'},
 '&amp;{python_dictionary}': {'keyA': 'a', 'keyB': 'b', 'keyC': 'c'},
 '@{DYNAMIC_GLOBAL_LIST}': ['First item', 'Second Item', 'Third Item'],
 '@{LIST}': ['Value1', 'Value2', 'CONTINUE', 'Value3'],
 '@{MULTI_LINE_LIST}': ['this',
                        'list',
                        'is',
                        'quite',
                        'long',
                        'and',
                        'items in it could also be long'],
 '@{PARENT-SUITE-ONLY-LIST}': ['Item 1', 2, 'Item 3'],
 '@{TEST_TAGS}': [],
 '@{python_list}': [1, 2, 3]} ]</msg>
<msg timestamp="20200131 11:53:44.876" level="INFO">{'${/}': '/', '${:}': ':', '${\\n}': '\n', '${add_multiple_values}': &lt;function add_multiple_values at 0x7fd4ff64d320&gt;, '${BROWSER}': 'Firefox', '${BuiltIn}': &lt;class 'robot.libraries.BuiltIn.BuiltIn'&gt;, '${DEBUG_FILE}': 'NONE', '${DYNAMIC_GLOBAL_SCALAR}': 'dynamic global variable available across all tests suites (i.e. utilize-global-variable.robot)', '${EXECDIR}': '/home/hakan/Python/Robot/robot-fw-built-in-library-tests', '${False}': False, '${get_integer}': &lt;function get_integer at 0x7fd4ff64d200&gt;, '${get_list}': &lt;function get_list at 0x7fd4ff64d4d0&gt;, '${get_string_wrapper}': &lt;function get_string_wrapper at 0x7fd4ff64d830&gt;, '${get_tuple}': &lt;function get_tuple at 0x7fd4ff64d440&gt;, '${GLOBAL_VAR}': 'I am overridden and just became global', '${important-teardown}': 'Test Teardown Using "Run Keyword If Test Failed" And "Run Keyword If Test Passed"', '${initialize_database}': &lt;function initialize_database at 0x7fd4ff6bc440&gt;, '${is_float_in_python}': &lt;function is_float_in_python at 0x7fd4ff64d710&gt;, '${is_integer_in_python}': &lt;function is_integer_in_python at 0x7fd4ff64d680&gt;, '${is_list_in_python}': &lt;function is_list_in_python at 0x7fd4ff64d5f0&gt;, '${is_string_in_python}': &lt;function is_string_in_python at 0x7fd4ff64d560&gt;, '${keyword_to_run}': 'add multiple values', '${keyword}': &lt;function keyword at 0x7fd4ffa064d0&gt;, '${local_to_suite_scoped}': 3, '${LOG_FILE}': '/home/hakan/Python/Robot/robot-fw-built-in-library-tests/Results/log.html', '${logger}': &lt;module 'robot.api.logger' from '/home/hakan/anaconda3/lib/python3.7/site-packages/robot/api/logger.py'&gt;, '${LOG_LEVEL}': 'TRACE', '${NAME}': 'Y', '${None}': None, '${not-important-setup}': 'Not Important Setup', '${null}': None, '${OUTPUT_DIR}': '/home/hakan/Python/Robot/robot-fw-built-in-library-tests/Results', '${OUTPUT_FILE}': '/home/hakan/Python/Robot/robot-fw-built-in-library-tests/Results/output.xml', '${PREV_TEST_MESSAGE}': '', '${PREV_TEST_NAME}': 'Use "Sleep"', '${PREV_TEST_STATUS}': 'PASS', '${raise_type_error_in_python}': &lt;function raise_type_error_in_python at 0x7fd4ff64d290&gt;, '${REPORT_FILE}': '/home/hakan/Python/Robot/robot-fw-built-in-library-tests/Results/report.html', '${SEARCH_TERM}': 'Ferrari 456', '${SPACE}': ' ', '${start_servers}': &lt;function start_servers at 0x7fd4ff6bc4d0&gt;, '${StringUtils}': &lt;class 'Utils.StringUtils'&gt;, '${SUITE_DOCUMENTATION}': "Checking out the built-in library's capabilities. This sentence is added to the suite documentation", '${SUITE_NAME}': 'Built-In-Library-Test &amp; Utilize-Global-Variable.Built-In-Library-Test', '${SUITE_SOURCE}': '/home/hakan/Python/Robot/robot-fw-built-in-library-tests/Tests/built-in-library-test.robot', '${TEMPDIR}': '/tmp', '${TEST_DOCUMENTATION}': 'Variable Should Exist name, msg=None\nFails unless the given variable exists within the current scope.\nThe name of the variable can be given either as a normal variable name (e.g. Y)\nor in escaped format (e.g. ${NAME}). Notice that the former has some limitations explained in Set Suite Variable.\nThe default error message can be overridden with the msg argument.', '${TEST_NAME}': 'Use "Variable Should Exist"', '${TestSetup}': 'Use Pass Execution Setup', '${TestTeardown}': 'Use Pass Execution Teardown', '${title_should_start_with}': &lt;function title_should_start_with at 0x7fd4ff64d3b0&gt;, '${TITLE_TEXT}': 'Amazon', '${TOPNAV_SEARCH_BOX}': 'css=*[id=twotabsearchtextbox]', '${True}': True, '${URL}': 'https://www.amazon.com/', '${utility_function_one}': &lt;function utility_function_one at 0x7fd4ff64d7a0&gt;, '${utility_object}': &lt;Utils.Util object at 0x7fd4ff6bfe90&gt;, '${Util}': &lt;class 'Utils.Util'&gt;, '${var2}': 'suite', '${VARIABLE}': '21', '${var}': 'X', '&amp;{ALSO-CHILD-SUITE-ACCESSIBLE-DICT}': {'key': 'value'}, '&amp;{DICTIONARY}': {'key1': 'value1', 'key2': 'value2', 'key3': 'value3'}, '&amp;{DYNAMIC_GLOBAL_DICTIONARY}': {'key': 'value'}, '&amp;{python_dictionary}': {'keyA': 'a', 'keyB': 'b', 'keyC': 'c'}, '&amp;{SUITE_METADATA}': {'key1': 'value', 'key2': '6'}, '@{DYNAMIC_GLOBAL_LIST}': ['First item', 'Second Item', 'Third Item'], '@{LIST}': ['Value1', 'Value2', 'CONTINUE', 'Value3'], '@{MULTI_LINE_LIST}': ['this', 'list', 'is', 'quite', 'long', 'and', 'items in it could also be long'], '@{PARENT-SUITE-ONLY-LIST}': ['Item 1', 2, 'Item 3'], '@{python_list}': [1, 2, 3], '@{TEST_TAGS}': []}</msg>
<msg timestamp="20200131 11:53:44.876" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:44.875" endtime="20200131 11:53:44.876"></status>
</kw>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>\&amp;{DICTIONARY}</arg>
</arguments>
<msg timestamp="20200131 11:53:44.877" level="TRACE">Arguments: [ '\\&amp;{DICTIONARY}' ]</msg>
<msg timestamp="20200131 11:53:44.877" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:44.877" endtime="20200131 11:53:44.877"></status>
</kw>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>\@{DYNAMIC_GLOBAL_LIST}</arg>
</arguments>
<msg timestamp="20200131 11:53:44.877" level="TRACE">Arguments: [ '\\@{DYNAMIC_GLOBAL_LIST}' ]</msg>
<msg timestamp="20200131 11:53:44.877" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:44.877" endtime="20200131 11:53:44.877"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${non-existing-var}</arg>
<arg>msg='Overriding error msg'</arg>
</arguments>
<msg timestamp="20200131 11:53:44.877" level="TRACE">Arguments: [ 'Variable Should Exist' | '${non-existing-var}' | "msg='Overriding error msg'" ]</msg>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${non-existing-var}</arg>
<arg>msg='Overriding error msg'</arg>
</arguments>
<msg timestamp="20200131 11:53:44.878" level="TRACE">Arguments: [ '${non-existing-var}' | "msg='Overriding error msg'" ]</msg>
<msg timestamp="20200131 11:53:44.879" level="FAIL">msg='Overriding error msg'</msg>
<msg timestamp="20200131 11:53:44.879" level="DEBUG">Traceback (most recent call last):
  None</msg>
<status status="FAIL" starttime="20200131 11:53:44.878" endtime="20200131 11:53:44.879"></status>
</kw>
<msg timestamp="20200131 11:53:44.879" level="TRACE">Return: ('FAIL', "msg='Overriding error msg'")</msg>
<status status="PASS" starttime="20200131 11:53:44.877" endtime="20200131 11:53:44.879"></status>
</kw>
<doc>Variable Should Exist name, msg=None
Fails unless the given variable exists within the current scope.
The name of the variable can be given either as a normal variable name (e.g. Y)
or in escaped format (e.g. ${NAME}). Notice that the former has some limitations explained in Set Suite Variable.
The default error message can be overridden with the msg argument.</doc>
<status status="PASS" starttime="20200131 11:53:44.873" endtime="20200131 11:53:44.879" critical="yes"></status>
</test>
<test id="s1-s1-t111" name="Use &quot;Variable Should Not Exist&quot;">
<kw name="Variable Should Not Exist" library="BuiltIn">
<doc>Fails if the given variable exists within the current scope.</doc>
<arguments>
<arg>${non-existing-var}</arg>
<arg>msg='Wont show as there is no error'</arg>
</arguments>
<msg timestamp="20200131 11:53:44.883" level="TRACE">Arguments: [ '${non-existing-var}' | "msg='Wont show as there is no error'" ]</msg>
<msg timestamp="20200131 11:53:44.886" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:44.883" endtime="20200131 11:53:44.886"></status>
</kw>
<doc>Refer to the test above: Use "Variable Should Exist"
This keyword does the opposite of "Variable Should Exist"</doc>
<status status="PASS" starttime="20200131 11:53:44.882" endtime="20200131 11:53:44.887" critical="yes"></status>
</test>
<test id="s1-s1-t112" name="Use &quot;Wait Until Keyword Succeeds&quot;">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Wait Until Keyword Succeeds</arg>
<arg>3x</arg>
<arg>100ms</arg>
<arg>raise type error in python</arg>
<arg>a</arg>
<arg>b</arg>
<arg>c</arg>
</arguments>
<msg timestamp="20200131 11:53:44.888" level="TRACE">Arguments: [ 'Wait Until Keyword Succeeds' | '3x' | '100ms' | 'raise type error in python' | 'a' | 'b' | 'c' ]</msg>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>3x</arg>
<arg>100ms</arg>
<arg>raise type error in python</arg>
<arg>a</arg>
<arg>b</arg>
<arg>c</arg>
</arguments>
<msg timestamp="20200131 11:53:44.888" level="TRACE">Arguments: [ '3x' | '100ms' | 'raise type error in python' | 'a' | 'b' | 'c' ]</msg>
<kw name="Raise Type Error In Python" library="Utils">
<arguments>
<arg>a</arg>
<arg>b</arg>
<arg>c</arg>
</arguments>
<msg timestamp="20200131 11:53:44.888" level="TRACE">Arguments: [ 'a' | 'b' | 'c' ]</msg>
<msg timestamp="20200131 11:53:44.888" level="FAIL">TypeError: Intentionally failing the keyword by raising this exception</msg>
<msg timestamp="20200131 11:53:44.888" level="DEBUG">Traceback (most recent call last):
  File "/home/hakan/Python/Robot/robot-fw-built-in-library-tests/Tests/Utils.py", line 26, in raise_type_error_in_python
    raise TypeError("Intentionally failing the keyword by raising this exception")</msg>
<status status="FAIL" starttime="20200131 11:53:44.888" endtime="20200131 11:53:44.888"></status>
</kw>
<kw name="Raise Type Error In Python" library="Utils">
<arguments>
<arg>a</arg>
<arg>b</arg>
<arg>c</arg>
</arguments>
<msg timestamp="20200131 11:53:44.990" level="TRACE">Arguments: [ 'a' | 'b' | 'c' ]</msg>
<msg timestamp="20200131 11:53:44.990" level="FAIL">TypeError: Intentionally failing the keyword by raising this exception</msg>
<msg timestamp="20200131 11:53:44.990" level="DEBUG">Traceback (most recent call last):
  File "/home/hakan/Python/Robot/robot-fw-built-in-library-tests/Tests/Utils.py", line 26, in raise_type_error_in_python
    raise TypeError("Intentionally failing the keyword by raising this exception")</msg>
<status status="FAIL" starttime="20200131 11:53:44.990" endtime="20200131 11:53:44.990"></status>
</kw>
<kw name="Raise Type Error In Python" library="Utils">
<arguments>
<arg>a</arg>
<arg>b</arg>
<arg>c</arg>
</arguments>
<msg timestamp="20200131 11:53:45.091" level="TRACE">Arguments: [ 'a' | 'b' | 'c' ]</msg>
<msg timestamp="20200131 11:53:45.091" level="FAIL">TypeError: Intentionally failing the keyword by raising this exception</msg>
<msg timestamp="20200131 11:53:45.091" level="DEBUG">Traceback (most recent call last):
  File "/home/hakan/Python/Robot/robot-fw-built-in-library-tests/Tests/Utils.py", line 26, in raise_type_error_in_python
    raise TypeError("Intentionally failing the keyword by raising this exception")</msg>
<status status="FAIL" starttime="20200131 11:53:45.091" endtime="20200131 11:53:45.091"></status>
</kw>
<msg timestamp="20200131 11:53:45.091" level="FAIL">Keyword 'raise type error in python' failed after retrying 3 times. The last error was: TypeError: Intentionally failing the keyword by raising this exception</msg>
<msg timestamp="20200131 11:53:45.091" level="DEBUG">Traceback (most recent call last):
  None</msg>
<status status="FAIL" starttime="20200131 11:53:44.888" endtime="20200131 11:53:45.091"></status>
</kw>
<msg timestamp="20200131 11:53:45.091" level="TRACE">Return: ('FAIL',
 "Keyword 'raise type error in python' failed after retrying 3 times. The last error was: TypeError: Intentionally failing the keyword by raising this exception")</msg>
<status status="PASS" starttime="20200131 11:53:44.888" endtime="20200131 11:53:45.092"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>3x</arg>
<arg>100ms</arg>
<arg>add_multiple_values</arg>
<arg>${1}</arg>
<arg>${2}</arg>
<arg>${3}</arg>
</arguments>
<assign>
<var>${total}</var>
</assign>
<msg timestamp="20200131 11:53:45.092" level="TRACE">Arguments: [ '3x' | '100ms' | 'add_multiple_values' | '${1}' | '${2}' | '${3}' ]</msg>
<kw name="Add Multiple Values" library="Utils">
<arguments>
<arg>${1}</arg>
<arg>${2}</arg>
<arg>${3}</arg>
</arguments>
<msg timestamp="20200131 11:53:45.092" level="TRACE">Arguments: [ 1 | 2 | 3 ]</msg>
<msg timestamp="20200131 11:53:45.092" level="TRACE">Return: 6</msg>
<status status="PASS" starttime="20200131 11:53:45.092" endtime="20200131 11:53:45.092"></status>
</kw>
<msg timestamp="20200131 11:53:45.092" level="TRACE">Return: 6</msg>
<msg timestamp="20200131 11:53:45.092" level="INFO">${total} = 6</msg>
<status status="PASS" starttime="20200131 11:53:45.092" endtime="20200131 11:53:45.092"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${total}</arg>
<arg>${6}</arg>
</arguments>
<msg timestamp="20200131 11:53:45.093" level="TRACE">Arguments: [ 6 | 6 ]</msg>
<msg timestamp="20200131 11:53:45.093" level="DEBUG">Argument types are:
&lt;class 'int'&gt;
&lt;class 'int'&gt;</msg>
<msg timestamp="20200131 11:53:45.093" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:45.093" endtime="20200131 11:53:45.093"></status>
</kw>
<doc>Wait Until Keyword Succeeds retry, retry_interval, name, *args
Runs the specified keyword and retries if it fails
If the keyword does not succeed regardless of retries, this keyword fails.
If the executed keyword passes, its return value is returned</doc>
<status status="PASS" starttime="20200131 11:53:44.887" endtime="20200131 11:53:45.093" critical="yes"></status>
</test>
<kw name="Suite Teardown" type="teardown">
<msg timestamp="20200131 11:53:45.095" level="TRACE">Arguments: [  ]</msg>
<kw name="Run Keyword If All Critical Tests Passed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if all critical tests passed.</doc>
<arguments>
<arg>Log</arg>
<arg>All Critical Tests Passed</arg>
</arguments>
<msg timestamp="20200131 11:53:45.095" level="TRACE">Arguments: [ 'Log' | 'All Critical Tests Passed' ]</msg>
<msg timestamp="20200131 11:53:45.096" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:45.095" endtime="20200131 11:53:45.096"></status>
</kw>
<kw name="Run Keyword If Any Critical Tests Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if any critical tests failed.</doc>
<arguments>
<arg>Log</arg>
<arg>Will not be executed</arg>
</arguments>
<msg timestamp="20200131 11:53:45.096" level="TRACE">Arguments: [ 'Log' | 'Will not be executed' ]</msg>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Will not be executed</arg>
</arguments>
<msg timestamp="20200131 11:53:45.098" level="TRACE">Arguments: [ 'Will not be executed' ]</msg>
<msg timestamp="20200131 11:53:45.098" level="INFO">Will not be executed</msg>
<msg timestamp="20200131 11:53:45.098" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:45.098" endtime="20200131 11:53:45.098"></status>
</kw>
<msg timestamp="20200131 11:53:45.098" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:45.096" endtime="20200131 11:53:45.098"></status>
</kw>
<kw name="Run Keyword If Any Tests Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if one or more tests failed.</doc>
<arguments>
<arg>add multiple values</arg>
<arg>${1}</arg>
<arg>${2}</arg>
<arg>${3}</arg>
</arguments>
<assign>
<var>${sum}</var>
</assign>
<msg timestamp="20200131 11:53:45.098" level="TRACE">Arguments: [ 'add multiple values' | '${1}' | '${2}' | '${3}' ]</msg>
<kw name="Add Multiple Values" library="Utils">
<arguments>
<arg>${1}</arg>
<arg>${2}</arg>
<arg>${3}</arg>
</arguments>
<msg timestamp="20200131 11:53:45.099" level="TRACE">Arguments: [ 1 | 2 | 3 ]</msg>
<msg timestamp="20200131 11:53:45.099" level="TRACE">Return: 6</msg>
<status status="PASS" starttime="20200131 11:53:45.099" endtime="20200131 11:53:45.100"></status>
</kw>
<msg timestamp="20200131 11:53:45.100" level="TRACE">Return: 6</msg>
<msg timestamp="20200131 11:53:45.100" level="INFO">${sum} = 6</msg>
<status status="PASS" starttime="20200131 11:53:45.098" endtime="20200131 11:53:45.100"></status>
</kw>
<msg timestamp="20200131 11:53:45.100" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:45.095" endtime="20200131 11:53:45.100"></status>
</kw>
<doc>Checking out the built-in library's capabilities. This sentence is added to the suite documentation</doc>
<metadata>
<item name="key1">value</item>
<item name="key2">6</item>
</metadata>
<status status="FAIL" starttime="20200131 11:52:48.679" endtime="20200131 11:53:45.100"></status>
</suite>
<suite id="s1-s2" name="Utilize-Global-Variable" source="/home/hakan/Python/Robot/robot-fw-built-in-library-tests/Tests/utilize-global-variable.robot">
<test id="s1-s2-t1" name="Log Dynamic Variables Created In built-in-library-test.robot">
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${DYNAMIC_GLOBAL_SCALAR}</arg>
</arguments>
<msg timestamp="20200131 11:53:45.119" level="TRACE">Arguments: [ 'dynamic global variable available across all tests suites (i.e. utilize-global-variable.robot)' ]</msg>
<msg timestamp="20200131 11:53:45.119" level="INFO">dynamic global variable available across all tests suites (i.e. utilize-global-variable.robot)</msg>
<msg timestamp="20200131 11:53:45.119" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:45.119" endtime="20200131 11:53:45.119"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${DYNAMIC_GLOBAL_LIST}</arg>
</arguments>
<msg timestamp="20200131 11:53:45.120" level="TRACE">Arguments: [ ['First item', 'Second Item', 'Third Item'] ]</msg>
<msg timestamp="20200131 11:53:45.120" level="INFO">['First item', 'Second Item', 'Third Item']</msg>
<msg timestamp="20200131 11:53:45.120" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:45.119" endtime="20200131 11:53:45.120"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${DYNAMIC_GLOBAL_DICTIONARY}</arg>
</arguments>
<msg timestamp="20200131 11:53:45.120" level="TRACE">Arguments: [ {'key': 'value'} ]</msg>
<msg timestamp="20200131 11:53:45.120" level="INFO">{'key': 'value'}</msg>
<msg timestamp="20200131 11:53:45.120" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:45.120" endtime="20200131 11:53:45.120"></status>
</kw>
<status status="PASS" starttime="20200131 11:53:45.119" endtime="20200131 11:53:45.120" critical="yes"></status>
</test>
<test id="s1-s2-t2" name="Check GLOBAL_VAR Value">
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${GLOBAL_VAR}</arg>
<arg>I am overridden and just became global</arg>
</arguments>
<msg timestamp="20200131 11:53:45.123" level="TRACE">Arguments: [ 'I am overridden and just became global' | 'I am overridden and just became global' ]</msg>
<msg timestamp="20200131 11:53:45.124" level="DEBUG">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20200131 11:53:45.124" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20200131 11:53:45.123" endtime="20200131 11:53:45.124"></status>
</kw>
<status status="PASS" starttime="20200131 11:53:45.120" endtime="20200131 11:53:45.124" critical="yes"></status>
</test>
<doc>built-in-library-test.robot declares DYNAMIC_GLOBAL_VARIABLE and this suite logs it</doc>
<status status="PASS" starttime="20200131 11:53:45.114" endtime="20200131 11:53:45.125"></status>
</suite>
<status status="FAIL" starttime="20200131 11:52:48.657" endtime="20200131 11:53:45.128"></status>
</suite>
<statistics>
<total>
<stat pass="92" fail="13">Critical Tests</stat>
<stat pass="92" fail="22">All Tests</stat>
</total>
<tag>
<stat pass="0" fail="9" info="non-critical">failure-expected</stat>
<stat pass="1" fail="0">dynamic-tag-1</stat>
<stat pass="1" fail="0">keep-me-tag</stat>
<stat pass="0" fail="10">not-understood</stat>
</tag>
<suite>
<stat pass="92" fail="22" id="s1" name="Built-In-Library-Test &amp; Utilize-Global-Variable">Built-In-Library-Test &amp; Utilize-Global-Variable</stat>
<stat pass="90" fail="22" id="s1-s1" name="Built-In-Library-Test">Built-In-Library-Test &amp; Utilize-Global-Variable.Built-In-Library-Test</stat>
<stat pass="2" fail="0" id="s1-s2" name="Utilize-Global-Variable">Built-In-Library-Test &amp; Utilize-Global-Variable.Utilize-Global-Variable</stat>
</suite>
</statistics>
<errors>
<msg timestamp="20200131 11:53:43.540" level="ERROR">Log level=ERROR</msg>
<msg timestamp="20200131 11:53:43.540" level="WARN">Log level=WARN</msg>
<msg timestamp="20200131 11:53:43.543" level="ERROR">Log level=ERROR</msg>
<msg timestamp="20200131 11:53:43.543" level="WARN">Log level=WARN</msg>
<msg timestamp="20200131 11:53:43.550" level="ERROR">Log level=ERROR</msg>
<msg timestamp="20200131 11:53:43.550" level="WARN">Log level=WARN</msg>
<msg timestamp="20200131 11:53:43.551" level="ERROR">Log level=ERROR</msg>
<msg timestamp="20200131 11:53:43.551" level="WARN">Log level=WARN</msg>
<msg timestamp="20200131 11:53:43.553" level="ERROR">Log level=ERROR</msg>
<msg timestamp="20200131 11:53:43.553" level="WARN">Log level=WARN</msg>
</errors>
</robot>
